var N = null;var searchIndex = {};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"clone","","",0,[[["self"]],["match"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["match"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["result"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["match"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["result"]]]],[11,"clone","","",5,[[["self"]],["fullacautomaton"]]],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,[[["acautomaton"]],["fullacautomaton"]]],[11,"next_state","","",5,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",5,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",5,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",5,N],[11,"patterns","","",5,N],[11,"pattern","","",5,[[["self"],["usize"]],["p"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",6,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,N],[10,"pattern","","Returns the pattern indexed at `i`.",6,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",7,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",7,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",7,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,[[["self"]],["usize"]]],[11,"for_each_transition","","Iterates over each state",7,[[["self"],["f"]]]],[11,"for_each_ok_transition","","Iterates over each non-fail state",7,[[["self"],["f"]]]],[11,"clone","","",8,[[["self"]],["acautomaton"]]],[11,"new","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",8,[[["self"]],["fullacautomaton"]]],[11,"next_state","","",8,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",8,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",8,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",8,N],[11,"patterns","","",8,N],[11,"pattern","","",8,[[["self"],["usize"]],["p"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"for_each_transition","","",9,[[["self"],["f"]]]],[11,"for_each_ok_transition","","",9,[[["self"],["f"]]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"from_iter","","Create an automaton from an iterator of strings.",8,[[["t"]],["acautomaton"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"]={"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",N,N],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",N,N],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",N,N],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",N,N],[12,"foreground","","The style's foreground colour, if it has one.",0,N],[12,"background","","The style's background colour, if it has one.",0,N],[12,"is_bold","","Whether this style is bold.",0,N],[12,"is_dimmed","","Whether this style is dimmed.",0,N],[12,"is_italic","","Whether this style is italic.",0,N],[12,"is_underline","","Whether this style is underlined.",0,N],[12,"is_blink","","Whether this style is blinking.",0,N],[12,"is_reverse","","Whether this style has reverse colours.",0,N],[12,"is_hidden","","Whether this style is hidden.",0,N],[12,"is_strikethrough","","Whether this style is struckthrough.",0,N],[3,"ANSIGenericString","","An `ANSIGenericString` includes a generic string type and a `Style` to display that string.  `ANSIString` and `ANSIByteString` are aliases for this type on `str` and `[u8]`, respectively.",N,N],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",N,N],[12,"0","","",1,N],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[5,"ANSIStrings","","A function to construct an `ANSIStrings` instance.",N,N],[5,"ANSIByteStrings","","A function to construct an `ANSIByteStrings` instance.",N,N],[11,"clone","","",3,[[["self"]],["prefix"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["infix"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["suffix"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"prefix","","The prefix for this style.",0,[[["self"]],["prefix"]]],[11,"infix","","The infix between this style and another.",0,[[["self"],["style"]],["infix"]]],[11,"suffix","","The suffix for this style.",0,[[["self"]],["suffix"]]],[11,"prefix","","The prefix for this colour.",2,[[["self"]],["prefix"]]],[11,"infix","","The infix between this colour and another.",2,[[["self"],["colour"]],["infix"]]],[11,"suffix","","The suffix for this colour.",2,[[["self"]],["suffix"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["style"]],["bool"]]],[11,"ne","","",0,[[["self"],["style"]],["bool"]]],[11,"clone","","",0,[[["self"]],["style"]]],[11,"new","","Creates a new Style with no differences.",0,[[],["style"]]],[11,"bold","","Returns a `Style` with the bold property set.",0,[[["self"]],["style"]]],[11,"dimmed","","Returns a `Style` with the dimmed property set.",0,[[["self"]],["style"]]],[11,"italic","","Returns a `Style` with the italic property set.",0,[[["self"]],["style"]]],[11,"underline","","Returns a `Style` with the underline property set.",0,[[["self"]],["style"]]],[11,"blink","","Returns a `Style` with the blink property set.",0,[[["self"]],["style"]]],[11,"reverse","","Returns a `Style` with the reverse property set.",0,[[["self"]],["style"]]],[11,"hidden","","Returns a `Style` with the hidden property set.",0,[[["self"]],["style"]]],[11,"strikethrough","","Returns a `Style` with the hidden property set.",0,[[["self"]],["style"]]],[11,"fg","","Returns a `Style` with the foreground colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"on","","Returns a `Style` with the background colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,[[["self"]],["bool"]]],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,[[],["style"]]],[11,"eq","","",2,[[["self"],["colour"]],["bool"]]],[11,"ne","","",2,[[["self"],["colour"]],["bool"]]],[11,"clone","","",2,[[["self"]],["colour"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"normal","","Return a `Style` with the foreground colour set to this colour.",2,[[["self"]],["style"]]],[11,"bold","","Returns a `Style` with the bold property set.",2,[[["self"]],["style"]]],[11,"dimmed","","Returns a `Style` with the dimmed property set.",2,[[["self"]],["style"]]],[11,"italic","","Returns a `Style` with the italic property set.",2,[[["self"]],["style"]]],[11,"underline","","Returns a `Style` with the underline property set.",2,[[["self"]],["style"]]],[11,"blink","","Returns a `Style` with the blink property set.",2,[[["self"]],["style"]]],[11,"reverse","","Returns a `Style` with the reverse property set.",2,[[["self"]],["style"]]],[11,"hidden","","Returns a `Style` with the hidden property set.",2,[[["self"]],["style"]]],[11,"strikethrough","","Returns a `Style` with the strikethrough property set.",2,[[["self"]],["style"]]],[11,"on","","Returns a `Style` with the background colour property set.",2,[[["self"],["colour"]],["style"]]],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,[[["colour"]],["style"]]],[11,"eq","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"ne","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["ansigenericstring"]]],[11,"from","","",6,[[["i"]],["ansigenericstring"]]],[11,"deref","","",6,[[["self"]],["s"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,[[["self"],["i"]],["ansigenericstring"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,[[["self"],["i"]],["ansigenericstring"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[6,"ANSIString","","An ANSI String is a string coupled with the `Style` to display it in a terminal.",N,N],[6,"ANSIByteString","","An `ANSIByteString` represents a formatted series of bytes.  Use `ANSIByteString` when styling text with an unknown encoding.",N,N],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",N,N],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",N,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"write_to","","Write an `ANSIByteString` to an `io::Write`.  This writes the escape sequences for the associated `Style` around the bytes.",8,[[["self"],["w"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"write_to","","Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal escape sequences for the associated `Style`s around each set of bytes.",10,[[["self"],["w"]],["result"]]]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["array_tool"]={"doc":"Array Tool","items":[[5,"uniques","array_tool","Get `uniques` from two vectors",N,[[["vec"],["vec"]],["vec",["vec"]]]],[0,"iter","","Array Tool provides useful methods for iterators ",N,N],[8,"ZipOpt","array_tool::iter","Zips to iterators together to the longest length via Option<(Option, Option)>",N,N],[10,"zip_option","","Zip to iterators to longest length via Option<(Option, Option)> results. # Example ``` use array_tool::iter::ZipOpt;",0,[[["self"],["u"]],["zipoption"]]],[0,"vec","array_tool","Array Tool provides many useful methods for vectors",N,N],[8,"Uniq","array_tool::vec","Several different methods for getting, or evaluating, uniqueness.",N,N],[10,"uniq","","`uniq` returns a vector of unique values within itself as compared to the other vector which is provided as an input parameter.",1,[[["self"],["self"]],["self"]]],[10,"unique","","`unique` removes duplicates from within the vector and returns Self.",1,[[["self"]],["self"]]],[10,"is_unique","","`is_unique` returns boolean value on whether all values within Self are unique.",1,[[["self"]],["bool"]]],[10,"uniq_via","","`uniq_via` returns a vector of unique values within itself as compared to the other vector which is provided as an input parameter, as defined by a provided custom comparator.",1,[[["self"],["self"],["f"]],["self"]]],[10,"unique_via","","`unique_via` removes duplicates, as defined by a provided custom comparator, from within the vector and returns Self.",1,[[["self"],["f"]],["self"]]],[10,"is_unique_via","","`is_unique_via` returns boolean value on whether all values within Self are unique, as defined by a provided custom comparator.",1,[[["self"],["f"]],["bool"]]],[8,"Shift","","Removes, or Adds, the first element of self.",N,N],[10,"shift","","Removes and returns the first item from the vector",2,[[["self"]],["option"]]],[10,"unshift","","Insert item at the beginning of the vector.  No return value.",2,[[["self"],["t"]]]],[8,"Intersect","","Set Intersection — Returns a new array containing elements common to the two arrays, excluding any duplicates. The order is preserved from the original array.",N,N],[10,"intersect","","Example ``` use array_tool::vec::Intersect;",3,[[["self"],["self"]],["self"]]],[10,"intersect_if","","Example ``` # use std::ascii::AsciiExt; use array_tool::vec::Intersect;",3,[[["self"],["self"],["f"]],["self"]]],[8,"Join","","Join vector of ToString capable things to a String with given delimiter.",N,N],[10,"join","","Example ``` use array_tool::vec::Join;",4,[[["self"],["str"]],["string"]]],[8,"Times","","Expand and duplicate the vectors content `times` the integer given",N,N],[10,"times","","Example ``` use array_tool::vec::Times;",5,[[["self"],["i32"]],["self"]]],[8,"Union","","Create a `union` between two vectors. Returns a new vector by joining with other, excluding any duplicates and preserving the order from the original vector.",N,N],[10,"union","","Example ``` use array_tool::vec::Union;",6,[[["self"],["self"]],["self"]]],[0,"string","array_tool","A string is a collection so we should have more methods for handling strings.",N,N],[3,"GraphemeBytesIter","array_tool::string","A grapheme iterator that produces the bytes for each grapheme.",N,N],[8,"ToGraphemeBytesIter","","ToGraphemeBytesIter - create an iterator to return bytes for each grapheme in a string.",N,N],[10,"grapheme_bytes_iter","","Returns a GraphemeBytesIter which you may iterate over.",7,[[["self"]],["graphemebytesiter"]]],[8,"Squeeze","","Squeeze - squeezes duplicate characters down to one each",N,N],[10,"squeeze","","Example ``` use array_tool::string::Squeeze;",8,[[["self"],["str"]],["string"]]],[8,"Justify","","Justify - expand line to given width.",N,N],[10,"justify_line","","Example ``` use array_tool::string::Justify;",9,[[["self"],["usize"]],["string"]]],[8,"SubstMarks","","Substitute string character for each index given.",N,N],[10,"subst_marks","","Example ``` use array_tool::string::SubstMarks;",10,[[["self"],["vec",["usize"]],["str"]],["string"]]],[8,"AfterWhitespace","","After whitespace",N,N],[10,"seek_end_of_whitespace","","Given offset method will seek from there to end of string to find the first non white space.  Resulting value is counted from offset.",11,[[["self"],["usize"]],["option",["usize"]]]],[8,"WordWrap","","Word wrapping",N,N],[10,"word_wrap","","White space is treated as valid content and new lines will only be swapped in for  the last white space character at the end of the given width.  White space may reach beyond  the width you've provided.  You will need to trim end of lines in your own output (e.g.  splitting string at each new line and printing the line with trim_right).  Or just trust  that lines that are beyond the width are just white space and only print the width -  ignoring tailing white space.",12,[[["self"],["usize"]],["string"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new grapheme iterator from a string source.",13,[[["str"]],["graphemebytesiter"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]]],"paths":[[8,"ZipOpt"],[8,"Uniq"],[8,"Shift"],[8,"Intersect"],[8,"Join"],[8,"Times"],[8,"Union"],[8,"ToGraphemeBytesIter"],[8,"Squeeze"],[8,"Justify"],[8,"SubstMarks"],[8,"AfterWhitespace"],[8,"WordWrap"],[3,"GraphemeBytesIter"]]};
searchIndex["atty"]={"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",N,N],[13,"Stdout","","",0,N],[13,"Stderr","","",0,N],[13,"Stdin","","",0,N],[5,"is","","returns true if this is a tty",N,[[["stream"]],["bool"]]],[5,"isnt","","returns true if this is not a tty",N,[[["stream"]],["bool"]]],[11,"clone","","",0,[[["self"]],["stream"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Stream"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["cargo_update"]={"doc":"A `cargo` subcommand for checking and applying updates to installed executables","items":[[3,"ConfigOptions","cargo_update","Representation of the config application's all configurable values.",N,N],[12,"crates_file","","The `config` file in the `cargo` home directory. Default: in `\"$CARGO_INSTALL_ROOT\"`, then `\"$CARGO_HOME\"`, then `\"$HOME/.cargo\"`",0,N],[12,"package","","Crate to modify config for",0,N],[12,"ops","","What to do to the config, or display with empty",0,N],[3,"Options","","Representation of the application's all configurable values.",N,N],[12,"to_update","","(Additional) packages to update. Default: `[]`",1,N],[12,"all","","Whether to update all packages. Default: `false`",1,N],[12,"update","","Whether to update packages or just list them. Default: `true`",1,N],[12,"install","","Whether to allow for just installing packages. Default: `false`",1,N],[12,"force","","Update all packages. Default: `false`",1,N],[12,"update_git","","Update git packages too (it's expensive). Default: `false`",1,N],[12,"filter","","Update all packages. Default: empty",1,N],[12,"crates_file","","The `.crates.toml` file in the `cargo` home directory. Default: in `\"$CARGO_INSTALL_ROOT\"`, then `\"$CARGO_HOME\"`, then `\"$HOME/.cargo\"`",1,N],[12,"cargo_dir","","The `cargo` home directory. Default: `\"$CARGO_HOME\"`, then `\"$HOME/.cargo\"`",1,N],[12,"temp_dir","","The temporary directory to clone git repositories to. Default: `\"$TEMP/cargo-update\"`",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["options"]]],[11,"hash","","",1,N],[11,"eq","","",1,[[["self"],["options"]],["bool"]]],[11,"ne","","",1,[[["self"],["options"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["configoptions"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["configoptions"]],["bool"]]],[11,"ne","","",0,[[["self"],["configoptions"]],["bool"]]],[11,"parse","","Parse `env`-wide command-line arguments into an `Options` instance",1,[[],["options"]]],[11,"parse","","Parse `env`-wide command-line arguments into a `ConfigOptions` instance",0,[[],["configoptions"]]],[0,"ops","","Main functions doing actual work.",N,N],[3,"PackageConfig","cargo_update::ops","Compilation configuration for one crate.",N,N],[12,"toolchain","","Toolchain to use to compile the package, or `None` for default.",2,N],[12,"default_features","","Whether to compile the package with the default features.",2,N],[12,"features","","Features to compile the package with.",2,N],[12,"debug","","Whether to compile in debug mode.",2,N],[12,"target_version","","Whether to compile in debug mode.",2,N],[3,"MainRepoPackage","","A representation of a package from the main `crates.io` repository.",N,N],[12,"name","","The package's name.",3,N],[12,"version","","The package's locally installed version.",3,N],[12,"newest_version","","The latest version of the package vailable at the main `crates.io` repository.",3,N],[12,"max_version","","User-bounded maximum version to update up to.",3,N],[3,"GitRepoPackage","","A representation of a package a remote git repository.",N,N],[12,"name","","The package's name.",4,N],[12,"url","","The remote git repo URL.",4,N],[12,"branch","","The installed branch, or `None` for default.",4,N],[12,"id","","The package's locally installed version's object hash.",4,N],[12,"newest_id","","The latest version of the package vailable at the main `crates.io` repository.",4,N],[4,"ConfigOperation","","A single operation to be executed upon configuration of a package.",N,N],[13,"SetToolchain","","Set the toolchain to use to compile the package.",5,N],[13,"RemoveToolchain","","Use the default toolchain to use to compile the package.",5,N],[13,"DefaultFeatures","","Whether to compile the package with the default features.",5,N],[13,"AddFeature","","Compile the package with the specified feature.",5,N],[13,"RemoveFeature","","Remove the feature from the list of features to compile with.",5,N],[13,"SetDebugMode","","Set debug mode being enabled to the specified value.",5,N],[13,"SetTargetVersion","","Constrain the installed to the specified one.",5,N],[13,"RemoveTargetVersion","","Always install latest package version.",5,N],[4,"PackageFilterElement","","One of elements with which to filter required packages.",N,N],[13,"Toolchain","","Requires toolchain to be specified to the specified toolchain.",6,N],[5,"resolve_crates_file","","Follow `install.root` in the `config` file parallel to the specified crates file up to the final one.",N,[[["pathbuf"]],["pathbuf"]]],[5,"installed_main_repo_packages","","List the installed packages at the specified location that originate from the main `crates.io` registry.",N,[[["path"]],["vec",["mainrepopackage"]]]],[5,"installed_git_repo_packages","","List the installed packages at the specified location that originate from a  remote git repository.",N,[[["path"]],["vec",["gitrepopackage"]]]],[5,"intersect_packages","","Filter out the installed packages not specified to be updated.",N,N],[5,"crate_versions","","Parse the raw crate descriptor from the repository into a collection of `Semver`s.",N,[[["r"]],["vec",["semver"]]]],[5,"get_index_path","","Get the location of the latest registry index in the specified cargo directory.",N,[[["path"]],["pathbuf"]]],[5,"update_index","","Update the specified index repository from the specified URL.",N,[[["repository"],["str"],["w"]],["result",["string"]]]],[5,"find_package_data","","Find package data in the specified cargo index tree.",N,[[["str"],["tree"],["repository"]],["option",["vec"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["configoperation"]]],[11,"hash","","",5,N],[11,"eq","","",5,[[["self"],["configoperation"]],["bool"]]],[11,"ne","","",5,[[["self"],["configoperation"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["configoperation"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["configoperation"]],["bool"]]],[11,"le","","",5,[[["self"],["configoperation"]],["bool"]]],[11,"gt","","",5,[[["self"],["configoperation"]],["bool"]]],[11,"ge","","",5,[[["self"],["configoperation"]],["bool"]]],[11,"cmp","","",5,[[["self"],["configoperation"]],["ordering"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["packageconfig"]]],[11,"hash","","",2,N],[11,"eq","","",2,[[["self"],["packageconfig"]],["bool"]]],[11,"ne","","",2,[[["self"],["packageconfig"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["packageconfig"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["packageconfig"]],["bool"]]],[11,"le","","",2,[[["self"],["packageconfig"]],["bool"]]],[11,"gt","","",2,[[["self"],["packageconfig"]],["bool"]]],[11,"ge","","",2,[[["self"],["packageconfig"]],["bool"]]],[11,"cmp","","",2,[[["self"],["packageconfig"]],["ordering"]]],[11,"from","","Create a package config based on the default settings and modified according to the specified operations.",2,[[["o"]],["packageconfig"]]],[11,"cargo_args","","Generate cargo arguments from this configuration.",2,[[["self"]],["vec",["string"]]]],[11,"execute_operations","","Modify `self` according to the specified set of operations.",2,[[["self"],["o"]]]],[11,"read","","Read a configset from the specified file.",2,[[["path"]],["result",["btreemap","i32"]]]],[11,"write","","Save a configset to the specified file.",2,[[["btreemap"],["path"]],["result",["i32"]]]],[11,"default","","",2,[[],["packageconfig"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["mainrepopackage"]]],[11,"hash","","",3,N],[11,"eq","","",3,[[["self"],["mainrepopackage"]],["bool"]]],[11,"ne","","",3,[[["self"],["mainrepopackage"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["gitrepopackage"]]],[11,"hash","","",4,N],[11,"eq","","",4,[[["self"],["gitrepopackage"]],["bool"]]],[11,"ne","","",4,[[["self"],["gitrepopackage"]],["bool"]]],[11,"parse","","Try to decypher a package descriptor into a `MainRepoPackage`.",3,[[["str"]],["option",["mainrepopackage"]]]],[11,"pull_version","","Download the version list for this crate off the specified repository tree.",3,[[["self"],["tree"],["repository"]]]],[11,"needs_update","","Check whether this package needs to be installed",3,[[["self"],["option",["semverreq"]]],["bool"]]],[11,"update_to_version","","Get package version to update to, or `None` if the crate has no newest version (was yanked)",3,[[["self"]],["option",["semver"]]]],[11,"parse","","Try to decypher a package descriptor into a `GitRepoPackage`.",4,[[["str"]],["option",["gitrepopackage"]]]],[11,"pull_version","","Clone the repo and check what the latest commit's hash is.",4,[[["self"],["p"]]]],[11,"needs_update","","Check whether this package needs to be installed",4,[[["self"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["packagefilterelement"]]],[11,"hash","","",6,N],[11,"eq","","",6,[[["self"],["packagefilterelement"]],["bool"]]],[11,"ne","","",6,[[["self"],["packagefilterelement"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["packagefilterelement"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["packagefilterelement"]],["bool"]]],[11,"le","","",6,[[["self"],["packagefilterelement"]],["bool"]]],[11,"gt","","",6,[[["self"],["packagefilterelement"]],["bool"]]],[11,"ge","","",6,[[["self"],["packagefilterelement"]],["bool"]]],[11,"cmp","","",6,[[["self"],["packagefilterelement"]],["ordering"]]],[11,"parse","","Parse one filter specifier into up to one package filter",6,[[["str"]],["result",["packagefilterelement","string"]]]],[11,"matches","","Check if the specified package config matches this filter element.",6,[[["self"],["packageconfig"]],["bool"]]]],"paths":[[3,"ConfigOptions"],[3,"Options"],[3,"PackageConfig"],[3,"MainRepoPackage"],[3,"GitRepoPackage"],[4,"ConfigOperation"],[4,"PackageFilterElement"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["clap"]={"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",N,N],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",N,N],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",N,N],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",N,N],[3,"SubCommand","","The abstract representation of a command line subcommand.",N,N],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",N,N],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",N,N],[3,"Error","","Command Line Argument Parser Error",N,N],[12,"message","","Formatted error message",0,N],[12,"kind","","The type of error",0,N],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,N],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]",N,N],[13,"Required","","The argument must be used",1,N],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,N],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,N],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,N],[13,"Hidden","","The argument should not be shown in help text",1,N],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,N],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimiter",1,N],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,N],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,N],[13,"HidePossibleValues","","Hides the possible values from the help string",1,N],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,N],[13,"RequireEquals","","Require options use `--option=val` syntax",1,N],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,N],[13,"HideDefaultValue","","Hides the default value from the help string",1,N],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,N],[13,"HideEnvValues","","Hides ENV values in the help message",1,N],[13,"HiddenShortHelp","","The argument should not be shown in short help text",1,N],[13,"HiddenLongHelp","","The argument should not be shown in long help text",1,N],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",N,N],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,N],[13,"AllArgsOverrideSelf","","Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.",2,N],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,N],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,N],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where positionals can be used out of order.",2,N],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,N],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcommands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,N],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,N],[13,"ColoredHelp","","Uses colorized help messages.",2,N],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,N],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,N],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,N],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,N],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,N],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,N],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,N],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,N],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independent version strings from their parents.)",2,N],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,N],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,N],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,N],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,N],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,N],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,N],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,N],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,N],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,N],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,N],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,N],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,N],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,N],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,N],[4,"ErrorKind","","Command line argument parser kind of error",N,N],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,N],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,N],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,N],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'suggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,N],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,N],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,N],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,N],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,N],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,N],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,N],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,N],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,N],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,N],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,N],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,N],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,N],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,N],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,N],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,N],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,N],[4,"Shell","","Describes which shell to produce a completions file for",N,N],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,N],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,N],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,N],[13,"PowerShell","","Generates a completion file for PowerShell",4,N],[13,"Elvish","","Generates a completion file for Elvish",4,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["appsettings"]],["bool"]]],[11,"clone","","",2,[[["self"]],["appsettings"]]],[11,"from_str","","",2,[[["str"]],["result"]]],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,[[["s"]],["self"]]],[11,"get_name","","Get the name of the app",5,[[["self"]],["str"]]],[11,"get_bin_name","","Get the name of the binary",5,[[["self"]],["option",["str"]]]],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,[[["s"]],["self"]]],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,[[["self"],["s"]],["self"]]],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,[[["self"],["s"]],["self"]]],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,[[["self"],["s"]],["self"]]],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,[[["self"],["s"]],["self"]]],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,[[["self"],["s"]],["self"]]],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,[[["self"],["s"]],["self"]]],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,[[["self"],["s"]],["self"]]],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,[[["self"],["s"]],["self"]]],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,[[["self"],["s"]],["self"]]],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,[[["self"],["s"]],["self"]]],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,[[["self"],["s"]],["self"]]],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,[[["self"],["s"]],["self"]]],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,[[["self"],["s"]],["self"]]],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,[[["self"],["s"]],["self"]]],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,[[["self"],["s"]],["self"]]],[11,"template","","Sets the help template to be used, overriding the default format.",5,[[["self"],["s"]],["self"]]],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,[[["self"],["appsettings"]],["self"]]],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,N],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,[[["self"],["appsettings"]],["self"]]],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,N],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,[[["self"],["appsettings"]],["self"]]],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,N],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,[[["self"],["usize"]],["self"]]],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,[[["self"],["usize"]],["self"]]],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,[[["self"],["a"]],["self"]]],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",5,N],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,[[["self"],["str"]],["self"]]],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,[[["self"],["str"]],["self"]]],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,[[["self"],["s"]],["self"]]],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,N],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,[[["self"],["s"]],["self"]]],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,N],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,[[["self"],["arggroup"]],["self"]]],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,N],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,[[["self"],["app"]],["self"]]],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,[[["self"],["i"]],["self"]]],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,[[["self"],["usize"]],["self"]]],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,[[["self"]],["clapresult"]]],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,[[["self"]],["clapresult"]]],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,[[["self"],["w"]],["clapresult"]]],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,[[["self"],["w"]],["clapresult"]]],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,[[["self"],["w"]],["clapresult"]]],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,[[["self"],["w"]],["clapresult"]]],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,[[["self"],["s"],["shell"],["t"]]]],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,[[["self"],["s"],["shell"],["w"]]]],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,[[["self"]],["argmatches"]]],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,[[["self"]],["clapresult",["argmatches"]]]],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,[[["self"],["i"]],["argmatches"]]],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,[[["self"],["i"]],["clapresult",["argmatches"]]]],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,[[["self"],["i"]],["clapresult",["argmatches"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",6,[[],["arg"]]],[11,"clone","","",6,[[["self"]],["arg"]]],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,[[["str"]],["self"]]],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,[[["str"]],["self"]]],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,[[["self"],["s"]],["self"]]],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,[[["self"],["str"]],["self"]]],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,[[["self"],["s"]],["self"]]],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,N],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,[[["self"],["s"]],["self"]]],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,N],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,[[["self"],["str"]],["self"]]],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,[[["self"],["str"]],["self"]]],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,[[["self"],["bool"]],["self"]]],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,[[["self"],["bool"]],["self"]]],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,[[["self"],["bool"]],["self"]]],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,[[["self"],["bool"]],["self"]]],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,[[["self"],["str"]],["self"]]],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,N],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,N],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,[[["self"],["str"]],["self"]]],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,N],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,[[["self"],["str"]],["self"]]],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,N],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,[[["self"],["str"]],["self"]]],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,[[["self"],["str"],["str"]],["self"]]],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,N],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,[[["self"],["str"],["str"]],["self"]]],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,N],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,N],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,[[["self"],["bool"]],["self"]]],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,[[["self"],["bool"]],["self"]]],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,[[["self"],["bool"]],["self"]]],[11,"index","","Specifies the index of a positional argument starting at 1.",6,[[["self"],["u64"]],["self"]]],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,[[["self"],["bool"]],["self"]]],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,[[["self"],["str"]],["self"]]],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,[[["self"],["bool"]],["self"]]],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,[[["self"],["bool"]],["self"]]],[11,"hidden","","Hides an argument from help message output.",6,[[["self"],["bool"]],["self"]]],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,N],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,[[["self"],["str"]],["self"]]],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,[[["self"],["bool"]],["self"]]],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,[[["self"],["str"]],["self"]]],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,N],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,[[["self"],["u64"]],["self"]]],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,[[["self"],["f"]],["self"]]],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,[[["self"],["f"]],["self"]]],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,[[["self"],["u64"]],["self"]]],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,[[["self"],["u64"]],["self"]]],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,[[["self"],["bool"]],["self"]]],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,[[["self"],["bool"]],["self"]]],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,[[["self"],["str"]],["self"]]],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,N],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,[[["self"],["str"]],["self"]]],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,[[["self"],["str"]],["self"]]],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,[[["self"],["osstr"]],["self"]]],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,[[["self"],["str"],["option",["str"]],["str"]],["self"]]],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,[[["self"],["str"],["option",["osstr"]],["osstr"]],["self"]]],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,N],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,N],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,[[["self"],["str"]],["self"]]],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,[[["self"],["osstr"]],["self"]]],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,[[["self"],["bool"]],["self"]]],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,[[["self"],["bool"]],["self"]]],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,[[["self"],["usize"]],["self"]]],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",6,[[["self"],["bool"]],["self"]]],[11,"hidden_short_help","","Hides an argument from short help message output.",6,[[["self"],["bool"]],["self"]]],[11,"hidden_long_help","","Hides an argument from long help message output.",6,[[["self"],["bool"]],["self"]]],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["bool"]]],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["self"]]],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["self"]]],[11,"from","","",6,[[["arg"]],["self"]]],[11,"eq","","",6,[[["self"],["arg"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["argmatches"]]],[11,"default","","",7,[[],["self"]]],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,[[["self"],["s"]],["option",["str"]]]],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,[[["self"],["s"]],["option",["cow"]]]],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,[[["self"],["s"]],["option",["osstr"]]]],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,[[["self"],["s"]],["option",["values"]]]],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,[[["self"],["s"]],["option",["vec"]]]],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,[[["self"],["s"]],["option",["osvalues"]]]],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,[[["self"],["s"]],["bool"]]],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,[[["self"],["s"]],["u64"]]],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,[[["self"],["s"]],["option",["usize"]]]],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,[[["self"],["s"]],["option",["indices"]]]],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,[[["self"],["s"]],["option",["argmatches"]]]],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,[[["self"]],["option",["str"]]]],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,N],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,[[["self"]],["str"]]],[11,"clone","","",8,[[["self"]],["values"]]],[11,"next","","",8,[[["self"]],["option",["str"]]]],[11,"size_hint","","",8,N],[11,"next_back","","",8,[[["self"]],["option",["str"]]]],[11,"default","","",8,[[],["self"]]],[11,"clone","","",9,[[["self"]],["osvalues"]]],[11,"next","","",9,[[["self"]],["option",["osstr"]]]],[11,"size_hint","","",9,N],[11,"next_back","","",9,[[["self"]],["option",["osstr"]]]],[11,"default","","",9,[[],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["subcommand"]]],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,[[["str"]],["app"]]],[11,"default","","",11,[[],["arggroup"]]],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,[[["str"]],["self"]]],[11,"arg","","Adds an [argument] to this group by name",11,[[["self"],["str"]],["self"]]],[11,"args","","Adds multiple [arguments] to this group by name",11,N],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,[[["self"],["bool"]],["self"]]],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,[[["self"],["bool"]],["self"]]],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,[[["self"],["str"]],["self"]]],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,N],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,[[["self"],["str"]],["self"]]],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,[[["arggroup"]],["self"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["argsettings"]],["bool"]]],[11,"clone","","",1,[[["self"]],["argsettings"]]],[11,"from_str","","",1,[[["str"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["errorkind"]]],[11,"eq","","",3,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"use_stderr","","Should the message be written to `stdout` or not",0,[[["self"]],["bool"]]],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,N],[11,"with_description","","Create an error with a custom description.",0,[[["str"],["errorkind"]],["self"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["shell"]]],[11,"variants","","A list of possible variants in `&'static str` form",4,N],[11,"from_str","","",4,[[["str"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[6,"Result","","Short hand for [`Result`] type",N,N],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",N,N],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",N,N],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",N,N],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",N,N],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",N,N],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",N,N],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",N,N],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",N,N],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",N,N],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",N,N],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",N,N],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",N,N]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["curl_sys"]={"doc":"","items":[[3,"fd_set","curl_sys","",N,N],[3,"curl_fileinfo","","",N,N],[12,"filename","","",0,N],[12,"filetype","","",0,N],[12,"time","","",0,N],[12,"perm","","",0,N],[12,"uid","","",0,N],[12,"gid","","",0,N],[12,"size","","",0,N],[12,"hardlinks","","",0,N],[12,"strings_time","","",0,N],[12,"strings_perm","","",0,N],[12,"strings_user","","",0,N],[12,"strings_group","","",0,N],[12,"strings_target","","",0,N],[12,"flags","","",0,N],[12,"b_data","","",0,N],[12,"b_size","","",0,N],[12,"b_used","","",0,N],[3,"curl_forms","","",N,N],[12,"option","","",1,N],[12,"value","","",1,N],[3,"curl_slist","","",N,N],[12,"data","","",2,N],[12,"next","","",2,N],[3,"curl_certinfo","","",N,N],[12,"num_of_certs","","",3,N],[12,"certinfo","","",3,N],[3,"curl_version_info_data","","",N,N],[12,"age","","",4,N],[12,"version","","",4,N],[12,"version_num","","",4,N],[12,"host","","",4,N],[12,"features","","",4,N],[12,"ssl_version","","",4,N],[12,"ssl_version_num","","",4,N],[12,"libz_version","","",4,N],[12,"protocols","","",4,N],[12,"ares","","",4,N],[12,"ares_num","","",4,N],[12,"libidn","","",4,N],[12,"iconv_ver_num","","",4,N],[12,"libssh_version","","",4,N],[12,"brotli_ver_num","","",4,N],[12,"brotli_version","","",4,N],[3,"CURLMsg","","",N,N],[12,"msg","","",5,N],[12,"easy_handle","","",5,N],[12,"data","","",5,N],[3,"curl_waitfd","","",N,N],[12,"fd","","",6,N],[12,"events","","",6,N],[12,"revents","","",6,N],[3,"curl_sockaddr","","",N,N],[12,"family","","",7,N],[12,"socktype","","",7,N],[12,"protocol","","",7,N],[12,"addrlen","","",7,N],[12,"addr","","",7,N],[4,"CURL","","",N,N],[4,"curl_httppost","","",N,N],[4,"CURLSH","","",N,N],[4,"CURLM","","",N,N],[5,"curl_formadd","","",N,N],[5,"curl_formget","","",N,N],[5,"curl_formfree","","",N,N],[5,"curl_version","","",N,N],[5,"curl_easy_escape","","",N,N],[5,"curl_easy_unescape","","",N,N],[5,"curl_free","","",N,N],[5,"curl_global_init","","",N,N],[5,"curl_global_init_mem","","",N,N],[5,"curl_global_cleanup","","",N,N],[5,"curl_slist_append","","",N,N],[5,"curl_slist_free_all","","",N,N],[5,"curl_getdate","","",N,N],[5,"curl_share_init","","",N,N],[5,"curl_share_setopt","","",N,N],[5,"curl_share_cleanup","","",N,N],[5,"curl_version_info","","",N,N],[5,"curl_easy_strerror","","",N,N],[5,"curl_share_strerror","","",N,N],[5,"curl_easy_pause","","",N,N],[5,"curl_easy_init","","",N,N],[5,"curl_easy_setopt","","",N,N],[5,"curl_easy_perform","","",N,N],[5,"curl_easy_cleanup","","",N,N],[5,"curl_easy_getinfo","","",N,N],[5,"curl_easy_duphandle","","",N,N],[5,"curl_easy_reset","","",N,N],[5,"curl_easy_recv","","",N,N],[5,"curl_easy_send","","",N,N],[5,"curl_multi_init","","",N,N],[5,"curl_multi_add_handle","","",N,N],[5,"curl_multi_remove_handle","","",N,N],[5,"curl_multi_fdset","","",N,N],[5,"curl_multi_wait","","",N,N],[5,"curl_multi_perform","","",N,N],[5,"curl_multi_cleanup","","",N,N],[5,"curl_multi_info_read","","",N,N],[5,"curl_multi_strerror","","",N,N],[5,"curl_multi_socket","","",N,N],[5,"curl_multi_socket_action","","",N,N],[5,"curl_multi_socket_all","","",N,N],[5,"curl_multi_timeout","","",N,N],[5,"curl_multi_setopt","","",N,N],[5,"curl_multi_assign","","",N,N],[6,"CURLINFO","","",N,N],[6,"CURLoption","","",N,N],[6,"CURLcode","","",N,N],[6,"CURLversion","","",N,N],[6,"curl_off_t","","",N,N],[6,"curl_socket_t","","",N,N],[6,"curl_progress_callback","","",N,N],[6,"curl_write_callback","","",N,N],[6,"curlfiletype","","",N,N],[6,"curl_chunk_bgn_callback","","",N,N],[6,"curl_chunk_end_callback","","",N,N],[6,"curl_fnmatch_callback","","",N,N],[6,"curl_seek_callback","","",N,N],[6,"curl_read_callback","","",N,N],[6,"curlioerr","","",N,N],[6,"curliocmd","","",N,N],[6,"curl_ioctl_callback","","",N,N],[6,"curl_malloc_callback","","",N,N],[6,"curl_free_callback","","",N,N],[6,"curl_realloc_callback","","",N,N],[6,"curl_strdup_callback","","",N,N],[6,"curl_calloc_callback","","",N,N],[6,"curl_infotype","","",N,N],[6,"curl_debug_callback","","",N,N],[6,"curl_conv_callback","","",N,N],[6,"curl_ssl_ctx_callback","","",N,N],[6,"curl_proxytype","","",N,N],[6,"curl_usessl","","",N,N],[6,"curl_TimeCond","","",N,N],[6,"CURLformoption","","",N,N],[6,"CURLFORMcode","","",N,N],[6,"curl_formget_callback","","",N,N],[6,"curl_closepolicy","","",N,N],[6,"curl_lock_data","","",N,N],[6,"curl_lock_access","","",N,N],[6,"curl_lock_function","","",N,N],[6,"curl_unlock_function","","",N,N],[6,"CURLSHcode","","",N,N],[6,"CURLSHoption","","",N,N],[6,"CURLMcode","","",N,N],[6,"CURLMSG","","",N,N],[6,"curl_socket_callback","","",N,N],[6,"curl_multi_timer_callback","","",N,N],[6,"CURLMoption","","",N,N],[6,"curl_opensocket_callback","","",N,N],[6,"curlsocktype","","",N,N],[17,"CURL_SOCKET_BAD","","",N,N],[17,"CURL_WRITEFUNC_PAUSE","","",N,N],[17,"CURLFILETYPE_FILE","","",N,N],[17,"CURLFILETYPE_DIRECTORY","","",N,N],[17,"CURLFILETYPE_SYMLINK","","",N,N],[17,"CURLFILETYPE_DEVICE_BLOCK","","",N,N],[17,"CURLFILETYPE_DEVICE_CHAR","","",N,N],[17,"CURLFILETYPE_NAMEDPIPE","","",N,N],[17,"CURLFILETYPE_SOCKET","","",N,N],[17,"CURLFILETYPE_DOOR","","",N,N],[17,"CURLFILETYPE_UNKNOWN","","",N,N],[17,"CURLFINFOFLAG_KNOWN_FILENAME","","",N,N],[17,"CURLFINFOFLAG_KNOWN_FILETYPE","","",N,N],[17,"CURLFINFOFLAG_KNOWN_TIME","","",N,N],[17,"CURLFINFOFLAG_KNOWN_PERM","","",N,N],[17,"CURLFINFOFLAG_KNOWN_UID","","",N,N],[17,"CURLFINFOFLAG_KNOWN_GID","","",N,N],[17,"CURLFINFOFLAG_KNOWN_SIZE","","",N,N],[17,"CURLFINFOFLAG_KNOWN_HLINKCOUNT","","",N,N],[17,"CURL_CHUNK_BGN_FUNC_OK","","",N,N],[17,"CURL_CHUNK_BGN_FUNC_FAIL","","",N,N],[17,"CURL_CHUNK_BGN_FUNC_SKIP","","",N,N],[17,"CURL_CHUNK_END_FUNC_OK","","",N,N],[17,"CURL_CHUNK_END_FUNC_FAIL","","",N,N],[17,"CURL_FNMATCHFUNC_MATCH","","",N,N],[17,"CURL_FNMATCHFUNC_NOMATCH","","",N,N],[17,"CURL_FNMATCHFUNC_FAIL","","",N,N],[17,"CURL_SEEKFUNC_OK","","",N,N],[17,"CURL_SEEKFUNC_FAIL","","",N,N],[17,"CURL_SEEKFUNC_CANTSEEK","","",N,N],[17,"CURL_READFUNC_ABORT","","",N,N],[17,"CURL_READFUNC_PAUSE","","",N,N],[17,"CURLIOE_OK","","",N,N],[17,"CURLIOE_UNKNOWNCMD","","",N,N],[17,"CURLIOE_FAILRESTART","","",N,N],[17,"CURLIOCMD_NOP","","",N,N],[17,"CURLIOCMD_RESTARTREAD","","",N,N],[17,"CURLINFO_TEXT","","",N,N],[17,"CURLINFO_HEADER_IN","","",N,N],[17,"CURLINFO_HEADER_OUT","","",N,N],[17,"CURLINFO_DATA_IN","","",N,N],[17,"CURLINFO_DATA_OUT","","",N,N],[17,"CURLINFO_SSL_DATA_IN","","",N,N],[17,"CURLINFO_SSL_DATA_OUT","","",N,N],[17,"CURLE_OK","","",N,N],[17,"CURLE_UNSUPPORTED_PROTOCOL","","",N,N],[17,"CURLE_FAILED_INIT","","",N,N],[17,"CURLE_URL_MALFORMAT","","",N,N],[17,"CURLE_COULDNT_RESOLVE_PROXY","","",N,N],[17,"CURLE_COULDNT_RESOLVE_HOST","","",N,N],[17,"CURLE_COULDNT_CONNECT","","",N,N],[17,"CURLE_FTP_WEIRD_SERVER_REPLY","","",N,N],[17,"CURLE_REMOTE_ACCESS_DENIED","","",N,N],[17,"CURLE_FTP_WEIRD_PASS_REPLY","","",N,N],[17,"CURLE_FTP_WEIRD_PASV_REPLY","","",N,N],[17,"CURLE_FTP_WEIRD_227_FORMAT","","",N,N],[17,"CURLE_FTP_CANT_GET_HOST","","",N,N],[17,"CURLE_OBSOLETE16","","",N,N],[17,"CURLE_FTP_COULDNT_SET_TYPE","","",N,N],[17,"CURLE_PARTIAL_FILE","","",N,N],[17,"CURLE_FTP_COULDNT_RETR_FILE","","",N,N],[17,"CURLE_OBSOLETE20","","",N,N],[17,"CURLE_QUOTE_ERROR","","",N,N],[17,"CURLE_HTTP_RETURNED_ERROR","","",N,N],[17,"CURLE_WRITE_ERROR","","",N,N],[17,"CURLE_OBSOLETE24","","",N,N],[17,"CURLE_UPLOAD_FAILED","","",N,N],[17,"CURLE_READ_ERROR","","",N,N],[17,"CURLE_OUT_OF_MEMORY","","",N,N],[17,"CURLE_OPERATION_TIMEDOUT","","",N,N],[17,"CURLE_OBSOLETE29","","",N,N],[17,"CURLE_FTP_PORT_FAILED","","",N,N],[17,"CURLE_FTP_COULDNT_USE_REST","","",N,N],[17,"CURLE_OBSOLETE32","","",N,N],[17,"CURLE_RANGE_ERROR","","",N,N],[17,"CURLE_HTTP_POST_ERROR","","",N,N],[17,"CURLE_SSL_CONNECT_ERROR","","",N,N],[17,"CURLE_BAD_DOWNLOAD_RESUME","","",N,N],[17,"CURLE_FILE_COULDNT_READ_FILE","","",N,N],[17,"CURLE_LDAP_CANNOT_BIND","","",N,N],[17,"CURLE_LDAP_SEARCH_FAILED","","",N,N],[17,"CURLE_OBSOLETE40","","",N,N],[17,"CURLE_FUNCTION_NOT_FOUND","","",N,N],[17,"CURLE_ABORTED_BY_CALLBACK","","",N,N],[17,"CURLE_BAD_FUNCTION_ARGUMENT","","",N,N],[17,"CURLE_OBSOLETE44","","",N,N],[17,"CURLE_INTERFACE_FAILED","","",N,N],[17,"CURLE_OBSOLETE46","","",N,N],[17,"CURLE_TOO_MANY_REDIRECTS","","",N,N],[17,"CURLE_UNKNOWN_OPTION","","",N,N],[17,"CURLE_TELNET_OPTION_SYNTAX","","",N,N],[17,"CURLE_OBSOLETE50","","",N,N],[17,"CURLE_PEER_FAILED_VERIFICATION","","",N,N],[17,"CURLE_GOT_NOTHING","","",N,N],[17,"CURLE_SSL_ENGINE_NOTFOUND","","",N,N],[17,"CURLE_SSL_ENGINE_SETFAILED","","",N,N],[17,"CURLE_SEND_ERROR","","",N,N],[17,"CURLE_RECV_ERROR","","",N,N],[17,"CURLE_OBSOLETE57","","",N,N],[17,"CURLE_SSL_CERTPROBLEM","","",N,N],[17,"CURLE_SSL_CIPHER","","",N,N],[17,"CURLE_SSL_CACERT","","",N,N],[17,"CURLE_BAD_CONTENT_ENCODING","","",N,N],[17,"CURLE_LDAP_INVALID_URL","","",N,N],[17,"CURLE_FILESIZE_EXCEEDED","","",N,N],[17,"CURLE_USE_SSL_FAILED","","",N,N],[17,"CURLE_SEND_FAIL_REWIND","","",N,N],[17,"CURLE_SSL_ENGINE_INITFAILED","","",N,N],[17,"CURLE_LOGIN_DENIED","","",N,N],[17,"CURLE_TFTP_NOTFOUND","","",N,N],[17,"CURLE_TFTP_PERM","","",N,N],[17,"CURLE_REMOTE_DISK_FULL","","",N,N],[17,"CURLE_TFTP_ILLEGAL","","",N,N],[17,"CURLE_TFTP_UNKNOWNID","","",N,N],[17,"CURLE_REMOTE_FILE_EXISTS","","",N,N],[17,"CURLE_TFTP_NOSUCHUSER","","",N,N],[17,"CURLE_CONV_FAILED","","",N,N],[17,"CURLE_CONV_REQD","","",N,N],[17,"CURLE_SSL_CACERT_BADFILE","","",N,N],[17,"CURLE_REMOTE_FILE_NOT_FOUND","","",N,N],[17,"CURLE_SSH","","",N,N],[17,"CURLE_SSL_SHUTDOWN_FAILED","","",N,N],[17,"CURLE_AGAIN","","",N,N],[17,"CURLE_SSL_CRL_BADFILE","","",N,N],[17,"CURLE_SSL_ISSUER_ERROR","","",N,N],[17,"CURLE_FTP_PRET_FAILED","","",N,N],[17,"CURLE_RTSP_CSEQ_ERROR","","",N,N],[17,"CURLE_RTSP_SESSION_ERROR","","",N,N],[17,"CURLE_FTP_BAD_FILE_LIST","","",N,N],[17,"CURLE_CHUNK_FAILED","","",N,N],[17,"CURLPROXY_HTTP","","",N,N],[17,"CURLPROXY_HTTP_1_0","","",N,N],[17,"CURLPROXY_SOCKS4","","",N,N],[17,"CURLPROXY_SOCKS5","","",N,N],[17,"CURLPROXY_SOCKS4A","","",N,N],[17,"CURLPROXY_SOCKS5_HOSTNAME","","",N,N],[17,"CURLAUTH_NONE","","",N,N],[17,"CURLAUTH_BASIC","","",N,N],[17,"CURLAUTH_DIGEST","","",N,N],[17,"CURLAUTH_GSSNEGOTIATE","","",N,N],[17,"CURLAUTH_NTLM","","",N,N],[17,"CURLAUTH_DIGEST_IE","","",N,N],[17,"CURLAUTH_NTLM_WB","","",N,N],[17,"CURLAUTH_ANY","","",N,N],[17,"CURLAUTH_ANYSAFE","","",N,N],[17,"CURLGSSAPI_DELEGATION_NONE","","",N,N],[17,"CURLGSSAPI_DELEGATION_POLICY_FLAG","","",N,N],[17,"CURLGSSAPI_DELEGATION_FLAG","","",N,N],[17,"CURL_NETRC_IGNORED","","",N,N],[17,"CURL_NETRC_OPTIONAL","","",N,N],[17,"CURL_NETRC_REQUIRED","","",N,N],[17,"CURLUSESSL_NONE","","",N,N],[17,"CURLUSESSL_TRY","","",N,N],[17,"CURLUSESSL_CONTROL","","",N,N],[17,"CURLUSESSL_ALL","","",N,N],[17,"CURLPROTO_HTTP","","",N,N],[17,"CURLPROTO_HTTPS","","",N,N],[17,"CURLPROTO_FILE","","",N,N],[17,"CURLOPTTYPE_LONG","","",N,N],[17,"CURLOPTTYPE_OBJECTPOINT","","",N,N],[17,"CURLOPTTYPE_FUNCTIONPOINT","","",N,N],[17,"CURLOPTTYPE_OFF_T","","",N,N],[17,"CURLOPT_FILE","","",N,N],[17,"CURLOPT_URL","","",N,N],[17,"CURLOPT_PORT","","",N,N],[17,"CURLOPT_PROXY","","",N,N],[17,"CURLOPT_USERPWD","","",N,N],[17,"CURLOPT_PROXYUSERPWD","","",N,N],[17,"CURLOPT_RANGE","","",N,N],[17,"CURLOPT_INFILE","","",N,N],[17,"CURLOPT_ERRORBUFFER","","",N,N],[17,"CURLOPT_WRITEFUNCTION","","",N,N],[17,"CURLOPT_READFUNCTION","","",N,N],[17,"CURLOPT_TIMEOUT","","",N,N],[17,"CURLOPT_INFILESIZE","","",N,N],[17,"CURLOPT_POSTFIELDS","","",N,N],[17,"CURLOPT_REFERER","","",N,N],[17,"CURLOPT_FTPPORT","","",N,N],[17,"CURLOPT_USERAGENT","","",N,N],[17,"CURLOPT_LOW_SPEED_LIMIT","","",N,N],[17,"CURLOPT_LOW_SPEED_TIME","","",N,N],[17,"CURLOPT_RESUME_FROM","","",N,N],[17,"CURLOPT_COOKIE","","",N,N],[17,"CURLOPT_HTTPHEADER","","",N,N],[17,"CURLOPT_HTTPPOST","","",N,N],[17,"CURLOPT_SSLCERT","","",N,N],[17,"CURLOPT_KEYPASSWD","","",N,N],[17,"CURLOPT_CRLF","","",N,N],[17,"CURLOPT_QUOTE","","",N,N],[17,"CURLOPT_WRITEHEADER","","",N,N],[17,"CURLOPT_COOKIEFILE","","",N,N],[17,"CURLOPT_SSLVERSION","","",N,N],[17,"CURLOPT_TIMECONDITION","","",N,N],[17,"CURLOPT_TIMEVALUE","","",N,N],[17,"CURLOPT_CUSTOMREQUEST","","",N,N],[17,"CURLOPT_STDERR","","",N,N],[17,"CURLOPT_POSTQUOTE","","",N,N],[17,"CURLOPT_WRITEINFO","","",N,N],[17,"CURLOPT_VERBOSE","","",N,N],[17,"CURLOPT_HEADER","","",N,N],[17,"CURLOPT_NOPROGRESS","","",N,N],[17,"CURLOPT_NOBODY","","",N,N],[17,"CURLOPT_FAILONERROR","","",N,N],[17,"CURLOPT_UPLOAD","","",N,N],[17,"CURLOPT_POST","","",N,N],[17,"CURLOPT_DIRLISTONLY","","",N,N],[17,"CURLOPT_APPEND","","",N,N],[17,"CURLOPT_NETRC","","",N,N],[17,"CURLOPT_FOLLOWLOCATION","","",N,N],[17,"CURLOPT_TRANSFERTEXT","","",N,N],[17,"CURLOPT_PUT","","",N,N],[17,"CURLOPT_PROGRESSFUNCTION","","",N,N],[17,"CURLOPT_PROGRESSDATA","","",N,N],[17,"CURLOPT_AUTOREFERER","","",N,N],[17,"CURLOPT_PROXYPORT","","",N,N],[17,"CURLOPT_POSTFIELDSIZE","","",N,N],[17,"CURLOPT_HTTPPROXYTUNNEL","","",N,N],[17,"CURLOPT_INTERFACE","","",N,N],[17,"CURLOPT_KRBLEVEL","","",N,N],[17,"CURLOPT_SSL_VERIFYPEER","","",N,N],[17,"CURLOPT_CAINFO","","",N,N],[17,"CURLOPT_MAXREDIRS","","",N,N],[17,"CURLOPT_FILETIME","","",N,N],[17,"CURLOPT_TELNETOPTIONS","","",N,N],[17,"CURLOPT_MAXCONNECTS","","",N,N],[17,"CURLOPT_CLOSEPOLICY","","",N,N],[17,"CURLOPT_FRESH_CONNECT","","",N,N],[17,"CURLOPT_FORBID_REUSE","","",N,N],[17,"CURLOPT_RANDOM_FILE","","",N,N],[17,"CURLOPT_EGDSOCKET","","",N,N],[17,"CURLOPT_CONNECTTIMEOUT","","",N,N],[17,"CURLOPT_HEADERFUNCTION","","",N,N],[17,"CURLOPT_HTTPGET","","",N,N],[17,"CURLOPT_SSL_VERIFYHOST","","",N,N],[17,"CURLOPT_COOKIEJAR","","",N,N],[17,"CURLOPT_SSL_CIPHER_LIST","","",N,N],[17,"CURLOPT_HTTP_VERSION","","",N,N],[17,"CURLOPT_FTP_USE_EPSV","","",N,N],[17,"CURLOPT_SSLCERTTYPE","","",N,N],[17,"CURLOPT_SSLKEY","","",N,N],[17,"CURLOPT_SSLKEYTYPE","","",N,N],[17,"CURLOPT_SSLENGINE","","",N,N],[17,"CURLOPT_SSLENGINE_DEFAULT","","",N,N],[17,"CURLOPT_DNS_USE_GLOBAL_CACHE","","",N,N],[17,"CURLOPT_DNS_CACHE_TIMEOUT","","",N,N],[17,"CURLOPT_PREQUOTE","","",N,N],[17,"CURLOPT_DEBUGFUNCTION","","",N,N],[17,"CURLOPT_DEBUGDATA","","",N,N],[17,"CURLOPT_COOKIESESSION","","",N,N],[17,"CURLOPT_CAPATH","","",N,N],[17,"CURLOPT_BUFFERSIZE","","",N,N],[17,"CURLOPT_NOSIGNAL","","",N,N],[17,"CURLOPT_SHARE","","",N,N],[17,"CURLOPT_PROXYTYPE","","",N,N],[17,"CURLOPT_ACCEPT_ENCODING","","",N,N],[17,"CURLOPT_PRIVATE","","",N,N],[17,"CURLOPT_HTTP200ALIASES","","",N,N],[17,"CURLOPT_UNRESTRICTED_AUTH","","",N,N],[17,"CURLOPT_FTP_USE_EPRT","","",N,N],[17,"CURLOPT_HTTPAUTH","","",N,N],[17,"CURLOPT_SSL_CTX_FUNCTION","","",N,N],[17,"CURLOPT_SSL_CTX_DATA","","",N,N],[17,"CURLOPT_FTP_CREATE_MISSING_DIRS","","",N,N],[17,"CURLOPT_PROXYAUTH","","",N,N],[17,"CURLOPT_FTP_RESPONSE_TIMEOUT","","",N,N],[17,"CURLOPT_IPRESOLVE","","",N,N],[17,"CURLOPT_MAXFILESIZE","","",N,N],[17,"CURLOPT_INFILESIZE_LARGE","","",N,N],[17,"CURLOPT_RESUME_FROM_LARGE","","",N,N],[17,"CURLOPT_MAXFILESIZE_LARGE","","",N,N],[17,"CURLOPT_NETRC_FILE","","",N,N],[17,"CURLOPT_USE_SSL","","",N,N],[17,"CURLOPT_POSTFIELDSIZE_LARGE","","",N,N],[17,"CURLOPT_TCP_NODELAY","","",N,N],[17,"CURLOPT_FTPSSLAUTH","","",N,N],[17,"CURLOPT_IOCTLFUNCTION","","",N,N],[17,"CURLOPT_IOCTLDATA","","",N,N],[17,"CURLOPT_FTP_ACCOUNT","","",N,N],[17,"CURLOPT_COOKIELIST","","",N,N],[17,"CURLOPT_IGNORE_CONTENT_LENGTH","","",N,N],[17,"CURLOPT_FTP_SKIP_PASV_IP","","",N,N],[17,"CURLOPT_FTP_FILEMETHOD","","",N,N],[17,"CURLOPT_LOCALPORT","","",N,N],[17,"CURLOPT_LOCALPORTRANGE","","",N,N],[17,"CURLOPT_CONNECT_ONLY","","",N,N],[17,"CURLOPT_CONV_FROM_NETWORK_FUNCTION","","",N,N],[17,"CURLOPT_CONV_TO_NETWORK_FUNCTION","","",N,N],[17,"CURLOPT_CONV_FROM_UTF8_FUNCTION","","",N,N],[17,"CURLOPT_MAX_SEND_SPEED_LARGE","","",N,N],[17,"CURLOPT_MAX_RECV_SPEED_LARGE","","",N,N],[17,"CURLOPT_FTP_ALTERNATIVE_TO_USER","","",N,N],[17,"CURLOPT_SOCKOPTFUNCTION","","",N,N],[17,"CURLOPT_SOCKOPTDATA","","",N,N],[17,"CURLOPT_SSL_SESSIONID_CACHE","","",N,N],[17,"CURLOPT_SSH_AUTH_TYPES","","",N,N],[17,"CURLOPT_SSH_PUBLIC_KEYFILE","","",N,N],[17,"CURLOPT_SSH_PRIVATE_KEYFILE","","",N,N],[17,"CURLOPT_FTP_SSL_CCC","","",N,N],[17,"CURLOPT_TIMEOUT_MS","","",N,N],[17,"CURLOPT_CONNECTTIMEOUT_MS","","",N,N],[17,"CURLOPT_HTTP_TRANSFER_DECODING","","",N,N],[17,"CURLOPT_HTTP_CONTENT_DECODING","","",N,N],[17,"CURLOPT_NEW_FILE_PERMS","","",N,N],[17,"CURLOPT_NEW_DIRECTORY_PERMS","","",N,N],[17,"CURLOPT_POSTREDIR","","",N,N],[17,"CURLOPT_SSH_HOST_PUBLIC_KEY_MD5","","",N,N],[17,"CURLOPT_OPENSOCKETFUNCTION","","",N,N],[17,"CURLOPT_OPENSOCKETDATA","","",N,N],[17,"CURLOPT_COPYPOSTFIELDS","","",N,N],[17,"CURLOPT_PROXY_TRANSFER_MODE","","",N,N],[17,"CURLOPT_SEEKFUNCTION","","",N,N],[17,"CURLOPT_SEEKDATA","","",N,N],[17,"CURLOPT_CRLFILE","","",N,N],[17,"CURLOPT_ISSUERCERT","","",N,N],[17,"CURLOPT_ADDRESS_SCOPE","","",N,N],[17,"CURLOPT_CERTINFO","","",N,N],[17,"CURLOPT_USERNAME","","",N,N],[17,"CURLOPT_PASSWORD","","",N,N],[17,"CURLOPT_PROXYUSERNAME","","",N,N],[17,"CURLOPT_PROXYPASSWORD","","",N,N],[17,"CURLOPT_NOPROXY","","",N,N],[17,"CURLOPT_TFTP_BLKSIZE","","",N,N],[17,"CURLOPT_SOCKS5_GSSAPI_SERVICE","","",N,N],[17,"CURLOPT_SOCKS5_GSSAPI_NEC","","",N,N],[17,"CURLOPT_PROTOCOLS","","",N,N],[17,"CURLOPT_REDIR_PROTOCOLS","","",N,N],[17,"CURLOPT_SSH_KNOWNHOSTS","","",N,N],[17,"CURLOPT_SSH_KEYFUNCTION","","",N,N],[17,"CURLOPT_SSH_KEYDATA","","",N,N],[17,"CURLOPT_MAIL_FROM","","",N,N],[17,"CURLOPT_MAIL_RCPT","","",N,N],[17,"CURLOPT_FTP_USE_PRET","","",N,N],[17,"CURLOPT_RTSP_REQUEST","","",N,N],[17,"CURLOPT_RTSP_SESSION_ID","","",N,N],[17,"CURLOPT_RTSP_STREAM_URI","","",N,N],[17,"CURLOPT_RTSP_TRANSPORT","","",N,N],[17,"CURLOPT_RTSP_CLIENT_CSEQ","","",N,N],[17,"CURLOPT_RTSP_SERVER_CSEQ","","",N,N],[17,"CURLOPT_INTERLEAVEDATA","","",N,N],[17,"CURLOPT_INTERLEAVEFUNCTION","","",N,N],[17,"CURLOPT_WILDCARDMATCH","","",N,N],[17,"CURLOPT_CHUNK_BGN_FUNCTION","","",N,N],[17,"CURLOPT_CHUNK_END_FUNCTION","","",N,N],[17,"CURLOPT_FNMATCH_FUNCTION","","",N,N],[17,"CURLOPT_CHUNK_DATA","","",N,N],[17,"CURLOPT_FNMATCH_DATA","","",N,N],[17,"CURLOPT_RESOLVE","","",N,N],[17,"CURLOPT_TLSAUTH_USERNAME","","",N,N],[17,"CURLOPT_TLSAUTH_PASSWORD","","",N,N],[17,"CURLOPT_TLSAUTH_TYPE","","",N,N],[17,"CURLOPT_TRANSFER_ENCODING","","",N,N],[17,"CURLOPT_CLOSESOCKETFUNCTION","","",N,N],[17,"CURLOPT_CLOSESOCKETDATA","","",N,N],[17,"CURLOPT_GSSAPI_DELEGATION","","",N,N],[17,"CURLOPT_TCP_KEEPALIVE","","",N,N],[17,"CURLOPT_TCP_KEEPIDLE","","",N,N],[17,"CURLOPT_TCP_KEEPINTVL","","",N,N],[17,"CURLOPT_SSL_OPTIONS","","",N,N],[17,"CURLOPT_UNIX_SOCKET_PATH","","",N,N],[17,"CURLOPT_PIPEWAIT","","",N,N],[17,"CURL_IPRESOLVE_WHATEVER","","",N,N],[17,"CURL_IPRESOLVE_V4","","",N,N],[17,"CURL_IPRESOLVE_V6","","",N,N],[17,"CURLSSLOPT_ALLOW_BEAST","","",N,N],[17,"CURLSSLOPT_NO_REVOKE","","",N,N],[17,"CURL_HTTP_VERSION_NONE","","These enums are for use with the CURLOPT_HTTP_VERSION option.",N,N],[17,"CURL_HTTP_VERSION_1_0","","Please use HTTP 1.0 in the request",N,N],[17,"CURL_HTTP_VERSION_1_1","","Please use HTTP 1.1 in the request",N,N],[17,"CURL_HTTP_VERSION_2_0","","Please use HTTP 2 in the request (Added in CURL 7.33.0)",N,N],[17,"CURL_HTTP_VERSION_2TLS","","Use version 2 for HTTPS, version 1.1 for HTTP (Added in CURL 7.47.0)",N,N],[17,"CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE","","Please use HTTP 2 without HTTP/1.1 Upgrade (Added in CURL 7.49.0)",N,N],[17,"CURL_SSLVERSION_DEFAULT","","",N,N],[17,"CURL_SSLVERSION_TLSv1","","",N,N],[17,"CURL_SSLVERSION_SSLv2","","",N,N],[17,"CURL_SSLVERSION_SSLv3","","",N,N],[17,"CURLOPT_READDATA","","",N,N],[17,"CURLOPT_WRITEDATA","","",N,N],[17,"CURLOPT_HEADERDATA","","",N,N],[17,"CURL_TIMECOND_NONE","","",N,N],[17,"CURL_TIMECOND_IFMODSINCE","","",N,N],[17,"CURL_TIMECOND_IFUNMODSINCE","","",N,N],[17,"CURL_TIMECOND_LASTMOD","","",N,N],[17,"CURLFORM_NOTHING","","",N,N],[17,"CURLFORM_COPYNAME","","",N,N],[17,"CURLFORM_PTRNAME","","",N,N],[17,"CURLFORM_NAMELENGTH","","",N,N],[17,"CURLFORM_COPYCONTENTS","","",N,N],[17,"CURLFORM_PTRCONTENTS","","",N,N],[17,"CURLFORM_CONTENTSLENGTH","","",N,N],[17,"CURLFORM_FILECONTENT","","",N,N],[17,"CURLFORM_ARRAY","","",N,N],[17,"CURLFORM_OBSOLETE","","",N,N],[17,"CURLFORM_FILE","","",N,N],[17,"CURLFORM_BUFFER","","",N,N],[17,"CURLFORM_BUFFERPTR","","",N,N],[17,"CURLFORM_BUFFERLENGTH","","",N,N],[17,"CURLFORM_CONTENTTYPE","","",N,N],[17,"CURLFORM_CONTENTHEADER","","",N,N],[17,"CURLFORM_FILENAME","","",N,N],[17,"CURLFORM_END","","",N,N],[17,"CURLFORM_STREAM","","",N,N],[17,"CURL_FORMADD_OK","","",N,N],[17,"CURL_FORMADD_MEMORY","","",N,N],[17,"CURL_FORMADD_OPTION_TWICE","","",N,N],[17,"CURL_FORMADD_NULL","","",N,N],[17,"CURL_FORMADD_UNKNOWN_OPTION","","",N,N],[17,"CURL_FORMADD_INCOMPLETE","","",N,N],[17,"CURL_FORMADD_ILLEGAL_ARRAY","","",N,N],[17,"CURL_FORMADD_DISABLED","","",N,N],[17,"CURLINFO_STRING","","",N,N],[17,"CURLINFO_LONG","","",N,N],[17,"CURLINFO_DOUBLE","","",N,N],[17,"CURLINFO_SLIST","","",N,N],[17,"CURLINFO_MASK","","",N,N],[17,"CURLINFO_TYPEMASK","","",N,N],[17,"CURLINFO_EFFECTIVE_URL","","",N,N],[17,"CURLINFO_RESPONSE_CODE","","",N,N],[17,"CURLINFO_TOTAL_TIME","","",N,N],[17,"CURLINFO_NAMELOOKUP_TIME","","",N,N],[17,"CURLINFO_CONNECT_TIME","","",N,N],[17,"CURLINFO_PRETRANSFER_TIME","","",N,N],[17,"CURLINFO_SIZE_UPLOAD","","",N,N],[17,"CURLINFO_SIZE_DOWNLOAD","","",N,N],[17,"CURLINFO_SPEED_DOWNLOAD","","",N,N],[17,"CURLINFO_SPEED_UPLOAD","","",N,N],[17,"CURLINFO_HEADER_SIZE","","",N,N],[17,"CURLINFO_REQUEST_SIZE","","",N,N],[17,"CURLINFO_SSL_VERIFYRESULT","","",N,N],[17,"CURLINFO_FILETIME","","",N,N],[17,"CURLINFO_CONTENT_LENGTH_DOWNLOAD","","",N,N],[17,"CURLINFO_CONTENT_LENGTH_UPLOAD","","",N,N],[17,"CURLINFO_STARTTRANSFER_TIME","","",N,N],[17,"CURLINFO_CONTENT_TYPE","","",N,N],[17,"CURLINFO_REDIRECT_TIME","","",N,N],[17,"CURLINFO_REDIRECT_COUNT","","",N,N],[17,"CURLINFO_PRIVATE","","",N,N],[17,"CURLINFO_HTTP_CONNECTCODE","","",N,N],[17,"CURLINFO_HTTPAUTH_AVAIL","","",N,N],[17,"CURLINFO_PROXYAUTH_AVAIL","","",N,N],[17,"CURLINFO_OS_ERRNO","","",N,N],[17,"CURLINFO_NUM_CONNECTS","","",N,N],[17,"CURLINFO_SSL_ENGINES","","",N,N],[17,"CURLINFO_COOKIELIST","","",N,N],[17,"CURLINFO_LASTSOCKET","","",N,N],[17,"CURLINFO_FTP_ENTRY_PATH","","",N,N],[17,"CURLINFO_REDIRECT_URL","","",N,N],[17,"CURLINFO_PRIMARY_IP","","",N,N],[17,"CURLINFO_APPCONNECT_TIME","","",N,N],[17,"CURLINFO_CERTINFO","","",N,N],[17,"CURLINFO_CONDITION_UNMET","","",N,N],[17,"CURLINFO_RTSP_SESSION_ID","","",N,N],[17,"CURLINFO_RTSP_CLIENT_CSEQ","","",N,N],[17,"CURLINFO_RTSP_SERVER_CSEQ","","",N,N],[17,"CURLINFO_RTSP_CSEQ_RECV","","",N,N],[17,"CURLINFO_PRIMARY_PORT","","",N,N],[17,"CURLINFO_LOCAL_IP","","",N,N],[17,"CURLINFO_LOCAL_PORT","","",N,N],[17,"CURLCLOSEPOLICY_NONE","","",N,N],[17,"CURLCLOSEPOLICY_OLDEST","","",N,N],[17,"CURLCLOSEPOLICY_LEAST_RECENTLY_USED","","",N,N],[17,"CURLCLOSEPOLICY_LEAST_TRAFFIC","","",N,N],[17,"CURLCLOSEPOLICY_SLOWEST","","",N,N],[17,"CURLCLOSEPOLICY_CALLBACK","","",N,N],[17,"CURL_GLOBAL_SSL","","",N,N],[17,"CURL_GLOBAL_WIN32","","",N,N],[17,"CURL_GLOBAL_ALL","","",N,N],[17,"CURL_GLOBAL_NOTHING","","",N,N],[17,"CURL_GLOBAL_DEFAULT","","",N,N],[17,"CURL_LOCK_DATA_NONE","","",N,N],[17,"CURL_LOCK_DATA_SHARE","","",N,N],[17,"CURL_LOCK_DATA_COOKIE","","",N,N],[17,"CURL_LOCK_DATA_DNS","","",N,N],[17,"CURL_LOCK_DATA_SSL_SESSION","","",N,N],[17,"CURL_LOCK_DATA_CONNECT","","",N,N],[17,"CURL_LOCK_ACCESS_NONE","","",N,N],[17,"CURL_LOCK_ACCESS_SHARED","","",N,N],[17,"CURL_LOCK_ACCESS_SINGLE","","",N,N],[17,"CURLSHE_OK","","",N,N],[17,"CURLSHE_BAD_OPTION","","",N,N],[17,"CURLSHE_IN_USE","","",N,N],[17,"CURLSHE_INVALID","","",N,N],[17,"CURLSHE_NOMEM","","",N,N],[17,"CURLSHOPT_NONE","","",N,N],[17,"CURLSHOPT_SHARE","","",N,N],[17,"CURLSHOPT_UNSHARE","","",N,N],[17,"CURLSHOPT_LOCKFUNC","","",N,N],[17,"CURLSHOPT_UNLOCKFUNC","","",N,N],[17,"CURLSHOPT_USERDATA","","",N,N],[17,"CURLVERSION_FIRST","","",N,N],[17,"CURLVERSION_SECOND","","",N,N],[17,"CURLVERSION_THIRD","","",N,N],[17,"CURLVERSION_FOURTH","","",N,N],[17,"CURLVERSION_FIFTH","","",N,N],[17,"CURLVERSION_NOW","","",N,N],[17,"CURL_VERSION_IPV6","","",N,N],[17,"CURL_VERSION_KERBEROS4","","",N,N],[17,"CURL_VERSION_SSL","","",N,N],[17,"CURL_VERSION_LIBZ","","",N,N],[17,"CURL_VERSION_NTLM","","",N,N],[17,"CURL_VERSION_GSSNEGOTIATE","","",N,N],[17,"CURL_VERSION_DEBUG","","",N,N],[17,"CURL_VERSION_ASYNCHDNS","","",N,N],[17,"CURL_VERSION_SPNEGO","","",N,N],[17,"CURL_VERSION_LARGEFILE","","",N,N],[17,"CURL_VERSION_IDN","","",N,N],[17,"CURL_VERSION_SSPI","","",N,N],[17,"CURL_VERSION_CONV","","",N,N],[17,"CURL_VERSION_CURLDEBUG","","",N,N],[17,"CURL_VERSION_TLSAUTH_SRP","","",N,N],[17,"CURL_VERSION_NTLM_WB","","",N,N],[17,"CURL_VERSION_HTTP2","","",N,N],[17,"CURL_VERSION_UNIX_SOCKETS","","",N,N],[17,"CURLPAUSE_RECV","","",N,N],[17,"CURLPAUSE_RECV_CONT","","",N,N],[17,"CURLPAUSE_SEND","","",N,N],[17,"CURLPAUSE_SEND_CONT","","",N,N],[17,"CURLM_CALL_MULTI_PERFORM","","",N,N],[17,"CURLM_OK","","",N,N],[17,"CURLM_BAD_HANDLE","","",N,N],[17,"CURLM_BAD_EASY_HANDLE","","",N,N],[17,"CURLM_OUT_OF_MEMORY","","",N,N],[17,"CURLM_INTERNAL_ERROR","","",N,N],[17,"CURLM_BAD_SOCKET","","",N,N],[17,"CURLM_UNKNOWN_OPTION","","",N,N],[17,"CURLMSG_NONE","","",N,N],[17,"CURLMSG_DONE","","",N,N],[17,"CURL_WAIT_POLLIN","","",N,N],[17,"CURL_WAIT_POLLPRI","","",N,N],[17,"CURL_WAIT_POLLOUT","","",N,N],[17,"CURL_POLL_NONE","","",N,N],[17,"CURL_POLL_IN","","",N,N],[17,"CURL_POLL_OUT","","",N,N],[17,"CURL_POLL_INOUT","","",N,N],[17,"CURL_POLL_REMOVE","","",N,N],[17,"CURL_CSELECT_IN","","",N,N],[17,"CURL_CSELECT_OUT","","",N,N],[17,"CURL_CSELECT_ERR","","",N,N],[17,"CURL_SOCKET_TIMEOUT","","",N,N],[17,"CURLMOPT_SOCKETFUNCTION","","",N,N],[17,"CURLMOPT_SOCKETDATA","","",N,N],[17,"CURLMOPT_PIPELINING","","",N,N],[17,"CURLMOPT_TIMERFUNCTION","","",N,N],[17,"CURLMOPT_TIMERDATA","","",N,N],[17,"CURLMOPT_MAX_HOST_CONNECTIONS","","",N,N],[17,"CURLMOPT_MAX_PIPELINE_LENGTH","","",N,N],[17,"CURLPIPE_NOTHING","","",N,N],[17,"CURLPIPE_HTTP1","","",N,N],[17,"CURLPIPE_MULTIPLEX","","",N,N],[17,"CURL_ERROR_SIZE","","",N,N],[17,"CURLSOCKTYPE_IPCXN","","",N,N],[17,"CURLSOCKTYPE_ACCEPT","","",N,N],[17,"CURLSOCKTYPE_LAST","","",N,N],[11,"clone","","",8,[[["self"]],["fd_set"]]]],"paths":[[3,"curl_fileinfo"],[3,"curl_forms"],[3,"curl_slist"],[3,"curl_certinfo"],[3,"curl_version_info_data"],[3,"CURLMsg"],[3,"curl_waitfd"],[3,"curl_sockaddr"],[3,"fd_set"]]};
searchIndex["dirs"]={"doc":"The dirs crate is","items":[[5,"home_dir","dirs","Returns the path to the user's home directory.",N,[[],["option",["pathbuf"]]]],[5,"cache_dir","","Returns the path to the user's cache directory.",N,[[],["option",["pathbuf"]]]],[5,"config_dir","","Returns the path to the user's config directory.",N,[[],["option",["pathbuf"]]]],[5,"data_dir","","Returns the path to the user's data directory.",N,[[],["option",["pathbuf"]]]],[5,"data_local_dir","","Returns the path to the user's local data directory.",N,[[],["option",["pathbuf"]]]],[5,"executable_dir","","Returns the path to the user's executable directory.",N,[[],["option",["pathbuf"]]]],[5,"runtime_dir","","Returns the path to the user's runtime directory.",N,[[],["option",["pathbuf"]]]],[5,"audio_dir","","Returns the path to the user's audio directory.",N,[[],["option",["pathbuf"]]]],[5,"desktop_dir","","Returns the path to the user's desktop directory.",N,[[],["option",["pathbuf"]]]],[5,"document_dir","","Returns the path to the user's document directory.",N,[[],["option",["pathbuf"]]]],[5,"download_dir","","Returns the path to the user's download directory.",N,[[],["option",["pathbuf"]]]],[5,"font_dir","","Returns the path to the user's font directory.",N,[[],["option",["pathbuf"]]]],[5,"picture_dir","","Returns the path to the user's picture directory.",N,[[],["option",["pathbuf"]]]],[5,"public_dir","","Returns the path to the user's public directory.",N,[[],["option",["pathbuf"]]]],[5,"template_dir","","Returns the path to the user's template directory.",N,[[],["option",["pathbuf"]]]],[5,"video_dir","","Returns the path to the user's video directory.",N,[[],["option",["pathbuf"]]]]],"paths":[]};
searchIndex["git2"]={"doc":"libgit2 bindings for Rust","items":[[3,"Blame","git2","Opaque structure to hold blame results.",N,N],[3,"BlameHunk","","Structure that represents a blame hunk.",N,N],[3,"BlameIter","","An iterator over the hunks in a blame.",N,N],[3,"BlameOptions","","Blame options",N,N],[3,"Blob","","A structure to represent a git [blob][1]",N,N],[3,"BlobWriter","","A structure to represent a git writestream for blobs",N,N],[3,"Branch","","A structure to represent a git [branch][1]",N,N],[3,"Branches","","An iterator over the branches inside of a repository.",N,N],[3,"Buf","","A structure to wrap an intermediate buffer used by libgit2.",N,N],[3,"Commit","","A structure to represent a git [commit][1]",N,N],[3,"Parents","","An iterator over the parent commits of a commit.",N,N],[3,"Config","","A structure representing a git configuration key/value store",N,N],[3,"ConfigEntry","","A struct representing a certain entry owned by a `Config` instance.",N,N],[3,"ConfigEntries","","An iterator over the `ConfigEntry` values of a `Config` structure.",N,N],[3,"Cred","","A structure to represent git credentials in libgit2.",N,N],[3,"CredentialHelper","","Management of the gitcredentials(7) interface.",N,N],[12,"username","","A public field representing the currently discovered username from configuration.",0,N],[3,"Describe","","The result of a `describe` operation on either an `Describe` or a `Repository`.",N,N],[3,"DescribeFormatOptions","","Options which can be used to customize how a description is formatted.",N,N],[3,"DescribeOptions","","Options which indicate how a `Describe` is created.",N,N],[3,"Diff","","The diff object that contains all individual file deltas.",N,N],[3,"DiffDelta","","Description of changes to one entry.",N,N],[3,"DiffFile","","Description of one side of a delta.",N,N],[3,"DiffOptions","","Structure describing options about how the diff should be executed.",N,N],[3,"Deltas","","An iterator over the diffs in a delta",N,N],[3,"DiffBinary","","Structure describing the binary contents of a diff.",N,N],[3,"DiffBinaryFile","","The contents of one of the files in a binary diff.",N,N],[3,"DiffLine","","Structure describing a line (or data span) of a diff.",N,N],[3,"DiffHunk","","Structure describing a hunk of a diff.",N,N],[3,"DiffStats","","Structure describing a hunk of a diff.",N,N],[3,"DiffFindOptions","","Control behavior of rename and copy detection",N,N],[3,"Error","","A structure to represent errors coming out of libgit2.",N,N],[3,"Index","","A structure to represent a git [index][1]",N,N],[3,"IndexEntry","","A structure to represent an entry or a file inside of an index.",N,N],[12,"ctime","","",1,N],[12,"mtime","","",1,N],[12,"dev","","",1,N],[12,"ino","","",1,N],[12,"mode","","",1,N],[12,"uid","","",1,N],[12,"gid","","",1,N],[12,"file_size","","",1,N],[12,"id","","",1,N],[12,"flags","","",1,N],[12,"flags_extended","","",1,N],[12,"path","","",1,N],[3,"IndexEntries","","An iterator over the entries in an index",N,N],[3,"AnnotatedCommit","","A structure to represent an annotated commit, the input to merge and rebase.",N,N],[3,"MergeOptions","","Options to specify when merging.",N,N],[3,"Note","","A structure representing a [note][note] in git.",N,N],[3,"Notes","","An iterator over all of the notes within a repository.",N,N],[3,"Object","","A structure to represent a git [object][1]",N,N],[3,"Oid","","Unique identity of any object (commit, tree, blob, tag).",N,N],[3,"PackBuilder","","A builder for creating a packfile",N,N],[3,"Pathspec","","Structure representing a compiled pathspec used for matching against various structures.",N,N],[3,"PathspecMatchList","","List of filenames matching a pathspec.",N,N],[3,"PathspecFailedEntries","","Iterator over the failed list of pathspec items that did not match.",N,N],[3,"PathspecDiffEntries","","Iterator over the matching diff deltas.",N,N],[3,"PathspecEntries","","Iterator over the matched paths in a pathspec.",N,N],[3,"Patch","","A structure representing the text changes in a single diff delta.",N,N],[3,"ProxyOptions","","Options which can be specified to various fetch operations.",N,N],[3,"Reference","","A structure to represent a git [reference][1].",N,N],[3,"References","","An iterator over the references in a repository.",N,N],[3,"ReferenceNames","","An iterator over the names of references in a repository.",N,N],[3,"Reflog","","A reference log of a git repository.",N,N],[3,"ReflogEntry","","An entry inside the reflog of a repository",N,N],[3,"ReflogIter","","An iterator over the entries inside of a reflog.",N,N],[3,"Refspec","","A structure to represent a git [refspec][1].",N,N],[3,"Remote","","A structure representing a [remote][1] of a git repository.",N,N],[3,"RemoteConnection","","Holds callbacks for a connection to a `Remote`. Disconnects when dropped",N,N],[3,"Refspecs","","An iterator over the refspecs that a remote contains.",N,N],[3,"RemoteHead","","Description of a reference advertised bya remote server, given out on calls to `list`.",N,N],[3,"FetchOptions","","Options which can be specified to various fetch operations.",N,N],[3,"PushOptions","","Options to control the behavior of a git push.",N,N],[3,"RemoteCallbacks","","A structure to contain the callbacks which are invoked when a repository is being updated or downloaded.",N,N],[3,"Progress","","Struct representing the progress by an in-flight transfer.",N,N],[3,"Repository","","An owned git repository, representing all state associated with the underlying filesystem.",N,N],[3,"RepositoryInitOptions","","Options which can be used to configure how a repository is initialized",N,N],[3,"Revspec","","A revspec represents a range of revisions within a repository.",N,N],[3,"Revwalk","","A revwalk allows traversal of the commit graph defined by including one or more leaves and excluding one or more roots.",N,N],[3,"Signature","","A Signature is used to indicate authorship of various actions throughout the library.",N,N],[3,"StatusOptions","","Options that can be provided to `repo.statuses()` to control how the status information is gathered.",N,N],[3,"Statuses","","A container for a list of status information about a repository.",N,N],[3,"StatusIter","","An iterator over the statuses in a `Statuses` instance.",N,N],[3,"StatusEntry","","A structure representing an entry in the `Statuses` structure.",N,N],[3,"StashApplyOptions","","Stash application options structure",N,N],[3,"Submodule","","A structure to represent a git [submodule][1]",N,N],[3,"SubmoduleUpdateOptions","","Options to update a submodule.",N,N],[3,"Tag","","A structure to represent a git [tag][1]",N,N],[3,"Time","","Time in a signature",N,N],[3,"IndexTime","","Time structure used in a git index entry.",N,N],[3,"Tree","","A structure to represent a git [tree][1]",N,N],[3,"TreeEntry","","A structure representing an entry inside of a tree. An entry is borrowed from a tree.",N,N],[3,"TreeIter","","An iterator over the entries in a tree.",N,N],[3,"TreeBuilder","","Constructor for in-memory trees",N,N],[3,"Odb","","A structure to represent a git object database",N,N],[3,"OdbObject","","An object from the Object Database.",N,N],[3,"OdbReader","","A structure to represent a git ODB rstream",N,N],[3,"OdbWriter","","A structure to represent a git ODB wstream",N,N],[3,"Sort","","Orderings that may be specified for Revwalk iteration.",N,N],[3,"CredentialType","","Types of credentials that can be requested by a credential callback.",N,N],[3,"IndexEntryFlag","","Flags for the `flags` field of an IndexEntry.",N,N],[3,"IndexEntryExtendedFlag","","Flags for the `extended_flags` field of an IndexEntry.",N,N],[3,"IndexAddOption","","Flags for APIs that add files matching pathspec",N,N],[3,"RepositoryOpenFlags","","Flags for `Repository::open_ext`",N,N],[3,"RevparseMode","","Flags for the return value of `Repository::revparse`",N,N],[3,"MergeAnalysis","","The results of `merge_analysis` indicating the merge opportunities.",N,N],[3,"MergePreference","","The user's stated preference for merges.",N,N],[3,"Status","","Status flags for a single file",N,N],[3,"RepositoryInitMode","","Mode options for RepositoryInitOptions",N,N],[3,"SubmoduleStatus","","Return codes for submodule status.",N,N],[3,"PathspecFlags","","...",N,N],[3,"CheckoutNotificationType","","Types of notifications emitted from checkouts.",N,N],[3,"DiffStatsFormat","","Formatting options for diff stats",N,N],[3,"StashApplyFlags","","",N,N],[3,"StashFlags","","",N,N],[4,"DiffBinaryKind","","When producing a binary diff, the binary data returned will be either the deflated full (\"literal\") contents of the file, or the deflated binary delta between the two sides (whichever is smaller).",N,N],[13,"None","","There is no binary delta",2,N],[13,"Literal","","The binary data is the literal contents of the file",2,N],[13,"Delta","","The binary data is the delta from one side to the other",2,N],[4,"PackBuilderStage","","Stages that are reported by the `PackBuilder` progress callback.",N,N],[13,"AddingObjects","","Adding objects to the pack",3,N],[13,"Deltafication","","Deltafication of the pack",3,N],[4,"StatusShow","","Enumeration of possible methods of what can be shown through a status operation.",N,N],[13,"Index","","Only gives status based on HEAD to index comparison, not looking at working directory changes.",4,N],[13,"Workdir","","Only gives status based on index to working directory comparison, not comparing the index to the HEAD.",4,N],[13,"IndexAndWorkdir","","The default, this roughly matches `git status --porcelain` regarding which files are included and in what order.",4,N],[4,"ErrorCode","","An enumeration of possible errors that can happen when working with a git repository.",N,N],[13,"GenericError","","Generic error",5,N],[13,"NotFound","","Requested object could not be found",5,N],[13,"Exists","","Object exists preventing operation",5,N],[13,"Ambiguous","","More than one object matches",5,N],[13,"BufSize","","Output buffer too short to hold data",5,N],[13,"User","","User-generated error",5,N],[13,"BareRepo","","Operation not allowed on bare repository",5,N],[13,"UnbornBranch","","HEAD refers to branch with no commits",5,N],[13,"Unmerged","","Merge in progress prevented operation",5,N],[13,"NotFastForward","","Reference was not fast-forwardable",5,N],[13,"InvalidSpec","","Name/ref spec was not in a valid format",5,N],[13,"Conflict","","Checkout conflicts prevented operation",5,N],[13,"Locked","","Lock file prevented operation",5,N],[13,"Modified","","Reference value does not match expected",5,N],[13,"Auth","","Authentication error",5,N],[13,"Certificate","","Server certificate is invalid",5,N],[13,"Applied","","Patch/merge has already been applied",5,N],[13,"Peel","","The requested peel operation is not possible",5,N],[13,"Eof","","Unexpected EOF",5,N],[13,"Invalid","","Invalid operation or input",5,N],[13,"Uncommitted","","Uncommitted changes in index prevented operation",5,N],[13,"Directory","","Operation was not valid for a directory,",5,N],[4,"ErrorClass","","An enumeration of possible categories of things that can have errors when working with a git repository.",N,N],[13,"None","","Uncategorized",6,N],[13,"NoMemory","","Out of memory or insufficient allocated space",6,N],[13,"Os","","Syscall or standard system library error",6,N],[13,"Invalid","","Invalid input",6,N],[13,"Reference","","Error resolving or manipulating a reference",6,N],[13,"Zlib","","ZLib failure",6,N],[13,"Repository","","Bad repository state",6,N],[13,"Config","","Bad configuration",6,N],[13,"Regex","","Regex failure",6,N],[13,"Odb","","Bad object",6,N],[13,"Index","","Invalid index data",6,N],[13,"Object","","Error creating or obtaining an object",6,N],[13,"Net","","Network error",6,N],[13,"Tag","","Error manpulating a tag",6,N],[13,"Tree","","Invalid value in tree",6,N],[13,"Indexer","","Hashing or packing error",6,N],[13,"Ssl","","Error from SSL",6,N],[13,"Submodule","","Error involing submodules",6,N],[13,"Thread","","Threading error",6,N],[13,"Stash","","Error manipulating a stash",6,N],[13,"Checkout","","Checkout failure",6,N],[13,"FetchHead","","Invalid FETCH_HEAD",6,N],[13,"Merge","","Merge failure",6,N],[13,"Ssh","","SSH failure",6,N],[13,"Filter","","Error manipulating filters",6,N],[13,"Revert","","Error reverting commit",6,N],[13,"Callback","","Error from a user callback",6,N],[13,"CherryPick","","Error cherry-picking commit",6,N],[13,"Describe","","Can't describe object",6,N],[13,"Rebase","","Error during rebase",6,N],[13,"Filesystem","","Filesystem-related error",6,N],[4,"RepositoryState","","A listing of the possible states that a repository can be in.",N,N],[13,"Clean","","",7,N],[13,"Merge","","",7,N],[13,"Revert","","",7,N],[13,"RevertSequence","","",7,N],[13,"CherryPick","","",7,N],[13,"CherryPickSequence","","",7,N],[13,"Bisect","","",7,N],[13,"Rebase","","",7,N],[13,"RebaseInteractive","","",7,N],[13,"RebaseMerge","","",7,N],[13,"ApplyMailbox","","",7,N],[13,"ApplyMailboxOrRebase","","",7,N],[4,"Direction","","An enumeration of the possible directions for a remote.",N,N],[13,"Fetch","","Data will be fetched (read) from this remote.",8,N],[13,"Push","","Data will be pushed (written) to this remote.",8,N],[4,"ResetType","","An enumeration of the operations that can be performed for the `reset` method on a `Repository`.",N,N],[13,"Soft","","Move the head to the given commit.",9,N],[13,"Mixed","","Soft plus reset the index to the commit.",9,N],[13,"Hard","","Mixed plus changes in the working tree are discarded.",9,N],[4,"ObjectType","","An enumeration all possible kinds objects may have.",N,N],[13,"Any","","Any kind of git object",10,N],[13,"Commit","","An object which corresponds to a git commit",10,N],[13,"Tree","","An object which corresponds to a git tree",10,N],[13,"Blob","","An object which corresponds to a git blob",10,N],[13,"Tag","","An object which corresponds to a git tag",10,N],[4,"ReferenceType","","An enumeration of all possile kinds of references.",N,N],[13,"Oid","","A reference which points at an object id.",11,N],[13,"Symbolic","","A reference which points at another reference.",11,N],[4,"BranchType","","An enumeration for the possible types of branches",N,N],[13,"Local","","A local branch not on a remote.",12,N],[13,"Remote","","A branch for a remote.",12,N],[4,"ConfigLevel","","An enumeration of the possible priority levels of a config file.",N,N],[13,"ProgramData","","System-wide on Windows, for compatibility with portable git",13,N],[13,"System","","System-wide configuration file, e.g. /etc/gitconfig",13,N],[13,"XDG","","XDG-compatible configuration file, e.g. ~/.config/git/config",13,N],[13,"Global","","User-specific configuration, e.g. ~/.gitconfig",13,N],[13,"Local","","Repository specific config, e.g. $PWD/.git/config",13,N],[13,"App","","Application specific configuration file",13,N],[13,"Highest","","Highest level available",13,N],[4,"FileFavor","","Merge file favor options for `MergeOptions` instruct the file-level merging functionality how to deal with conflicting regions of the files.",N,N],[13,"Normal","","When a region of a file is changed in both branches, a conflict will be recorded in the index so that git_checkout can produce a merge file with conflict markers in the working directory. This is the default.",14,N],[13,"Ours","","When a region of a file is changed in both branches, the file created in the index will contain the \"ours\" side of any conflicting region. The index will not record a conflict.",14,N],[13,"Theirs","","When a region of a file is changed in both branches, the file created in the index will contain the \"theirs\" side of any conflicting region. The index will not record a conflict.",14,N],[13,"Union","","When a region of a file is changed in both branches, the file created in the index will contain each unique line from each side, which has the result of combining both files. The index will not record a conflict.",14,N],[4,"Delta","","What type of change is described by a `DiffDelta`?",N,N],[13,"Unmodified","","No changes",15,N],[13,"Added","","Entry does not exist in old version",15,N],[13,"Deleted","","Entry does not exist in new version",15,N],[13,"Modified","","Entry content changed between old and new",15,N],[13,"Renamed","","Entry was renamed between old and new",15,N],[13,"Copied","","Entry was copied from another old entry",15,N],[13,"Ignored","","Entry is ignored item in workdir",15,N],[13,"Untracked","","Entry is untracked item in workdir",15,N],[13,"Typechange","","Type of entry changed between old and new",15,N],[13,"Unreadable","","Entry is unreadable",15,N],[13,"Conflicted","","Entry in the index is conflicted",15,N],[4,"SubmoduleIgnore","","Submodule ignore values",N,N],[13,"Unspecified","","Use the submodule's configuration",16,N],[13,"None","","Any change or untracked file is considered dirty",16,N],[13,"Untracked","","Only dirty if tracked files have changed",16,N],[13,"Dirty","","Only dirty if HEAD has moved",16,N],[13,"All","","Never dirty",16,N],[4,"DiffFormat","","Possible output formats for diff data",N,N],[13,"Patch","","full git diff",17,N],[13,"PatchHeader","","just the headers of the patch",17,N],[13,"Raw","","like git diff --raw",17,N],[13,"NameOnly","","like git diff --name-only",17,N],[13,"NameStatus","","like git diff --name-status",17,N],[4,"AutotagOption","","Automatic tag following options.",N,N],[13,"Unspecified","","Use the setting from the remote's configuration",18,N],[13,"Auto","","Ask the server for tags pointing to objects we're already downloading",18,N],[13,"None","","Don't ask for any tags beyond the refspecs",18,N],[13,"All","","Ask for all the tags",18,N],[4,"FetchPrune","","Configuration for how pruning is done on a fetch",N,N],[13,"Unspecified","","Use the setting from the configuration",19,N],[13,"On","","Force pruning on",19,N],[13,"Off","","Force pruning off",19,N],[4,"StashApplyProgress","","",N,N],[13,"None","","None",20,N],[13,"LoadingStash","","Loading the stashed data from the object database",20,N],[13,"AnalyzeIndex","","The stored index is being analyzed",20,N],[13,"AnalyzeModified","","The modified files are being analyzed",20,N],[13,"AnalyzeUntracked","","The untracked and ignored files are being analyzed",20,N],[13,"CheckoutUntracked","","The untracked files are being written to disk",20,N],[13,"CheckoutModified","","The modified files are being written to disk",20,N],[13,"Done","","The stash was applied successfully",20,N],[5,"message_prettify","","Clean up a message, removing extraneous whitespace, and ensure that the message ends with a newline. If `comment_char` is `Some`, also remove comment lines starting with that character.",N,[[["t"],["option",["u8"]]],["result",["string","error"]]]],[0,"build","","Builder-pattern objects for configuration various git operations.",N,N],[3,"RepoBuilder","git2::build","A builder struct which is used to build configuration for cloning a new git repository.",N,N],[3,"CheckoutBuilder","","A builder struct for configuring checkouts of a repository.",N,N],[4,"CloneLocal","","Options that can be passed to `RepoBuilder::clone_local`.",N,N],[13,"Auto","","Auto-detect (default)",21,N],[13,"Local","","Bypass the git-aware transport even for `file://` urls.",21,N],[13,"None","","Never bypass the git-aware transport",21,N],[13,"NoLinks","","Bypass the git-aware transport, but don't try to use hardlinks.",21,N],[6,"RemoteCreate","","Type of callback passed to `RepoBuilder::remote_create`.",N,N],[6,"Progress","","Checkout progress notification callback.",N,N],[6,"Notify","","Checkout notifications callback.",N,N],[11,"default","","",22,[[],["self"]]],[11,"clone","","",21,[[["self"]],["clonelocal"]]],[11,"new","","Creates a new repository builder with all of the default configuration.",22,[[],["repobuilder"]]],[11,"bare","","Indicate whether the repository will be cloned as a bare repository or not.",22,[[["self"],["bool"]],["repobuilder"]]],[11,"branch","","Specify the name of the branch to check out after the clone.",22,[[["self"],["str"]],["repobuilder"]]],[11,"clone_local","","Configures options for bypassing the git-aware transport on clone.",22,[[["self"],["clonelocal"]],["repobuilder"]]],[11,"with_checkout","","Configure the checkout which will be performed by consuming a checkout builder.",22,[[["self"],["checkoutbuilder"]],["repobuilder"]]],[11,"fetch_options","","Options which control the fetch, including callbacks.",22,[[["self"],["fetchoptions"]],["repobuilder"]]],[11,"remote_create","","Configures a callback used to create the git remote, prior to its being used to perform the clone operation.",22,[[["self"],["f"]],["repobuilder"]]],[11,"clone","","Clone a remote repository.",22,[[["self"],["str"],["path"]],["result",["repository","error"]]]],[11,"default","","",23,[[],["self"]]],[11,"new","","Creates a new builder for checkouts with all of its default configuration.",23,[[],["checkoutbuilder"]]],[11,"dry_run","","Indicate that this checkout should perform a dry run by checking for conflicts but not make any actual changes.",23,[[["self"]],["checkoutbuilder"]]],[11,"force","","Take any action necessary to get the working directory to match the target including potentially discarding modified files.",23,[[["self"]],["checkoutbuilder"]]],[11,"safe","","Indicate that the checkout should be performed safely, allowing new files to be created but not overwriting extisting files or changes.",23,[[["self"]],["checkoutbuilder"]]],[11,"recreate_missing","","In safe mode, create files that don't exist.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"allow_conflicts","","In safe mode, apply safe file updates even when there are conflicts instead of canceling the checkout.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"remove_untracked","","Remove untracked files from the working dir.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"remove_ignored","","Remove ignored files from the working dir.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"update_only","","Only update the contents of files that already exist.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"update_index","","Prevents checkout from writing the updated files' information to the index.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"refresh","","Indicate whether the index and git attributes should be refreshed from disk before any operations.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"skip_unmerged","","Skip files with unmerged index entries.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"use_ours","","Indicate whether the checkout should proceed on conflicts by using the stage 2 version of the file (\"ours\").",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"use_theirs","","Indicate whether the checkout should proceed on conflicts by using the stage 3 version of the file (\"theirs\").",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"overwrite_ignored","","Indicate whether ignored files should be overwritten during the checkout.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"conflict_style_merge","","Indicate whether a normal merge file should be written for conflicts.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"notify_on","","Specify for which notification types to invoke the notification callback.",23,[[["self"],["checkoutnotificationtype"]],["checkoutbuilder"]]],[11,"conflict_style_diff3","","Indicates whether to include common ancestor data in diff3 format files for conflicts.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"disable_filters","","Indicate whether to apply filters like CRLF conversion.",23,[[["self"],["bool"]],["checkoutbuilder"]]],[11,"dir_perm","","Set the mode with which new directories are created.",23,[[["self"],["i32"]],["checkoutbuilder"]]],[11,"file_perm","","Set the mode with which new files are created.",23,[[["self"],["i32"]],["checkoutbuilder"]]],[11,"path","","Add a path to be checked out.",23,[[["self"],["t"]],["checkoutbuilder"]]],[11,"target_dir","","Set the directory to check out to",23,[[["self"],["path"]],["checkoutbuilder"]]],[11,"ancestor_label","","The name of the common ancestor side of conflicts",23,[[["self"],["str"]],["checkoutbuilder"]]],[11,"our_label","","The name of the common our side of conflicts",23,[[["self"],["str"]],["checkoutbuilder"]]],[11,"their_label","","The name of the common their side of conflicts",23,[[["self"],["str"]],["checkoutbuilder"]]],[11,"progress","","Set a callback to receive notifications of checkout progress.",23,[[["self"],["f"]],["checkoutbuilder"]]],[11,"notify","","Set a callback to receive checkout notifications.",23,[[["self"],["f"]],["checkoutbuilder"]]],[11,"configure","","Configure a raw checkout options based on this configuration.",23,[[["self"],["git_checkout_options"]]]],[0,"cert","git2","Certificate types which are passed to `CertificateCheck` in `RemoteCallbacks`.",N,N],[3,"Cert","git2::cert","A certificate for a remote connection, viewable as one of `CertHostkey` or `CertX509` currently.",N,N],[3,"CertHostkey","","Hostkey information taken from libssh2",N,N],[3,"CertX509","","X.509 certificate information",N,N],[11,"as_hostkey","","Attempt to view this certificate as an SSH hostkey.",24,[[["self"]],["option",["certhostkey"]]]],[11,"as_x509","","Attempt to view this certificate as an X.509 certificate.",24,[[["self"]],["option",["certx509"]]]],[11,"hash_md5","","Returns the md5 hash of the hostkey, if available.",25,[[["self"]],["option"]]],[11,"hash_sha1","","Returns the SHA-1 hash of the hostkey, if available.",25,[[["self"]],["option"]]],[11,"data","","Return the X.509 certificate data as a byte slice",26,N],[0,"string_array","git2","Bindings to libgit2's raw `git_strarray` type",N,N],[3,"StringArray","git2::string_array","A string array structure used by libgit2",N,N],[3,"Iter","","A forward iterator over the strings of an array, casted to `&str`.",N,N],[3,"IterBytes","","A forward iterator over the strings of an array, casted to `&[u8]`.",N,N],[11,"get","","Returns None if the i'th string is not utf8 or if i is out of bounds.",27,[[["self"],["usize"]],["option",["str"]]]],[11,"get_bytes","","Returns None if `i` is out of bounds.",27,[[["self"],["usize"]],["option"]]],[11,"iter","","Returns an iterator over the strings contained within this array.",27,[[["self"]],["iter"]]],[11,"iter_bytes","","Returns an iterator over the strings contained within this array, yielding byte slices.",27,[[["self"]],["iterbytes"]]],[11,"len","","Returns the number of strings in this array.",27,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` if this array is empty.",27,[[["self"]],["bool"]]],[11,"next","","",28,[[["self"]],["option",["option"]]]],[11,"size_hint","","",28,N],[11,"next_back","","",28,[[["self"]],["option",["option"]]]],[11,"next","","",29,[[["self"]],["option"]]],[11,"size_hint","","",29,N],[11,"next_back","","",29,[[["self"]],["option"]]],[11,"drop","","",27,[[["self"]]]],[0,"oid_array","git2","Bindings to libgit2's raw `git_oidarray` type",N,N],[3,"OidArray","git2::oid_array","An oid array structure used by libgit2",N,N],[11,"deref","","",30,N],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",30,[[["self"]]]],[0,"transport","git2","Interfaces for adding custom transports to libgit2",N,N],[3,"Transport","git2::transport","A transport is a structure which knows how to transfer data to and from a remote.",N,N],[4,"Service","","Actions that a smart transport can ask a subtransport to perform",N,N],[13,"UploadPackLs","","",31,N],[13,"UploadPack","","",31,N],[13,"ReceivePackLs","","",31,N],[13,"ReceivePack","","",31,N],[5,"register","","Add a custom transport definition, to be used in addition to the built-in set of transports that come with libgit2.",N,[[["str"],["f"]],["result",["error"]]]],[8,"SmartSubtransport","","Interface used by smart transports.",N,N],[10,"action","","Indicates that this subtransport will be performing the specified action on the specified URL.",32,[[["self"],["str"],["service"]],["result",["box","error"]]]],[10,"close","","Terminates a connection with the remote.",32,[[["self"]],["result",["error"]]]],[8,"SmartSubtransportStream","","An instance of a stream over which a smart transport will communicate with a remote.",N,N],[11,"clone","","",31,[[["self"]],["service"]]],[11,"smart","","Creates a new transport which will use the \"smart\" transport protocol for transferring data.",33,[[["remote"],["bool"],["s"]],["result",["transport","error"]]]],[11,"drop","","",33,[[["self"]]]],[11,"len","git2","Gets the number of hunks that exist in the blame structure.",34,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` is there is no hunk in the blame structure.",34,[[["self"]],["bool"]]],[11,"get_index","","Gets the blame hunk at the given index.",34,[[["self"],["usize"]],["option",["blamehunk"]]]],[11,"get_line","","Gets the hunk that relates to the given line number in the newest commit.",34,[[["self"],["usize"]],["option",["blamehunk"]]]],[11,"iter","","Returns an iterator over the hunks in this blame.",34,[[["self"]],["blameiter"]]],[11,"final_commit_id","","Returns OID of the commit where this line was last changed",35,[[["self"]],["oid"]]],[11,"final_signature","","Returns signature of the commit.",35,[[["self"]],["signature"]]],[11,"final_start_line","","Returns line number where this hunk begins.",35,[[["self"]],["usize"]]],[11,"orig_commit_id","","Returns the OID of the commit where this hunk was found.",35,[[["self"]],["oid"]]],[11,"orig_signature","","Returns signature of the commit.",35,[[["self"]],["signature"]]],[11,"orig_start_line","","Returns line number where this hunk begins.",35,[[["self"]],["usize"]]],[11,"path","","Returns path to the file where this hunk originated.",35,[[["self"]],["option",["path"]]]],[11,"is_boundary","","Tests whether this hunk has been tracked to a boundary commit (the root, or the commit specified in git_blame_options.oldest_commit).",35,[[["self"]],["bool"]]],[11,"lines_in_hunk","","Returns number of lines in this hunk.",35,[[["self"]],["usize"]]],[11,"default","","",36,[[],["self"]]],[11,"new","","Initialize options",36,[[],["blameoptions"]]],[11,"track_copies_same_file","","Track lines that have moved within a file.",36,[[["self"],["bool"]],["blameoptions"]]],[11,"track_copies_same_commit_moves","","Track lines that have moved across files in the same commit.",36,[[["self"],["bool"]],["blameoptions"]]],[11,"track_copies_same_commit_copies","","Track lines that have been copied from another file that exists in the same commit.",36,[[["self"],["bool"]],["blameoptions"]]],[11,"track_copies_any_commit_copies","","Track lines that have been copied from another file that exists in any commit.",36,[[["self"],["bool"]],["blameoptions"]]],[11,"first_parent","","Restrict the search of commits to those reachable following only the first parents.",36,[[["self"],["bool"]],["blameoptions"]]],[11,"newest_commit","","Setter for the id of the newest commit to consider.",36,[[["self"],["oid"]],["blameoptions"]]],[11,"oldest_commit","","Setter for the id of the oldest commit to consider.",36,[[["self"],["oid"]],["blameoptions"]]],[11,"drop","","",34,[[["self"]]]],[11,"next","","",37,[[["self"]],["option",["blamehunk"]]]],[11,"size_hint","","",37,N],[11,"next_back","","",37,[[["self"]],["option",["blamehunk"]]]],[11,"id","","Get the id (SHA1) of a repository blob",38,[[["self"]],["oid"]]],[11,"is_binary","","Determine if the blob content is most certainly binary or not.",38,[[["self"]],["bool"]]],[11,"content","","Get the content of this blob.",38,N],[11,"as_object","","Casts this Blob to be usable as an `Object`",38,[[["self"]],["object"]]],[11,"into_object","","Consumes Blob to be returned as an `Object`",38,[[["self"]],["object"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"drop","","",38,[[["self"]]]],[11,"commit","","Finalize blob writing stream and write the blob to the object db",39,[[["self"]],["result",["oid","error"]]]],[11,"drop","","",39,[[["self"]]]],[11,"write","","",39,N],[11,"flush","","",39,[[["self"]],["result"]]],[11,"wrap","","Creates Branch type from a Reference",40,[[["reference"]],["branch"]]],[11,"get","","Gain access to the reference that is this branch",40,[[["self"]],["reference"]]],[11,"into_reference","","Take ownership of the underlying reference.",40,[[["self"]],["reference"]]],[11,"delete","","Delete an existing branch reference.",40,[[["self"]],["result",["error"]]]],[11,"is_head","","Determine if the current local branch is pointed at by HEAD.",40,[[["self"]],["bool"]]],[11,"rename","","Move/rename an existing local branch reference.",40,[[["self"],["str"],["bool"]],["result",["branch","error"]]]],[11,"name","","Return the name of the given local or remote branch.",40,[[["self"]],["result",["option","error"]]]],[11,"name_bytes","","Return the name of the given local or remote branch.",40,[[["self"]],["result",["error"]]]],[11,"upstream","","Return the reference supporting the remote tracking branch, given a local branch reference.",40,[[["self"]],["result",["branch","error"]]]],[11,"set_upstream","","Set the upstream configuration for a given local branch.",40,[[["self"],["option",["str"]]],["result",["error"]]]],[11,"from_raw","","Creates a new iterator from the raw pointer given.",41,N],[11,"next","","",41,[[["self"]],["option",["result"]]]],[11,"drop","","",41,[[["self"]]]],[11,"default","","",42,[[],["self"]]],[11,"new","","Creates a new empty buffer.",42,[[],["buf"]]],[11,"as_str","","Attempt to view this buffer as a string slice.",42,[[["self"]],["option",["str"]]]],[11,"deref","","",42,N],[11,"deref_mut","","",42,N],[11,"drop","","",42,[[["self"]]]],[11,"id","","Get the id (SHA1) of a repository commit",43,[[["self"]],["oid"]]],[11,"tree_id","","Get the id of the tree pointed to by this commit.",43,[[["self"]],["oid"]]],[11,"tree","","Get the tree pointed to by a commit.",43,[[["self"]],["result",["tree","error"]]]],[11,"raw","","Get access to the underlying raw pointer.",43,N],[11,"message","","Get the full message of a commit.",43,[[["self"]],["option",["str"]]]],[11,"message_bytes","","Get the full message of a commit as a byte slice.",43,N],[11,"message_encoding","","Get the encoding for the message of a commit, as a string representing a standard encoding name.",43,[[["self"]],["option",["str"]]]],[11,"message_raw","","Get the full raw message of a commit.",43,[[["self"]],["option",["str"]]]],[11,"message_raw_bytes","","Get the full raw message of a commit.",43,N],[11,"raw_header","","Get the full raw text of the commit header.",43,[[["self"]],["option",["str"]]]],[11,"raw_header_bytes","","Get the full raw text of the commit header.",43,N],[11,"summary","","Get the short \"summary\" of the git commit message.",43,[[["self"]],["option",["str"]]]],[11,"summary_bytes","","Get the short \"summary\" of the git commit message.",43,[[["self"]],["option"]]],[11,"time","","Get the commit time (i.e. committer time) of a commit.",43,[[["self"]],["time"]]],[11,"parents","","Creates a new iterator over the parents of this commit.",43,[[["self"]],["parents"]]],[11,"parent_ids","","Creates a new iterator over the parents of this commit.",43,[[["self"]],["parentids"]]],[11,"author","","Get the author of this commit.",43,[[["self"]],["signature"]]],[11,"committer","","Get the committer of this commit.",43,[[["self"]],["signature"]]],[11,"amend","","Amend this existing commit with all non-`None` values",43,[[["self"],["option",["str"]],["option",["signature"]],["option",["signature"]],["option",["str"]],["option",["str"]],["option",["tree"]]],["result",["oid","error"]]]],[11,"parent","","Get the specified parent of the commit.",43,[[["self"],["usize"]],["result",["commit","error"]]]],[11,"parent_id","","Get the specified parent id of the commit.",43,[[["self"],["usize"]],["result",["oid","error"]]]],[11,"as_object","","Casts this Commit to be usable as an `Object`",43,[[["self"]],["object"]]],[11,"into_object","","Consumes Commit to be returned as an `Object`",43,[[["self"]],["object"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","","",44,[[["self"]],["option",["commit"]]]],[11,"size_hint","","",44,N],[11,"next_back","","",44,[[["self"]],["option",["commit"]]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"drop","","",43,[[["self"]]]],[11,"new","","Allocate a new configuration object",45,[[],["result",["config","error"]]]],[11,"open","","Create a new config instance containing a single on-disk file",45,[[["path"]],["result",["config","error"]]]],[11,"open_default","","Open the global, XDG and system configuration files",45,[[],["result",["config","error"]]]],[11,"find_global","","Locate the path to the global configuration file",45,[[],["result",["pathbuf","error"]]]],[11,"find_system","","Locate the path to the system configuration file",45,[[],["result",["pathbuf","error"]]]],[11,"find_xdg","","Locate the path to the global xdg compatible configuration file",45,[[],["result",["pathbuf","error"]]]],[11,"add_file","","Add an on-disk config file instance to an existing config",45,[[["self"],["path"],["configlevel"],["bool"]],["result",["error"]]]],[11,"remove","","Delete a config variable from the config file with the highest level (usually the local one).",45,[[["self"],["str"]],["result",["error"]]]],[11,"remove_multivar","","Remove multivar config variables in the config file with the highest level (usually the local one).",45,[[["self"],["str"],["str"]],["result",["error"]]]],[11,"get_bool","","Get the value of a boolean config variable.",45,[[["self"],["str"]],["result",["bool","error"]]]],[11,"get_i32","","Get the value of an integer config variable.",45,[[["self"],["str"]],["result",["i32","error"]]]],[11,"get_i64","","Get the value of an integer config variable.",45,[[["self"],["str"]],["result",["i64","error"]]]],[11,"get_str","","Get the value of a string config variable.",45,[[["self"],["str"]],["result",["str","error"]]]],[11,"get_bytes","","Get the value of a string config variable as a byte slice.",45,[[["self"],["str"]],["result",["error"]]]],[11,"get_string","","Get the value of a string config variable as an owned string.",45,[[["self"],["str"]],["result",["string","error"]]]],[11,"get_path","","Get the value of a path config variable as an owned .",45,[[["self"],["str"]],["result",["pathbuf","error"]]]],[11,"get_entry","","Get the ConfigEntry for a config variable.",45,[[["self"],["str"]],["result",["configentry","error"]]]],[11,"entries","","Iterate over all the config variables",45,[[["self"],["option",["str"]]],["result",["configentries","error"]]]],[11,"open_global","","Open the global/XDG configuration file according to git's rules",45,[[["self"]],["result",["config","error"]]]],[11,"open_level","","Build a single-level focused config object from a multi-level one.",45,[[["self"],["configlevel"]],["result",["config","error"]]]],[11,"set_bool","","Set the value of a boolean config variable in the config file with the highest level (usually the local one).",45,[[["self"],["str"],["bool"]],["result",["error"]]]],[11,"set_i32","","Set the value of an integer config variable in the config file with the highest level (usually the local one).",45,[[["self"],["str"],["i32"]],["result",["error"]]]],[11,"set_i64","","Set the value of an integer config variable in the config file with the highest level (usually the local one).",45,[[["self"],["str"],["i64"]],["result",["error"]]]],[11,"set_multivar","","Set the value of an multivar config variable in the config file with the highest level (usually the local one).",45,[[["self"],["str"],["str"],["str"]],["result",["error"]]]],[11,"set_str","","Set the value of a string config variable in the config file with the highest level (usually the local one).",45,[[["self"],["str"],["str"]],["result",["error"]]]],[11,"snapshot","","Create a snapshot of the configuration",45,[[["self"]],["result",["config","error"]]]],[11,"parse_bool","","Parse a string as a bool. Interprets \"true\", \"yes\", \"on\", 1, or any non-zero number as true. Interprets \"false\", \"no\", \"off\", 0, or an empty string as false.",45,[[["s"]],["result",["bool","error"]]]],[11,"parse_i32","","Parse a string as an i32; handles suffixes like k, M, or G, and multiplies by the appropriate power of 1024.",45,[[["s"]],["result",["i32","error"]]]],[11,"parse_i64","","Parse a string as an i64; handles suffixes like k, M, or G, and multiplies by the appropriate power of 1024.",45,[[["s"]],["result",["i64","error"]]]],[11,"drop","","",45,[[["self"]]]],[11,"name","","Gets the name of this entry.",46,[[["self"]],["option",["str"]]]],[11,"name_bytes","","Gets the name of this entry as a byte slice.",46,N],[11,"value","","Gets the value of this entry.",46,[[["self"]],["option",["str"]]]],[11,"value_bytes","","Gets the value of this entry as a byte slice.",46,N],[11,"level","","Gets the configuration level of this entry.",46,[[["self"]],["configlevel"]]],[11,"include_depth","","Depth of includes where this variable was found",46,[[["self"]],["u32"]]],[11,"drop","","",47,[[["self"]]]],[11,"drop","","",46,[[["self"]]]],[11,"default","","Create a \"default\" credential usable for Negotiate mechanisms like NTLM or Kerberos authentication.",48,[[],["result",["cred","error"]]]],[11,"ssh_key_from_agent","","Create a new ssh key credential object used for querying an ssh-agent.",48,[[["str"]],["result",["cred","error"]]]],[11,"ssh_key","","Create a new passphrase-protected ssh key credential object.",48,[[["str"],["option",["path"]],["path"],["option",["str"]]],["result",["cred","error"]]]],[11,"ssh_key_from_memory","","Create a new ssh key credential object reading the keys from memory.",48,[[["str"],["option",["str"]],["str"],["option",["str"]]],["result",["cred","error"]]]],[11,"userpass_plaintext","","Create a new plain-text username and password credential object.",48,[[["str"],["str"]],["result",["cred","error"]]]],[11,"credential_helper","","Attempt to read `credential.helper` according to gitcredentials(7) [1]",48,[[["config"],["str"],["option",["str"]]],["result",["cred","error"]]]],[11,"username","","Create a credential to specify a username.",48,[[["str"]],["result",["cred","error"]]]],[11,"has_username","","Check whether a credential object contains username information.",48,[[["self"]],["bool"]]],[11,"credtype","","Return the type of credentials that this object represents.",48,[[["self"]],["git_credtype_t"]]],[11,"unwrap","","Unwrap access to the underlying raw pointer, canceling the destructor",48,N],[11,"drop","","",48,[[["self"]]]],[11,"new","","Create a new credential helper object which will be used to probe git's local credential configuration.",0,[[["str"]],["credentialhelper"]]],[11,"username","","Set the username that this credential helper will query with.",0,[[["self"],["option",["str"]]],["credentialhelper"]]],[11,"config","","Query the specified configuration object to discover commands to execute, usernames to query, etc.",0,[[["self"],["config"]],["credentialhelper"]]],[11,"execute","","Execute this helper, attempting to discover a username/password pair.",0,[[["self"]],["option"]]],[11,"format","","Prints this describe result, returning the result as a string.",49,[[["self"],["option",["describeformatoptions"]]],["result",["string","error"]]]],[11,"drop","","",49,[[["self"]]]],[11,"default","","",50,[[],["self"]]],[11,"new","","Creates a new blank set of formatting options for a description.",50,[[],["describeformatoptions"]]],[11,"abbreviated_size","","Sets the size of the abbreviated commit id to use.",50,[[["self"],["u32"]],["self"]]],[11,"always_use_long_format","","Sets whether or not the long format is used even when a shorter name could be used.",50,[[["self"],["bool"]],["self"]]],[11,"dirty_suffix","","If the workdir is dirty and this is set, this string will be appended to the description string.",50,[[["self"],["str"]],["self"]]],[11,"default","","",51,[[],["self"]]],[11,"new","","Creates a new blank set of formatting options for a description.",51,[[],["describeoptions"]]],[11,"max_candidates_tags","","",51,[[["self"],["u32"]],["self"]]],[11,"describe_tags","","Sets the reference lookup strategy",51,[[["self"]],["self"]]],[11,"describe_all","","Sets the reference lookup strategy",51,[[["self"]],["self"]]],[11,"only_follow_first_parent","","Indicates when calculating the distance from the matching tag or reference whether to only walk down the first-parent ancestry.",51,[[["self"],["bool"]],["self"]]],[11,"show_commit_oid_as_fallback","","If no matching tag or reference is found whether a describe option would normally fail. This option indicates, however, that it will instead fall back to showing the full id of the commit.",51,[[["self"],["bool"]],["self"]]],[11,"pattern","","",51,[[["self"],["str"]],["self"]]],[11,"clone","","",2,[[["self"]],["diffbinarykind"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"merge","","Merge one diff into another.",52,[[["self"],["diff"]],["result",["error"]]]],[11,"deltas","","Returns an iterator over the deltas in this diff.",52,[[["self"]],["deltas"]]],[11,"get_delta","","Return the diff delta for an entry in the diff list.",52,[[["self"],["usize"]],["option",["diffdelta"]]]],[11,"is_sorted_icase","","Check if deltas are sorted case sensitively or insensitively.",52,[[["self"]],["bool"]]],[11,"print","","Iterate over a diff generating formatted text output.",52,[[["self"],["diffformat"],["f"]],["result",["error"]]]],[11,"foreach","","Loop over all deltas in a diff issuing callbacks.",52,[[["self"],["fnmut"],["option",["fnmut"]],["option",["fnmut"]],["option",["fnmut"]]],["result",["error"]]]],[11,"stats","","Accumulate diff statistics for all patches.",52,[[["self"]],["result",["diffstats","error"]]]],[11,"find_similar","","Transform a diff marking file renames, copies, etc.",52,[[["self"],["option",["difffindoptions"]]],["result",["error"]]]],[11,"drop","","",52,[[["self"]]]],[11,"nfiles","","Returns the number of files in this delta.",53,[[["self"]],["u16"]]],[11,"status","","Returns the status of this entry",53,[[["self"]],["delta"]]],[11,"old_file","","Return the file which represents the \"from\" side of the diff.",53,[[["self"]],["difffile"]]],[11,"new_file","","Return the file which represents the \"to\" side of the diff.",53,[[["self"]],["difffile"]]],[11,"id","","Returns the Oid of this item.",54,[[["self"]],["oid"]]],[11,"path_bytes","","Returns the path, in bytes, of the entry relative to the working directory of the repository.",54,[[["self"]],["option"]]],[11,"path","","Returns the path of the entry relative to the working directory of the repository.",54,[[["self"]],["option",["path"]]]],[11,"size","","Returns the size of this entry, in bytes",54,[[["self"]],["u64"]]],[11,"default","","",55,[[],["self"]]],[11,"new","","Creates a new set of empty diff options.",55,[[],["diffoptions"]]],[11,"reverse","","Flag indicating whether the sides of the diff will be reversed.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"include_ignored","","Flag indicating whether ignored files are included.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"recurse_ignored_dirs","","Flag indicating whether ignored directories are traversed deeply or not.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"include_untracked","","Flag indicating whether untracked files are in the diff",55,[[["self"],["bool"]],["diffoptions"]]],[11,"recurse_untracked_dirs","","Flag indicating whether untracked directories are deeply traversed or not.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"include_unmodified","","Flag indicating whether unmodified files are in the diff.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"include_typechange","","If entrabled, then Typechange delta records are generated.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"include_typechange_trees","","Event with `include_typechange`, the tree treturned generally shows a deleted blow. This flag correctly labels the tree transitions as a typechange record with the `new_file`'s mode set to tree.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"ignore_filemode","","Flag indicating whether file mode changes are ignored.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"ignore_submodules","","Flag indicating whether all submodules should be treated as unmodified.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"ignore_case","","Flag indicating whether case insensitive filenames should be used.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"disable_pathspec_match","","If pathspecs are specified, this flag means that they should be applied as an exact match instead of a fnmatch pattern.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"skip_binary_check","","Disable updating the `binary` flag in delta records. This is useful when iterating over a diff if you don't need hunk and data callbacks and want to avoid having to load a file completely.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"enable_fast_untracked_dirs","","When diff finds an untracked directory, to match the behavior of core Git, it scans the contents for ignored and untracked files. If all contents are ignored, then the directory is ignored; if any contents are not ignored, then the directory is untracked. This is extra work that may not matter in many cases.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"update_index","","When diff finds a file in the working directory with stat information different from the index, but the OID ends up being the same, write the correct stat information into the index. Note: without this flag, diff will always leave the index untouched.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"include_unreadable","","Include unreadable files in the diff",55,[[["self"],["bool"]],["diffoptions"]]],[11,"include_unreadable_as_untracked","","Include unreadable files in the diff",55,[[["self"],["bool"]],["diffoptions"]]],[11,"force_text","","Treat all files as text, disabling binary attributes and detection.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"force_binary","","Treat all files as binary, disabling text diffs",55,[[["self"],["bool"]],["diffoptions"]]],[11,"ignore_whitespace","","Ignore all whitespace",55,[[["self"],["bool"]],["diffoptions"]]],[11,"ignore_whitespace_change","","Ignore changes in the amount of whitespace",55,[[["self"],["bool"]],["diffoptions"]]],[11,"ignore_whitespace_eol","","Ignore whitespace at tend of line",55,[[["self"],["bool"]],["diffoptions"]]],[11,"show_untracked_content","","When generating patch text, include the content of untracked files.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"show_unmodified","","When generating output, include the names of unmodified files if they are included in the `Diff`. Normally these are skipped in the formats that list files (e.g. name-only, name-status, raw). Even with this these will not be included in the patch format.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"patience","","Use the \"patience diff\" algorithm",55,[[["self"],["bool"]],["diffoptions"]]],[11,"minimal","","Take extra time to find the minimal diff",55,[[["self"],["bool"]],["diffoptions"]]],[11,"show_binary","","Include the necessary deflate/delta information so that `git-apply` can apply given diff information to binary files.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"indent_heuristic","","Use a heuristic that takes indentation and whitespace into account which generally can produce better diffs when dealing with ambiguous diff hunks.",55,[[["self"],["bool"]],["diffoptions"]]],[11,"context_lines","","Set the number of unchanged lines that define the boundary of a hunk (and to display before and after).",55,[[["self"],["u32"]],["diffoptions"]]],[11,"interhunk_lines","","Set the maximum number of unchanged lines between hunk boundaries before the hunks will be merged into one.",55,[[["self"],["u32"]],["diffoptions"]]],[11,"id_abbrev","","The default value for this is `core.abbrev` or 7 if unset.",55,[[["self"],["u16"]],["diffoptions"]]],[11,"max_size","","Maximum size (in bytes) above which a blob will be marked as binary automatically.",55,[[["self"],["i64"]],["diffoptions"]]],[11,"old_prefix","","The virtual \"directory\" to prefix old file names with in hunk headers.",55,[[["self"],["t"]],["diffoptions"]]],[11,"new_prefix","","The virtual \"directory\" to prefix new file names with in hunk headers.",55,[[["self"],["t"]],["diffoptions"]]],[11,"pathspec","","Add to the array of paths/fnmatch patterns to constrain the diff.",55,[[["self"],["t"]],["diffoptions"]]],[11,"raw","","Acquire a pointer to the underlying raw options.",55,N],[11,"next","","",56,[[["self"]],["option",["diffdelta"]]]],[11,"size_hint","","",56,N],[11,"next_back","","",56,[[["self"]],["option",["diffdelta"]]]],[11,"old_lineno","","Line number in old file or `None` for added line",57,[[["self"]],["option",["u32"]]]],[11,"new_lineno","","Line number in new file or `None` for deleted line",57,[[["self"]],["option",["u32"]]]],[11,"num_lines","","Number of newline characters in content",57,[[["self"]],["u32"]]],[11,"content_offset","","Offset in the original file to the content",57,[[["self"]],["i64"]]],[11,"content","","Content of this line as bytes.",57,N],[11,"origin","","Sigil showing the origin of this `DiffLine`.",57,[[["self"]],["char"]]],[11,"old_start","","Starting line number in old_file",58,[[["self"]],["u32"]]],[11,"old_lines","","Number of lines in old_file",58,[[["self"]],["u32"]]],[11,"new_start","","Starting line number in new_file",58,[[["self"]],["u32"]]],[11,"new_lines","","Number of lines in new_file",58,[[["self"]],["u32"]]],[11,"header","","Header text",58,N],[11,"files_changed","","Get the total number of files chaned in a diff.",59,[[["self"]],["usize"]]],[11,"insertions","","Get the total number of insertions in a diff",59,[[["self"]],["usize"]]],[11,"deletions","","Get the total number of deletions in a diff",59,[[["self"]],["usize"]]],[11,"to_buf","","Print diff statistics to a Buf",59,[[["self"],["diffstatsformat"],["usize"]],["result",["buf","error"]]]],[11,"drop","","",59,[[["self"]]]],[11,"contains_data","","Returns whether there is data in this binary structure or not.",60,[[["self"]],["bool"]]],[11,"old_file","","The contents of the old file.",60,[[["self"]],["diffbinaryfile"]]],[11,"new_file","","The contents of the new file.",60,[[["self"]],["diffbinaryfile"]]],[11,"kind","","The type of binary data for this file",61,[[["self"]],["diffbinarykind"]]],[11,"data","","The binary data, deflated",61,N],[11,"inflated_len","","The length of the binary data after inflation",61,[[["self"]],["usize"]]],[11,"default","","",62,[[],["self"]]],[11,"new","","Creates a new set of empty diff find options.",62,[[],["difffindoptions"]]],[11,"by_config","","Reset all flags back to their unset state, indicating that `diff.renames` should be used instead. This is overridden once any flag is set.",62,[[["self"]],["difffindoptions"]]],[11,"renames","","Look for renames?",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"renames_from_rewrites","","Consider old side of modified for renames?",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"copies","","Look for copies?",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"copies_from_unmodified","","Consider unmodified as copy sources?",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"rewrites","","Mark significant rewrites for split.",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"break_rewrites","","Actually split large rewrites into delete/add pairs",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"for_untracked","","Find renames/copies for untracked items in working directory.",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"all","","Turn on all finding features.",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"ignore_leading_whitespace","","Measure similarity ignoring leading whitespace (default)",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"ignore_whitespace","","Measure similarity ignoring all whitespace",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"dont_ignore_whitespace","","Measure similarity including all data",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"exact_match_only","","Measure similarity only by comparing SHAs (fast and cheap)",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"break_rewrites_for_renames_only","","Do not break rewrites unless they contribute to a rename.",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"remove_unmodified","","Remove any unmodified deltas after find_similar is done.",62,[[["self"],["bool"]],["difffindoptions"]]],[11,"rename_threshold","","Similarity to consider a file renamed (default 50)",62,[[["self"],["u16"]],["difffindoptions"]]],[11,"rename_from_rewrite_threshold","","Similarity of modified to be glegible rename source (default 50)",62,[[["self"],["u16"]],["difffindoptions"]]],[11,"copy_threshold","","Similarity to consider a file copy (default 50)",62,[[["self"],["u16"]],["difffindoptions"]]],[11,"break_rewrite_threshold","","Similarity to split modify into delete/add pair (default 60)",62,[[["self"],["u16"]],["difffindoptions"]]],[11,"rename_limit","","Maximum similarity sources to examine for a file (somewhat like git-diff's `-l` option or `diff.renameLimit` config)",62,[[["self"],["usize"]],["difffindoptions"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"eq","","",63,[[["self"],["error"]],["bool"]]],[11,"ne","","",63,[[["self"],["error"]],["bool"]]],[11,"last_error","","Returns the last error that happened with the code specified by `code`.",63,[[["c_int"]],["option",["error"]]]],[11,"from_str","","Creates a new error from the given string as the error.",63,[[["str"]],["error"]]],[11,"code","","Return the error code associated with this error.",63,[[["self"]],["errorcode"]]],[11,"class","","Return the error class associated with this error.",63,[[["self"]],["errorclass"]]],[11,"raw_code","","Return the raw error code associated with this error.",63,[[["self"]],["git_error_code"]]],[11,"raw_class","","Return the raw error class associated with this error.",63,[[["self"]],["git_error_t"]]],[11,"message","","Return the message associated with this error",63,[[["self"]],["str"]]],[11,"description","","",63,[[["self"]],["str"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"from","","",63,[[["nulerror"]],["error"]]],[11,"from","","",63,[[["joinpathserror"]],["error"]]],[11,"new","","Creates a new in-memory index.",64,[[],["result",["index","error"]]]],[11,"open","","Create a new bare Git index object as a memory representation of the Git index file in 'index_path', without a repository to back it.",64,[[["path"]],["result",["index","error"]]]],[11,"add","","Add or update an index entry from an in-memory struct",64,[[["self"],["indexentry"]],["result",["error"]]]],[11,"add_path","","Add or update an index entry from a file on disk",64,[[["self"],["path"]],["result",["error"]]]],[11,"add_all","","Add or update index entries matching files in the working directory.",64,[[["self"],["i"],["indexaddoption"],["option",["indexmatchedpath"]]],["result",["error"]]]],[11,"clear","","Clear the contents (all the entries) of an index object.",64,[[["self"]],["result",["error"]]]],[11,"len","","Get the count of entries currently in the index",64,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` is there is no entry in the index",64,[[["self"]],["bool"]]],[11,"get","","Get one of the entries in the index by its position.",64,[[["self"],["usize"]],["option",["indexentry"]]]],[11,"iter","","Get an iterator over the entries in this index.",64,[[["self"]],["indexentries"]]],[11,"get_path","","Get one of the entries in the index by its path.",64,[[["self"],["path"],["i32"]],["option",["indexentry"]]]],[11,"has_conflicts","","Does this index have conflicts?",64,[[["self"]],["bool"]]],[11,"path","","Get the full path to the index file on disk.",64,[[["self"]],["option",["path"]]]],[11,"read","","Update the contents of an existing index object in memory by reading from the hard disk.",64,[[["self"],["bool"]],["result",["error"]]]],[11,"read_tree","","Read a tree into the index file with stats",64,[[["self"],["tree"]],["result",["error"]]]],[11,"remove","","Remove an entry from the index",64,[[["self"],["path"],["i32"]],["result",["error"]]]],[11,"remove_path","","Remove an index entry corresponding to a file on disk.",64,[[["self"],["path"]],["result",["error"]]]],[11,"remove_dir","","Remove all entries from the index under a given directory.",64,[[["self"],["path"],["i32"]],["result",["error"]]]],[11,"remove_all","","Remove all matching index entries.",64,[[["self"],["i"],["option",["indexmatchedpath"]]],["result",["error"]]]],[11,"update_all","","Update all index entries to match the working directory",64,[[["self"],["i"],["option",["indexmatchedpath"]]],["result",["error"]]]],[11,"write","","Write an existing index object from memory back to disk using an atomic file lock.",64,[[["self"]],["result",["error"]]]],[11,"write_tree","","Write the index as a tree.",64,[[["self"]],["result",["oid","error"]]]],[11,"write_tree_to","","Write the index as a tree to the given repository",64,[[["self"],["repository"]],["result",["oid","error"]]]],[11,"drop","","",64,[[["self"]]]],[11,"next","","",65,[[["self"]],["option",["indexentry"]]]],[11,"id","","Gets the commit ID that the given git_annotated_commit refers to",66,[[["self"]],["oid"]]],[11,"default","","",67,[[],["self"]]],[11,"new","","Creates a default set of merge options.",67,[[],["mergeoptions"]]],[11,"find_renames","","Detect file renames",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"rename_threshold","","Similarity to consider a file renamed (default 50)",67,[[["self"],["u32"]],["mergeoptions"]]],[11,"target_limit","","Maximum similarity sources to examine for renames (default 200). If the number of rename candidates (add / delete pairs) is greater than this value, inexact rename detection is aborted. This setting overrides the `merge.renameLimit` configuration value.",67,[[["self"],["u32"]],["mergeoptions"]]],[11,"recursion_limit","","Maximum number of times to merge common ancestors to build a virtual merge base when faced with criss-cross merges.  When this limit is reached, the next ancestor will simply be used instead of attempting to merge it.  The default is unlimited.",67,[[["self"],["u32"]],["mergeoptions"]]],[11,"file_favor","","Specify a side to favor for resolving conflicts",67,[[["self"],["filefavor"]],["mergeoptions"]]],[11,"standard_style","","Create standard conflicted merge files",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"diff3_style","","Create diff3-style file",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"simplify_alnum","","Condense non-alphanumeric regions for simplified diff file",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"ignore_whitespace","","Ignore all whitespace",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"ignore_whitespace_change","","Ignore changes in amount of whitespace",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"ignore_whitespace_eol","","Ignore whitespace at end of line",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"patience","","Use the \"patience diff\" algorithm",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"minimal","","Take extra time to find minimal diff",67,[[["self"],["bool"]],["mergeoptions"]]],[11,"raw","","Acquire a pointer to the underlying raw options.",67,N],[11,"drop","","",66,[[["self"]]]],[11,"author","","Get the note author",68,[[["self"]],["signature"]]],[11,"committer","","Get the note committer",68,[[["self"]],["signature"]]],[11,"message_bytes","","Get the note message, in bytes.",68,N],[11,"message","","Get the note message as a string, returning `None` if it is not UTF-8.",68,[[["self"]],["option",["str"]]]],[11,"id","","Get the note object's id",68,[[["self"]],["oid"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",68,[[["self"]]]],[11,"next","","",69,[[["self"]],["option",["result"]]]],[11,"drop","","",69,[[["self"]]]],[11,"id","","Get the id (SHA1) of a repository object",70,[[["self"]],["oid"]]],[11,"kind","","Get the object type of an object.",70,[[["self"]],["option",["objecttype"]]]],[11,"peel","","Recursively peel an object until an object of the specified type is met.",70,[[["self"],["objecttype"]],["result",["object","error"]]]],[11,"peel_to_blob","","Recursively peel an object until a blob is found",70,[[["self"]],["result",["blob","error"]]]],[11,"peel_to_commit","","Recursively peel an object until a commit is found",70,[[["self"]],["result",["commit","error"]]]],[11,"peel_to_tag","","Recursively peel an object until a tag is found",70,[[["self"]],["result",["tag","error"]]]],[11,"peel_to_tree","","Recursively peel an object until a tree is found",70,[[["self"]],["result",["tree","error"]]]],[11,"short_id","","Get a short abbreviated OID string for the object",70,[[["self"]],["result",["buf","error"]]]],[11,"as_commit","","Attempt to view this object as a commit.",70,[[["self"]],["option",["commit"]]]],[11,"into_commit","","Attempt to consume this object and return a commit.",70,[[["self"]],["result",["commit","object"]]]],[11,"as_tag","","Attempt to view this object as a tag.",70,[[["self"]],["option",["tag"]]]],[11,"into_tag","","Attempt to consume this object and return a tag.",70,[[["self"]],["result",["tag","object"]]]],[11,"as_tree","","Attempt to view this object as a tree.",70,[[["self"]],["option",["tree"]]]],[11,"into_tree","","Attempt to consume this object and return a tree.",70,[[["self"]],["result",["tree","object"]]]],[11,"as_blob","","Attempt to view this object as a blob.",70,[[["self"]],["option",["blob"]]]],[11,"into_blob","","Attempt to consume this object and return a blob.",70,[[["self"]],["result",["blob","object"]]]],[11,"describe","","Describes a commit",70,[[["self"],["describeoptions"]],["result",["describe","error"]]]],[11,"clone","","",70,[[["self"]],["object"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",70,[[["self"]]]],[11,"drop","","",71,[[["self"]]]],[11,"new","","Creates an object database without any backends.",71,[[],["result",["odb","error"]]]],[11,"reader","","Create object database reading stream.",71,[[["self"],["oid"]],["result",["error"]]]],[11,"writer","","Create object database writing stream.",71,[[["self"],["usize"],["objecttype"]],["result",["odbwriter","error"]]]],[11,"foreach","","Iterate over all objects in the object database.s",71,[[["self"],["c"]],["result",["error"]]]],[11,"read","","Read an object from the database.",71,[[["self"],["oid"]],["result",["odbobject","error"]]]],[11,"read_header","","Reads the header of an object from the database without reading the full content.",71,[[["self"],["oid"]],["result",["error"]]]],[11,"write","","Write an object to the database.",71,N],[11,"exists","","Checks if the object database has an object.",71,[[["self"],["oid"]],["bool"]]],[11,"exists_prefix","","Potentially finds an object that starts with the given prefix.",71,[[["self"],["oid"],["usize"]],["result",["oid","error"]]]],[11,"refresh","","Refresh the object database. This should never be needed, and is provided purely for convenience. The object database will automatically refresh when an object is not found when requested.",71,[[["self"]],["result",["error"]]]],[11,"add_disk_alternate","","Adds an alternate disk backend to the object database.",71,[[["self"],["str"]],["result",["error"]]]],[11,"drop","","",72,[[["self"]]]],[11,"kind","","Get the object type.",72,[[["self"]],["objecttype"]]],[11,"len","","Get the object size.",72,[[["self"]],["usize"]]],[11,"data","","Get the object data.",72,N],[11,"id","","Get the object id.",72,[[["self"]],["oid"]]],[11,"drop","","",73,[[["self"]]]],[11,"read","","",73,N],[11,"finalize","","Finish writing to an ODB stream",74,[[["self"]],["result",["oid","error"]]]],[11,"drop","","",74,[[["self"]]]],[11,"write","","",74,N],[11,"flush","","",74,[[["self"]],["result"]]],[11,"clone","","",75,[[["self"]],["oid"]]],[11,"from_str","","Parse a hex-formatted object id into an Oid structure.",75,[[["str"]],["result",["oid","error"]]]],[11,"from_bytes","","Parse a raw object id into an Oid structure.",75,N],[11,"zero","","Creates an all zero Oid structure.",75,[[],["oid"]]],[11,"hash_object","","Hashes the provided data as an object of the provided type, and returns an Oid corresponding to the result. This does not store the object inside any object database or repository.",75,N],[11,"hash_file","","Hashes the content of the provided file as an object of the provided type, and returns an Oid corresponding to the result. This does not store the object inside any object database or repository.",75,[[["objecttype"],["p"]],["result",["oid","error"]]]],[11,"as_bytes","","View this OID as a byte-slice 20 bytes in length.",75,N],[11,"is_zero","","Test if this OID is all zeros.",75,[[["self"]],["bool"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Hex-encode this Oid into a formatter.",75,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Parse a hex-formatted object id into an Oid structure.",75,[[["str"]],["result",["oid","error"]]]],[11,"eq","","",75,[[["self"],["oid"]],["bool"]]],[11,"partial_cmp","","",75,[[["self"],["oid"]],["option",["ordering"]]]],[11,"cmp","","",75,[[["self"],["oid"]],["ordering"]]],[11,"hash","","",75,[[["self"],["h"]]]],[11,"as_ref","","",75,N],[11,"insert_object","","Insert a single object. For an optimal pack it's mandatory to insert objects in recency order, commits followed by trees and blobs.",76,[[["self"],["oid"],["option",["str"]]],["result",["error"]]]],[11,"insert_tree","","Insert a root tree object. This will add the tree as well as all referenced trees and blobs.",76,[[["self"],["oid"]],["result",["error"]]]],[11,"insert_commit","","Insert a commit object. This will add a commit as well as the completed referenced tree.",76,[[["self"],["oid"]],["result",["error"]]]],[11,"insert_walk","","Insert objects as given by the walk. Those commits and all objects they reference will be inserted into the packbuilder.",76,[[["self"],["revwalk"]],["result",["error"]]]],[11,"insert_recursive","","Recursively insert an object and its referenced objects. Insert the object as well as any object it references.",76,[[["self"],["oid"],["option",["str"]]],["result",["error"]]]],[11,"write_buf","","Write the contents of the packfile to an in-memory buffer. The contents of the buffer will become a valid packfile, even though there will be no attached index.",76,[[["self"],["buf"]],["result",["error"]]]],[11,"foreach","","Create the new pack and pass each object to the callback.",76,[[["self"],["f"]],["result",["error"]]]],[11,"set_progress_callback","","`progress` will be called with progress information during pack building. Be aware that this is called inline with pack building operations, so performance may be affected.",76,[[["self"],["f"]],["result",["error"]]]],[11,"unset_progress_callback","","Remove the current progress callback.  See `set_progress_callback` to set the progress callback.",76,[[["self"]],["result",["error"]]]],[11,"object_count","","Get the total number of objects the packbuilder will write out.",76,[[["self"]],["usize"]]],[11,"written","","Get the number of objects the packbuilder has already written out.",76,[[["self"]],["usize"]]],[11,"hash","","Get the packfile's hash. A packfile's name is derived from the sorted hashing of all object names. This is only correct after the packfile has been written.",76,[[["self"]],["option",["oid"]]]],[11,"drop","","",76,[[["self"]]]],[11,"new","","Creates a new pathspec from a list of specs to match against.",77,[[["i"]],["result",["pathspec","error"]]]],[11,"match_diff","","Match a pathspec against files in a diff.",77,[[["self"],["diff"],["pathspecflags"]],["result",["pathspecmatchlist","error"]]]],[11,"match_tree","","Match a pathspec against files in a tree.",77,[[["self"],["tree"],["pathspecflags"]],["result",["pathspecmatchlist","error"]]]],[11,"match_index","","This matches the pathspec against the files in the repository index.",77,[[["self"],["index"],["pathspecflags"]],["result",["pathspecmatchlist","error"]]]],[11,"match_workdir","","Match a pathspec against the working directory of a repository.",77,[[["self"],["repository"],["pathspecflags"]],["result",["pathspecmatchlist","error"]]]],[11,"matches_path","","Try to match a path against a pathspec",77,[[["self"],["path"],["pathspecflags"]],["bool"]]],[11,"drop","","",77,[[["self"]]]],[11,"entries","","Returns an iterator over the matching filenames in this list.",78,[[["self"]],["pathspecentries"]]],[11,"entry","","Get a matching filename by position.",78,[[["self"],["usize"]],["option"]]],[11,"diff_entries","","Returns an iterator over the matching diff entries in this list.",78,[[["self"]],["pathspecdiffentries"]]],[11,"diff_entry","","Get a matching diff delta by position.",78,[[["self"],["usize"]],["option",["diffdelta"]]]],[11,"failed_entries","","Returns an iterator over the non-matching entries in this list.",78,[[["self"]],["pathspecfailedentries"]]],[11,"failed_entry","","Get an original pathspec string that had no matches.",78,[[["self"],["usize"]],["option"]]],[11,"drop","","",78,[[["self"]]]],[11,"next","","",79,[[["self"]],["option"]]],[11,"size_hint","","",79,N],[11,"next_back","","",79,[[["self"]],["option"]]],[11,"next","","",80,[[["self"]],["option",["diffdelta"]]]],[11,"size_hint","","",80,N],[11,"next_back","","",80,[[["self"]],["option",["diffdelta"]]]],[11,"next","","",81,[[["self"]],["option"]]],[11,"size_hint","","",81,N],[11,"next_back","","",81,[[["self"]],["option"]]],[11,"drop","","",82,[[["self"]]]],[11,"from_diff","","Return a Patch for one file in a Diff.",82,[[["diff"],["usize"]],["result",["option","error"]]]],[11,"from_blobs","","Generate a Patch by diffing two blobs.",82,[[["blob"],["option",["path"]],["blob"],["option",["path"]],["option",["diffoptions"]]],["result",["patch","error"]]]],[11,"from_blob_and_buffer","","Generate a Patch by diffing a blob and a buffer.",82,N],[11,"from_buffers","","Generate a Patch by diffing two buffers.",82,N],[11,"delta","","Get the DiffDelta associated with the Patch.",82,[[["self"]],["diffdelta"]]],[11,"num_hunks","","Get the number of hunks in the Patch.",82,[[["self"]],["usize"]]],[11,"line_stats","","Get the number of lines of context, additions, and deletions in the Patch.",82,[[["self"]],["result",["error"]]]],[11,"hunk","","Get a DiffHunk and its total line count from the Patch.",82,[[["self"],["usize"]],["result",["error"]]]],[11,"num_lines_in_hunk","","Get the number of lines in a hunk.",82,[[["self"],["usize"]],["result",["usize","error"]]]],[11,"line_in_hunk","","Get a DiffLine from a hunk of the Patch.",82,[[["self"],["usize"],["usize"]],["result",["diffline","error"]]]],[11,"size","","Get the size of a Patch's diff data in bytes.",82,[[["self"],["bool"],["bool"],["bool"]],["usize"]]],[11,"print","","Print the Patch to text via a callback.",82,[[["self"],["fnmut"]],["result",["error"]]]],[11,"to_buf","","Get the Patch text as a Buf.",82,[[["self"]],["result",["buf","error"]]]],[11,"default","","",83,[[],["proxyoptions"]]],[11,"new","","Creates a new set of proxy options ready to be configured.",83,[[],["proxyoptions"]]],[11,"auto","","Try to auto-detect the proxy from the git configuration.",83,[[["self"]],["self"]]],[11,"url","","Specify the exact URL of the proxy to use.",83,[[["self"],["str"]],["self"]]],[11,"is_valid_name","","Ensure the reference name is well-formed.",84,[[["str"]],["bool"]]],[11,"raw","","Get access to the underlying raw pointer.",84,N],[11,"delete","","Delete an existing reference.",84,[[["self"]],["result",["error"]]]],[11,"is_branch","","Check if a reference is a local branch.",84,[[["self"]],["bool"]]],[11,"is_note","","Check if a reference is a note.",84,[[["self"]],["bool"]]],[11,"is_remote","","Check if a reference is a remote tracking branch",84,[[["self"]],["bool"]]],[11,"is_tag","","Check if a reference is a tag",84,[[["self"]],["bool"]]],[11,"kind","","Get the reference type of a reference.",84,[[["self"]],["option",["referencetype"]]]],[11,"name","","Get the full name of a reference.",84,[[["self"]],["option",["str"]]]],[11,"name_bytes","","Get the full name of a reference.",84,N],[11,"shorthand","","Get the full shorthand of a reference.",84,[[["self"]],["option",["str"]]]],[11,"shorthand_bytes","","Get the full shorthand of a reference.",84,N],[11,"target","","Get the OID pointed to by a direct reference.",84,[[["self"]],["option",["oid"]]]],[11,"target_peel","","Return the peeled OID target of this reference.",84,[[["self"]],["option",["oid"]]]],[11,"symbolic_target","","Get full name to the reference pointed to by a symbolic reference.",84,[[["self"]],["option",["str"]]]],[11,"symbolic_target_bytes","","Get full name to the reference pointed to by a symbolic reference.",84,[[["self"]],["option"]]],[11,"resolve","","Resolve a symbolic reference to a direct reference.",84,[[["self"]],["result",["reference","error"]]]],[11,"peel","","Peel a reference to an object",84,[[["self"],["objecttype"]],["result",["object","error"]]]],[11,"peel_to_blob","","Peel a reference to a blob",84,[[["self"]],["result",["blob","error"]]]],[11,"peel_to_commit","","Peel a reference to a commit",84,[[["self"]],["result",["commit","error"]]]],[11,"peel_to_tree","","Peel a reference to a tree",84,[[["self"]],["result",["tree","error"]]]],[11,"peel_to_tag","","Peel a reference to a tag",84,[[["self"]],["result",["tag","error"]]]],[11,"rename","","Rename an existing reference.",84,[[["self"],["str"],["bool"],["str"]],["result",["reference","error"]]]],[11,"set_target","","Conditionally create a new reference with the same name as the given reference but a different OID target. The reference must be a direct reference, otherwise this will fail.",84,[[["self"],["oid"],["str"]],["result",["reference","error"]]]],[11,"partial_cmp","","",84,[[["self"],["reference"]],["option",["ordering"]]]],[11,"cmp","","",84,[[["self"],["reference"]],["ordering"]]],[11,"eq","","",84,[[["self"],["reference"]],["bool"]]],[11,"drop","","",84,[[["self"]]]],[11,"names","","Consumes a `References` iterator to create an iterator over just the name of some references.",85,[[["self"]],["referencenames"]]],[11,"next","","",85,[[["self"]],["option",["result"]]]],[11,"drop","","",85,[[["self"]]]],[11,"next","","",86,[[["self"]],["option",["result"]]]],[11,"append","","Add a new entry to the in-memory reflog.",87,[[["self"],["oid"],["signature"],["option",["str"]]],["result",["error"]]]],[11,"remove","","Remove an entry from the reflog by its index",87,[[["self"],["usize"],["bool"]],["result",["error"]]]],[11,"get","","Lookup an entry by its index",87,[[["self"],["usize"]],["option",["reflogentry"]]]],[11,"len","","Get the number of log entries in a reflog",87,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` is there is no log entry in a reflog",87,[[["self"]],["bool"]]],[11,"iter","","Get an iterator to all entries inside of this reflog",87,[[["self"]],["reflogiter"]]],[11,"write","","Write an existing in-memory reflog object back to disk using an atomic file lock.",87,[[["self"]],["result",["error"]]]],[11,"drop","","",87,[[["self"]]]],[11,"committer","","Get the committer of this entry",88,[[["self"]],["signature"]]],[11,"id_new","","Get the new oid",88,[[["self"]],["oid"]]],[11,"id_old","","Get the old oid",88,[[["self"]],["oid"]]],[11,"message","","Get the log message, returning `None` on invalid UTF-8.",88,[[["self"]],["option",["str"]]]],[11,"message_bytes","","Get the log message as a byte array.",88,[[["self"]],["option"]]],[11,"next","","",89,[[["self"]],["option",["reflogentry"]]]],[11,"size_hint","","",89,N],[11,"next_back","","",89,[[["self"]],["option",["reflogentry"]]]],[11,"direction","","Get the refspec's direction.",90,[[["self"]],["direction"]]],[11,"dst","","Get the destination specifier.",90,[[["self"]],["option",["str"]]]],[11,"dst_bytes","","Get the destination specifier, in bytes.",90,N],[11,"dst_matches","","Check if a refspec's destination descriptor matches a reference",90,[[["self"],["str"]],["bool"]]],[11,"src","","Get the source specifier.",90,[[["self"]],["option",["str"]]]],[11,"src_bytes","","Get the source specifier, in bytes.",90,N],[11,"src_matches","","Check if a refspec's source descriptor matches a reference",90,[[["self"],["str"]],["bool"]]],[11,"is_force","","Get the force update setting.",90,[[["self"]],["bool"]]],[11,"str","","Get the refspec's string.",90,[[["self"]],["option",["str"]]]],[11,"bytes","","Get the refspec's string as a byte array",90,N],[11,"is_valid_name","","Ensure the remote name is well-formed.",91,[[["str"]],["bool"]]],[11,"name","","Get the remote's name.",91,[[["self"]],["option",["str"]]]],[11,"name_bytes","","Get the remote's name, in bytes.",91,[[["self"]],["option"]]],[11,"url","","Get the remote's url.",91,[[["self"]],["option",["str"]]]],[11,"url_bytes","","Get the remote's url as a byte array.",91,N],[11,"pushurl","","Get the remote's pushurl.",91,[[["self"]],["option",["str"]]]],[11,"pushurl_bytes","","Get the remote's pushurl as a byte array.",91,[[["self"]],["option"]]],[11,"connect","","Open a connection to a remote.",91,[[["self"],["direction"]],["result",["error"]]]],[11,"connect_auth","","Open a connection to a remote with callbacks and proxy settings",91,[[["self"],["direction"],["option",["remotecallbacks"]],["option",["proxyoptions"]]],["result",["remoteconnection","error"]]]],[11,"connected","","Check whether the remote is connected",91,[[["self"]],["bool"]]],[11,"disconnect","","Disconnect from the remote",91,[[["self"]]]],[11,"download","","Download and index the packfile",91,N],[11,"refspecs","","Get the number of refspecs for a remote",91,[[["self"]],["refspecs"]]],[11,"get_refspec","","Get the `nth` refspec from this remote.",91,[[["self"],["usize"]],["option",["refspec"]]]],[11,"fetch","","Download new data and update tips",91,N],[11,"update_tips","","Update the tips to the new state",91,[[["self"],["option",["remotecallbacks"]],["bool"],["autotagoption"],["option",["str"]]],["result",["error"]]]],[11,"push","","Perform a push",91,N],[11,"stats","","Get the statistics structure that is filled in by the fetch operation.",91,[[["self"]],["progress"]]],[11,"list","","Get the remote repository's reference advertisement list.",91,[[["self"]],["result",["error"]]]],[11,"fetch_refspecs","","Get the remote's list of fetch refspecs",91,[[["self"]],["result",["stringarray","error"]]]],[11,"push_refspecs","","Get the remote's list of push refspecs",91,[[["self"]],["result",["stringarray","error"]]]],[11,"clone","","",91,[[["self"]],["remote"]]],[11,"drop","","",91,[[["self"]]]],[11,"next","","",92,[[["self"]],["option",["refspec"]]]],[11,"size_hint","","",92,N],[11,"next_back","","",92,[[["self"]],["option",["refspec"]]]],[11,"is_local","","Flag if this is available locally.",93,[[["self"]],["bool"]]],[11,"oid","","",93,[[["self"]],["oid"]]],[11,"loid","","",93,[[["self"]],["oid"]]],[11,"name","","",93,[[["self"]],["str"]]],[11,"symref_target","","",93,[[["self"]],["option",["str"]]]],[11,"default","","",94,[[],["self"]]],[11,"new","","Creates a new blank set of fetch options",94,[[],["fetchoptions"]]],[11,"remote_callbacks","","Set the callbacks to use for the fetch operation.",94,[[["self"],["remotecallbacks"]],["self"]]],[11,"proxy_options","","Set the proxy options to use for the fetch operation.",94,[[["self"],["proxyoptions"]],["self"]]],[11,"prune","","Set whether to perform a prune after the fetch.",94,[[["self"],["fetchprune"]],["self"]]],[11,"update_fetchhead","","Set whether to write the results to FETCH_HEAD.",94,[[["self"],["bool"]],["self"]]],[11,"download_tags","","Set how to behave regarding tags on the remote, such as auto-downloading tags for objects we're downloading or downloading all of them.",94,[[["self"],["autotagoption"]],["self"]]],[11,"default","","",95,[[],["self"]]],[11,"new","","Creates a new blank set of push options",95,[[],["pushoptions"]]],[11,"remote_callbacks","","Set the callbacks to use for the fetch operation.",95,[[["self"],["remotecallbacks"]],["self"]]],[11,"proxy_options","","Set the proxy options to use for the fetch operation.",95,[[["self"],["proxyoptions"]],["self"]]],[11,"packbuilder_parallelism","","If the transport being used to push to the remote requires the creation of a pack file, this controls the number of worker threads used by the packbuilder when creating that pack file to be sent to the remote.",95,[[["self"],["u32"]],["self"]]],[11,"connected","","Check whether the remote is (still) connected",96,[[["self"]],["bool"]]],[11,"list","","Get the remote repository's reference advertisement list.",96,[[["self"]],["result",["error"]]]],[11,"drop","","",96,[[["self"]]]],[11,"default","","",97,[[],["self"]]],[11,"new","","Creates a new set of empty callbacks",97,[[],["remotecallbacks"]]],[11,"credentials","","The callback through which to fetch credentials if required.",97,[[["self"],["f"]],["remotecallbacks"]]],[11,"transfer_progress","","The callback through which progress is monitored.",97,[[["self"],["f"]],["remotecallbacks"]]],[11,"sideband_progress","","Textual progress from the remote.",97,[[["self"],["f"]],["remotecallbacks"]]],[11,"update_tips","","Each time a reference is updated locally, the callback will be called with information about it.",97,[[["self"],["f"]],["remotecallbacks"]]],[11,"certificate_check","","If certificate verification fails, then this callback will be invoked to let the caller make the final decision of whether to allow the connection to proceed.",97,[[["self"],["f"]],["remotecallbacks"]]],[11,"push_update_reference","","Set a callback to get invoked for each updated reference on a push.",97,[[["self"],["f"]],["remotecallbacks"]]],[11,"total_objects","","Number of objects in the packfile being downloaded",98,[[["self"]],["usize"]]],[11,"indexed_objects","","Received objects that have been hashed",98,[[["self"]],["usize"]]],[11,"received_objects","","Objects which have been downloaded",98,[[["self"]],["usize"]]],[11,"local_objects","","Locally-available objects that have been injected in order to fix a thin pack.",98,[[["self"]],["usize"]]],[11,"total_deltas","","Number of deltas in the packfile being downloaded",98,[[["self"]],["usize"]]],[11,"indexed_deltas","","Received deltas that have been hashed.",98,[[["self"]],["usize"]]],[11,"received_bytes","","Size of the packfile received up to now",98,[[["self"]],["usize"]]],[11,"to_owned","","Convert this to an owned version of `Progress`.",98,[[["self"]],["progress"]]],[11,"open","","Attempt to open an already-existing repository at `path`.",99,[[["p"]],["result",["repository","error"]]]],[11,"open_bare","","Attempt to open an already-existing bare repository at `path`.",99,[[["p"]],["result",["repository","error"]]]],[11,"open_from_env","","Find and open an existing repository, respecting git environment variables.  This acts like `open_ext` with the `REPOSITORY_OPEN_FROM_ENV` flag, but additionally respects `$GIT_DIR`. With `$GIT_DIR` unset, this will search for a repository starting in the current directory.",99,[[],["result",["repository","error"]]]],[11,"open_ext","","Find and open an existing repository, with additional options.",99,[[["p"],["repositoryopenflags"],["i"]],["result",["repository","error"]]]],[11,"discover","","Attempt to open an already-existing repository at or above `path`",99,[[["p"]],["result",["repository","error"]]]],[11,"init","","Creates a new repository in the specified folder.",99,[[["p"]],["result",["repository","error"]]]],[11,"init_bare","","Creates a new `--bare` repository in the specified folder.",99,[[["p"]],["result",["repository","error"]]]],[11,"init_opts","","Creates a new `--bare` repository in the specified folder.",99,[[["p"],["repositoryinitoptions"]],["result",["repository","error"]]]],[11,"clone","","Clone a remote repository.",99,[[["str"],["p"]],["result",["repository","error"]]]],[11,"clone_recurse","","Clone a remote repository, initialize and update its submodules recursively.",99,[[["str"],["p"]],["result",["repository","error"]]]],[11,"from_odb","","Attempt to wrap an object database as a repository.",99,[[["odb"]],["result",["repository","error"]]]],[11,"revparse","","Execute a rev-parse operation against the `spec` listed.",99,[[["self"],["str"]],["result",["revspec","error"]]]],[11,"revparse_single","","Find a single object, as specified by a revision string.",99,[[["self"],["str"]],["result",["object","error"]]]],[11,"revparse_ext","","Find a single object and intermediate reference by a revision string.",99,[[["self"],["str"]],["result",["error"]]]],[11,"is_bare","","Tests whether this repository is a bare repository or not.",99,[[["self"]],["bool"]]],[11,"is_shallow","","Tests whether this repository is a shallow clone.",99,[[["self"]],["bool"]]],[11,"is_worktree","","Tests whether this repository is a worktree.",99,[[["self"]],["bool"]]],[11,"is_empty","","Tests whether this repository is empty.",99,[[["self"]],["result",["bool","error"]]]],[11,"path","","Returns the path to the `.git` folder for normal repositories or the repository itself for bare repositories.",99,[[["self"]],["path"]]],[11,"state","","Returns the current state of this repository",99,[[["self"]],["repositorystate"]]],[11,"workdir","","Get the path of the working directory for this repository.",99,[[["self"]],["option",["path"]]]],[11,"set_workdir","","Set the path to the working directory for this repository.",99,[[["self"],["path"],["bool"]],["result",["error"]]]],[11,"namespace","","Get the currently active namespace for this repository.",99,[[["self"]],["option",["str"]]]],[11,"namespace_bytes","","Get the currently active namespace for this repository as a byte array.",99,[[["self"]],["option"]]],[11,"set_namespace","","Set the active namespace for this repository.",99,[[["self"],["str"]],["result",["error"]]]],[11,"set_namespace_bytes","","Set the active namespace for this repository as a byte array.",99,N],[11,"remove_namespace","","Remove the active namespace for this repository.",99,[[["self"]],["result",["error"]]]],[11,"message","","Retrieves the Git merge message. Remember to remove the message when finished.",99,[[["self"]],["result",["string","error"]]]],[11,"remove_message","","Remove the Git merge message.",99,[[["self"]],["result",["error"]]]],[11,"remotes","","List all remotes for a given repository",99,[[["self"]],["result",["stringarray","error"]]]],[11,"find_remote","","Get the information for a particular remote",99,[[["self"],["str"]],["result",["remote","error"]]]],[11,"remote","","Add a remote with the default fetch refspec to the repository's configuration.",99,[[["self"],["str"],["str"]],["result",["remote","error"]]]],[11,"remote_anonymous","","Create an anonymous remote",99,[[["self"],["str"]],["result",["remote","error"]]]],[11,"remote_rename","","Give a remote a new name",99,[[["self"],["str"],["str"]],["result",["stringarray","error"]]]],[11,"remote_delete","","Delete an existing persisted remote.",99,[[["self"],["str"]],["result",["error"]]]],[11,"remote_add_fetch","","Add a fetch refspec to the remote's configuration",99,[[["self"],["str"],["str"]],["result",["error"]]]],[11,"remote_add_push","","Add a push refspec to the remote's configuration.",99,[[["self"],["str"],["str"]],["result",["error"]]]],[11,"remote_set_url","","Set the remote's url in the configuration",99,[[["self"],["str"],["str"]],["result",["error"]]]],[11,"remote_set_pushurl","","Set the remote's url for pushing in the configuration.",99,[[["self"],["str"],["option",["str"]]],["result",["error"]]]],[11,"reset","","Sets the current head to the specified object and optionally resets the index and working tree to match.",99,[[["self"],["object"],["resettype"],["option",["checkoutbuilder"]]],["result",["error"]]]],[11,"reset_default","","Updates some entries in the index from the target commit tree.",99,[[["self"],["option",["object"]],["i"]],["result",["error"]]]],[11,"head","","Retrieve and resolve the reference pointed at by HEAD.",99,[[["self"]],["result",["reference","error"]]]],[11,"set_head","","Make the repository HEAD point to the specified reference.",99,[[["self"],["str"]],["result",["error"]]]],[11,"head_detached","","Determines whether the repository HEAD is detached.",99,[[["self"]],["result",["bool","error"]]]],[11,"set_head_detached","","Make the repository HEAD directly point to the commit.",99,[[["self"],["oid"]],["result",["error"]]]],[11,"references","","Create an iterator for the repo's references",99,[[["self"]],["result",["references","error"]]]],[11,"references_glob","","Create an iterator for the repo's references that match the specified glob",99,[[["self"],["str"]],["result",["references","error"]]]],[11,"submodules","","Load all submodules for this repository and return them.",99,[[["self"]],["result",["vec","error"]]]],[11,"statuses","","Gather file status information and populate the returned structure.",99,[[["self"],["option",["statusoptions"]]],["result",["statuses","error"]]]],[11,"status_should_ignore","","Test if the ignore rules apply to a given file.",99,[[["self"],["path"]],["result",["bool","error"]]]],[11,"status_file","","Get file status for a single file.",99,[[["self"],["path"]],["result",["status","error"]]]],[11,"branches","","Create an iterator which loops over the requested branches.",99,[[["self"],["option",["branchtype"]]],["result",["branches","error"]]]],[11,"index","","Get the Index file for this repository.",99,[[["self"]],["result",["index","error"]]]],[11,"set_index","","Set the Index file for this repository.",99,[[["self"],["index"]]]],[11,"config","","Get the configuration file for this repository.",99,[[["self"]],["result",["config","error"]]]],[11,"blob","","Write an in-memory buffer to the ODB as a blob.",99,N],[11,"blob_path","","Read a file from the filesystem and write its content to the Object Database as a loose blob",99,[[["self"],["path"]],["result",["oid","error"]]]],[11,"blob_writer","","Create a stream to write blob",99,[[["self"],["option",["path"]]],["result",["blobwriter","error"]]]],[11,"find_blob","","Lookup a reference to one of the objects in a repository.",99,[[["self"],["oid"]],["result",["blob","error"]]]],[11,"odb","","Get the object database for this repository",99,[[["self"]],["result",["odb","error"]]]],[11,"branch","","Create a new branch pointing at a target commit",99,[[["self"],["str"],["commit"],["bool"]],["result",["branch","error"]]]],[11,"find_branch","","Lookup a branch by its name in a repository.",99,[[["self"],["str"],["branchtype"]],["result",["branch","error"]]]],[11,"commit","","Create new commit in the repository",99,N],[11,"commit_signed","","Create a commit object from the given buffer and signature",99,[[["self"],["str"],["str"],["option",["str"]]],["result",["oid","error"]]]],[11,"extract_signature","","Extract the signature from a commit",99,[[["self"],["oid"],["option",["str"]]],["result",["error"]]]],[11,"find_commit","","Lookup a reference to one of the commits in a repository.",99,[[["self"],["oid"]],["result",["commit","error"]]]],[11,"find_annotated_commit","","Creates a `AnnotatedCommit` from the given commit id.",99,[[["self"],["oid"]],["result",["annotatedcommit","error"]]]],[11,"find_object","","Lookup a reference to one of the objects in a repository.",99,[[["self"],["oid"],["option",["objecttype"]]],["result",["object","error"]]]],[11,"reference","","Create a new direct reference.",99,[[["self"],["str"],["oid"],["bool"],["str"]],["result",["reference","error"]]]],[11,"reference_matching","","Conditionally create new direct reference.",99,[[["self"],["str"],["oid"],["bool"],["oid"],["str"]],["result",["reference","error"]]]],[11,"reference_symbolic","","Create a new symbolic reference.",99,[[["self"],["str"],["str"],["bool"],["str"]],["result",["reference","error"]]]],[11,"reference_symbolic_matching","","Create a new symbolic reference.",99,[[["self"],["str"],["str"],["bool"],["str"],["str"]],["result",["reference","error"]]]],[11,"find_reference","","Lookup a reference to one of the objects in a repository.",99,[[["self"],["str"]],["result",["reference","error"]]]],[11,"refname_to_id","","Lookup a reference by name and resolve immediately to OID.",99,[[["self"],["str"]],["result",["oid","error"]]]],[11,"reference_to_annotated_commit","","Creates a git_annotated_commit from the given reference.",99,[[["self"],["reference"]],["result",["annotatedcommit","error"]]]],[11,"signature","","Create a new action signature with default user and now timestamp.",99,[[["self"]],["result",["signature","error"]]]],[11,"submodule","","Set up a new git submodule for checkout.",99,[[["self"],["str"],["path"],["bool"]],["result",["submodule","error"]]]],[11,"find_submodule","","Lookup submodule information by name or path.",99,[[["self"],["str"]],["result",["submodule","error"]]]],[11,"submodule_status","","Get the status for a submodule.",99,[[["self"],["str"],["submoduleignore"]],["result",["submodulestatus","error"]]]],[11,"find_tree","","Lookup a reference to one of the objects in a repository.",99,[[["self"],["oid"]],["result",["tree","error"]]]],[11,"treebuilder","","Create a new TreeBuilder, optionally initialized with the entries of the given Tree.",99,[[["self"],["option",["tree"]]],["result",["treebuilder","error"]]]],[11,"tag","","Create a new tag in the repository from an object",99,[[["self"],["str"],["object"],["signature"],["str"],["bool"]],["result",["oid","error"]]]],[11,"tag_lightweight","","Create a new lightweight tag pointing at a target object",99,[[["self"],["str"],["object"],["bool"]],["result",["oid","error"]]]],[11,"find_tag","","Lookup a tag object from the repository.",99,[[["self"],["oid"]],["result",["tag","error"]]]],[11,"tag_delete","","Delete an existing tag reference.",99,[[["self"],["str"]],["result",["error"]]]],[11,"tag_names","","Get a list with all the tags in the repository.",99,[[["self"],["option",["str"]]],["result",["stringarray","error"]]]],[11,"checkout_head","","Updates files in the index and the working tree to match the content of the commit pointed at by HEAD.",99,[[["self"],["option",["checkoutbuilder"]]],["result",["error"]]]],[11,"checkout_index","","Updates files in the working tree to match the content of the index.",99,[[["self"],["option",["index"]],["option",["checkoutbuilder"]]],["result",["error"]]]],[11,"checkout_tree","","Updates files in the index and working tree to match the content of the tree pointed at by the treeish.",99,[[["self"],["object"],["option",["checkoutbuilder"]]],["result",["error"]]]],[11,"merge","","Merges the given commit(s) into HEAD, writing the results into the working directory. Any changes are staged for commit and any conflicts are written to the index. Callers should inspect the repository's index after this completes, resolve any conflicts and prepare a commit.",99,N],[11,"merge_commits","","Merge two commits, producing an index that reflects the result of the merge. The index may be written as-is to the working directory or checked out. If the index is to be converted to a tree, the caller should resolve any conflicts that arose as part of the merge.",99,[[["self"],["commit"],["commit"],["option",["mergeoptions"]]],["result",["index","error"]]]],[11,"merge_trees","","Merge two trees, producing an index that reflects the result of the merge. The index may be written as-is to the working directory or checked out. If the index is to be converted to a tree, the caller should resolve any conflicts that arose as part of the merge.",99,[[["self"],["tree"],["tree"],["tree"],["option",["mergeoptions"]]],["result",["index","error"]]]],[11,"cleanup_state","","Remove all the metadata associated with an ongoing command like merge, revert, cherry-pick, etc. For example: MERGE_HEAD, MERGE_MSG, etc.",99,[[["self"]],["result",["error"]]]],[11,"merge_analysis","","Analyzes the given branch(es) and determines the opportunities for merging them into the HEAD of the repository.",99,N],[11,"note","","Add a note for an object",99,[[["self"],["signature"],["signature"],["option",["str"]],["oid"],["str"],["bool"]],["result",["oid","error"]]]],[11,"note_default_ref","","Get the default notes reference for this repository",99,[[["self"]],["result",["string","error"]]]],[11,"notes","","Creates a new iterator for notes in this repository.",99,[[["self"],["option",["str"]]],["result",["notes","error"]]]],[11,"find_note","","Read the note for an object.",99,[[["self"],["option",["str"]],["oid"]],["result",["note","error"]]]],[11,"note_delete","","Remove the note for an object.",99,[[["self"],["oid"],["option",["str"]],["signature"],["signature"]],["result",["error"]]]],[11,"revwalk","","Create a revwalk that can be used to traverse the commit graph.",99,[[["self"]],["result",["revwalk","error"]]]],[11,"blame_file","","Get the blame for a single file.",99,[[["self"],["path"],["option",["blameoptions"]]],["result",["blame","error"]]]],[11,"merge_base","","Find a merge base between two commits",99,[[["self"],["oid"],["oid"]],["result",["oid","error"]]]],[11,"merge_bases","","Find all merge bases between two commits",99,[[["self"],["oid"],["oid"]],["result",["oidarray","error"]]]],[11,"graph_ahead_behind","","Count the number of unique commits between two commit objects",99,[[["self"],["oid"],["oid"]],["result",["error"]]]],[11,"graph_descendant_of","","Determine if a commit is the descendant of another commit",99,[[["self"],["oid"],["oid"]],["result",["bool","error"]]]],[11,"reflog","","Read the reflog for the given reference",99,[[["self"],["str"]],["result",["reflog","error"]]]],[11,"reflog_delete","","Delete the reflog for the given reference",99,[[["self"],["str"]],["result",["error"]]]],[11,"reflog_rename","","Rename a reflog",99,[[["self"],["str"],["str"]],["result",["error"]]]],[11,"reference_has_log","","Check if the given reference has a reflog.",99,[[["self"],["str"]],["result",["bool","error"]]]],[11,"reference_ensure_log","","Ensure that the given reference has a reflog.",99,[[["self"],["str"]],["result",["error"]]]],[11,"describe","","Describes a commit",99,[[["self"],["describeoptions"]],["result",["describe","error"]]]],[11,"diff_tree_to_tree","","Create a diff with the difference between two tree objects.",99,[[["self"],["option",["tree"]],["option",["tree"]],["option",["diffoptions"]]],["result",["diff","error"]]]],[11,"diff_tree_to_index","","Create a diff between a tree and repository index.",99,[[["self"],["option",["tree"]],["option",["index"]],["option",["diffoptions"]]],["result",["diff","error"]]]],[11,"diff_index_to_index","","Create a diff between two index objects.",99,[[["self"],["index"],["index"],["option",["diffoptions"]]],["result",["diff","error"]]]],[11,"diff_index_to_workdir","","Create a diff between the repository index and the workdir directory.",99,[[["self"],["option",["index"]],["option",["diffoptions"]]],["result",["diff","error"]]]],[11,"diff_tree_to_workdir","","Create a diff between a tree and the working directory.",99,[[["self"],["option",["tree"]],["option",["diffoptions"]]],["result",["diff","error"]]]],[11,"diff_tree_to_workdir_with_index","","Create a diff between a tree and the working directory using index data to account for staged deletes, tracked files, etc.",99,[[["self"],["option",["tree"]],["option",["diffoptions"]]],["result",["diff","error"]]]],[11,"packbuilder","","Create a PackBuilder",99,[[["self"]],["result",["packbuilder","error"]]]],[11,"stash_save","","Save the local modifications to a new stash.",99,[[["self"],["signature"],["str"],["option",["stashflags"]]],["result",["oid","error"]]]],[11,"stash_apply","","Apply a single stashed state from the stash list.",99,[[["self"],["usize"],["option",["stashapplyoptions"]]],["result",["error"]]]],[11,"stash_foreach","","Loop over all the stashed states and issue a callback for each one.",99,[[["self"],["c"]],["result",["error"]]]],[11,"stash_drop","","Remove a single stashed state from the stash list.",99,[[["self"],["usize"]],["result",["error"]]]],[11,"stash_pop","","Apply a single stashed state from the stash list and remove it from the list if successful.",99,[[["self"],["usize"],["option",["stashapplyoptions"]]],["result",["error"]]]],[11,"add_ignore_rule","","Add ignore rules for a repository.",99,[[["self"],["str"]],["result",["error"]]]],[11,"clear_ignore_rules","","Clear ignore rules that were explicitly added.",99,[[["self"]],["result",["error"]]]],[11,"is_path_ignored","","Test if the ignore rules apply to a given path.",99,[[["self"],["p"]],["result",["bool","error"]]]],[11,"drop","","",99,[[["self"]]]],[11,"new","","Creates a default set of initialization options.",100,[[],["repositoryinitoptions"]]],[11,"bare","","Create a bare repository with no working directory.",100,[[["self"],["bool"]],["repositoryinitoptions"]]],[11,"no_reinit","","Return an error if the repository path appears to already be a git repository.",100,[[["self"],["bool"]],["repositoryinitoptions"]]],[11,"no_dotgit_dir","","Normally a '/.git/' will be appended to the repo path for non-bare repos (if it is not already there), but passing this flag prevents that behavior.",100,[[["self"],["bool"]],["repositoryinitoptions"]]],[11,"mkdir","","Make the repo path (and workdir path) as needed. The \".git\" directory will always be created regardless of this flag.",100,[[["self"],["bool"]],["repositoryinitoptions"]]],[11,"mkpath","","Recursively make all components of the repo and workdir path sas necessary.",100,[[["self"],["bool"]],["repositoryinitoptions"]]],[11,"mode","","Set to one of the `RepositoryInit` constants, or a custom value.",100,[[["self"],["repositoryinitmode"]],["repositoryinitoptions"]]],[11,"external_template","","Enable or disable using external templates.",100,[[["self"],["bool"]],["repositoryinitoptions"]]],[11,"workdir_path","","The path do the working directory.",100,[[["self"],["path"]],["repositoryinitoptions"]]],[11,"description","","If set, this will be used to initialize the \"description\" file in the repository instead of using the template content.",100,[[["self"],["str"]],["repositoryinitoptions"]]],[11,"template_path","","When the `external_template` option is set, this is the first location to check for the template directory.",100,[[["self"],["path"]],["repositoryinitoptions"]]],[11,"initial_head","","The name of the head to point HEAD at.",100,[[["self"],["str"]],["repositoryinitoptions"]]],[11,"origin_url","","If set, then after the rest of the repository initialization is completed an `origin` remote will be added pointing to this URL.",100,[[["self"],["str"]],["repositoryinitoptions"]]],[11,"raw","","Creates a set of raw init options to be used with `git_repository_init_ext`.",100,[[["self"]],["git_repository_init_options"]]],[11,"from_objects","","Assembles a new revspec from the from/to components.",101,[[["option",["object"]],["option",["object"]],["revparsemode"]],["revspec"]]],[11,"from","","Access the `from` range of this revspec.",101,[[["self"]],["option",["object"]]]],[11,"to","","Access the `to` range of this revspec.",101,[[["self"]],["option",["object"]]]],[11,"mode","","Returns the intent of the revspec.",101,[[["self"]],["revparsemode"]]],[11,"reset","","Reset a revwalk to allow re-configuring it.",102,[[["self"]]]],[11,"set_sorting","","Set the order in which commits are visited.",102,[[["self"],["sort"]]]],[11,"simplify_first_parent","","Simplify the history by first-parent",102,[[["self"]]]],[11,"push","","Mark a commit to start traversal from.",102,[[["self"],["oid"]],["result",["error"]]]],[11,"push_head","","Push the repository's HEAD",102,[[["self"]],["result",["error"]]]],[11,"push_glob","","Push matching references",102,[[["self"],["str"]],["result",["error"]]]],[11,"push_range","","Push and hide the respective endpoints of the given range.",102,[[["self"],["str"]],["result",["error"]]]],[11,"push_ref","","Push the OID pointed to by a reference",102,[[["self"],["str"]],["result",["error"]]]],[11,"hide","","Mark a commit as not of interest to this revwalk.",102,[[["self"],["oid"]],["result",["error"]]]],[11,"hide_head","","Hide the repository's HEAD",102,[[["self"]],["result",["error"]]]],[11,"hide_glob","","Hide matching references.",102,[[["self"],["str"]],["result",["error"]]]],[11,"hide_ref","","Hide the OID pointed to by a reference.",102,[[["self"],["str"]],["result",["error"]]]],[11,"drop","","",102,[[["self"]]]],[11,"next","","",102,[[["self"]],["option",["result"]]]],[11,"now","","Create a new action signature with a timestamp of 'now'.",103,[[["str"],["str"]],["result",["signature","error"]]]],[11,"new","","Create a new action signature.",103,[[["str"],["str"],["time"]],["result",["signature","error"]]]],[11,"name","","Gets the name on the signature.",103,[[["self"]],["option",["str"]]]],[11,"name_bytes","","Gets the name on the signature as a byte slice.",103,N],[11,"email","","Gets the email on the signature.",103,[[["self"]],["option",["str"]]]],[11,"email_bytes","","Gets the email on the signature as a byte slice.",103,N],[11,"when","","Get the `when` of this signature.",103,[[["self"]],["time"]]],[11,"to_owned","","Convert a signature of any lifetime into an owned signature with a static lifetime.",103,[[["self"]],["signature"]]],[11,"clone","","",103,[[["self"]],["signature"]]],[11,"drop","","",103,[[["self"]]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["statusshow"]]],[11,"default","","",104,[[],["self"]]],[11,"new","","Creates a new blank set of status options.",104,[[],["statusoptions"]]],[11,"show","","Select the files on which to report status.",104,[[["self"],["statusshow"]],["statusoptions"]]],[11,"pathspec","","Add a path pattern to match (using fnmatch-style matching).",104,[[["self"],["t"]],["statusoptions"]]],[11,"include_untracked","","Flag whether untracked files will be included.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"include_ignored","","Flag whether ignored files will be included.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"include_unmodified","","Flag to include unmodified files.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"exclude_submodules","","Flag that submodules should be skipped.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"recurse_untracked_dirs","","Flag that all files in untracked directories should be included.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"disable_pathspec_match","","Indicates that the given paths should be treated as literals paths, note patterns.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"recurse_ignored_dirs","","Indicates that the contents of ignored directories should be included in the status.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"renames_head_to_index","","Indicates that rename detection should be processed between the head.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"renames_index_to_workdir","","Indicates that rename detection should be run between the index and the working directory.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"sort_case_sensitively","","Override the native case sensitivity for the file system and force the output to be in case sensitive order.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"sort_case_insensitively","","Override the native case sensitivity for the file system and force the output to be in case-insensitive order.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"renames_from_rewrites","","Indicates that rename detection should include rewritten files.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"no_refresh","","Bypasses the default status behavior of doing a \"soft\" index reload.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"update_index","","Refresh the stat cache in the index for files are unchanged but have out of date stat information in the index.",104,[[["self"],["bool"]],["statusoptions"]]],[11,"include_unreadable","","",104,[[["self"],["bool"]],["statusoptions"]]],[11,"include_unreadable_as_untracked","","",104,[[["self"],["bool"]],["statusoptions"]]],[11,"raw","","Get a pointer to the inner list of status options.",104,N],[11,"get","","Gets a status entry from this list at the specified index.",105,[[["self"],["usize"]],["option",["statusentry"]]]],[11,"len","","Gets the count of status entries in this list.",105,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` if there is no status entry in this list.",105,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the statuses in this list.",105,[[["self"]],["statusiter"]]],[11,"drop","","",105,[[["self"]]]],[11,"next","","",106,[[["self"]],["option",["statusentry"]]]],[11,"size_hint","","",106,N],[11,"next_back","","",106,[[["self"]],["option",["statusentry"]]]],[11,"path_bytes","","Access the bytes for this entry's corresponding pathname",107,N],[11,"path","","Access this entry's path name as a string.",107,[[["self"]],["option",["str"]]]],[11,"status","","Access the status flags for this file",107,[[["self"]],["status"]]],[11,"head_to_index","","Access detailed information about the differences between the file in HEAD and the file in the index.",107,[[["self"]],["option",["diffdelta"]]]],[11,"index_to_workdir","","Access detailed information about the differences between the file in the index and the file in the working directory.",107,[[["self"]],["option",["diffdelta"]]]],[11,"branch","","Get the submodule's branch.",108,[[["self"]],["option",["str"]]]],[11,"branch_bytes","","Get the branch for the submodule.",108,[[["self"]],["option"]]],[11,"url","","Get the submodule's url.",108,[[["self"]],["option",["str"]]]],[11,"url_bytes","","Get the url for the submodule.",108,N],[11,"name","","Get the submodule's name.",108,[[["self"]],["option",["str"]]]],[11,"name_bytes","","Get the name for the submodule.",108,N],[11,"path","","Get the path for the submodule.",108,[[["self"]],["path"]]],[11,"head_id","","Get the OID for the submodule in the current HEAD tree.",108,[[["self"]],["option",["oid"]]]],[11,"index_id","","Get the OID for the submodule in the index.",108,[[["self"]],["option",["oid"]]]],[11,"workdir_id","","Get the OID for the submodule in the current working directory.",108,[[["self"]],["option",["oid"]]]],[11,"init","","Copy submodule info into \".git/config\" file.",108,[[["self"],["bool"]],["result",["error"]]]],[11,"open","","Open the repository for a submodule.",108,[[["self"]],["result",["repository","error"]]]],[11,"reload","","Reread submodule info from config, index, and HEAD.",108,[[["self"],["bool"]],["result",["error"]]]],[11,"sync","","Copy submodule remote info into submodule repo.",108,[[["self"]],["result",["error"]]]],[11,"add_to_index","","Add current submodule HEAD commit to index of superproject.",108,[[["self"],["bool"]],["result",["error"]]]],[11,"add_finalize","","Resolve the setup of a new git submodule.",108,[[["self"]],["result",["error"]]]],[11,"update","","Update submodule.",108,[[["self"],["bool"],["option",["submoduleupdateoptions"]]],["result",["error"]]]],[11,"drop","","",108,[[["self"]]]],[11,"new","","Return default options.",109,[[],["self"]]],[11,"checkout","","Set checkout options.",109,[[["self"],["checkoutbuilder"]],["self"]]],[11,"fetch","","Set fetch options and allow fetching.",109,[[["self"],["fetchoptions"]],["self"]]],[11,"allow_fetch","","Allow or disallow fetching.",109,[[["self"],["bool"]],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"new","","Creates a default set of merge options.",110,[[],["stashapplyoptions"]]],[11,"reinstantiate_index","","Set stash application flag to GIT_STASH_APPLY_REINSTATE_INDEX",110,[[["self"]],["stashapplyoptions"]]],[11,"checkout_options","","Options to use when writing files to the working directory",110,[[["self"],["checkoutbuilder"]],["stashapplyoptions"]]],[11,"progress_cb","","Optional callback to notify the consumer of application progress.",110,[[["self"],["c"]],["stashapplyoptions"]]],[11,"raw","","Pointer to a raw git_stash_apply_options",110,[[["self"]],["git_stash_apply_options"]]],[11,"id","","Get the id (SHA1) of a repository tag",111,[[["self"]],["oid"]]],[11,"message","","Get the message of a tag",111,[[["self"]],["option",["str"]]]],[11,"message_bytes","","Get the message of a tag",111,[[["self"]],["option"]]],[11,"name","","Get the name of a tag",111,[[["self"]],["option",["str"]]]],[11,"name_bytes","","Get the name of a tag",111,N],[11,"peel","","Recursively peel a tag until a non tag git_object is found",111,[[["self"]],["result",["object","error"]]]],[11,"tagger","","Get the tagger (author) of a tag",111,[[["self"]],["option",["signature"]]]],[11,"target","","Get the tagged object of a tag",111,[[["self"]],["result",["object","error"]]]],[11,"target_id","","Get the OID of the tagged object of a tag",111,[[["self"]],["oid"]]],[11,"target_type","","Get the OID of the tagged object of a tag",111,[[["self"]],["option",["objecttype"]]]],[11,"as_object","","Casts this Tag to be usable as an `Object`",111,[[["self"]],["object"]]],[11,"into_object","","Consumes Tag to be returned as an `Object`",111,[[["self"]],["object"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",111,[[["self"]],["self"]]],[11,"drop","","",111,[[["self"]]]],[11,"clone","","",112,[[["self"]],["time"]]],[11,"eq","","",112,[[["self"],["time"]],["bool"]]],[11,"ne","","",112,[[["self"],["time"]],["bool"]]],[11,"clone","","",113,[[["self"]],["indextime"]]],[11,"eq","","",113,[[["self"],["indextime"]],["bool"]]],[11,"ne","","",113,[[["self"],["indextime"]],["bool"]]],[11,"new","","Creates a new time structure from its components.",112,[[["i64"],["i32"]],["time"]]],[11,"seconds","","Return the time, in seconds, from epoch",112,[[["self"]],["i64"]]],[11,"offset_minutes","","Return the timezone offset, in minutes",112,[[["self"]],["i32"]]],[11,"sign","","Return whether the offset was positive or negative. Primarily useful in case the offset is specified as a negative zero.",112,[[["self"]],["char"]]],[11,"partial_cmp","","",112,[[["self"],["time"]],["option",["ordering"]]]],[11,"cmp","","",112,[[["self"],["time"]],["ordering"]]],[11,"new","","Creates a new time structure from its components.",113,[[["i32"],["u32"]],["indextime"]]],[11,"seconds","","Returns the number of seconds in the second component of this time.",113,[[["self"]],["i32"]]],[11,"nanoseconds","","Returns the nanosecond component of this time.",113,[[["self"]],["u32"]]],[11,"partial_cmp","","",113,[[["self"],["indextime"]],["option",["ordering"]]]],[11,"cmp","","",113,[[["self"],["indextime"]],["ordering"]]],[11,"id","","Get the id (SHA1) of a repository object",114,[[["self"]],["oid"]]],[11,"len","","Get the number of entries listed in this tree.",114,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` if there is not entry",114,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the entries in this tree.",114,[[["self"]],["treeiter"]]],[11,"get_id","","Lookup a tree entry by SHA value.",114,[[["self"],["oid"]],["option",["treeentry"]]]],[11,"get","","Lookup a tree entry by its position in the tree",114,[[["self"],["usize"]],["option",["treeentry"]]]],[11,"get_name","","Lookup a tree entry by its filename",114,[[["self"],["str"]],["option",["treeentry"]]]],[11,"get_path","","Retrieve a tree entry contained in a tree or in any of its subtrees, given its relative path.",114,[[["self"],["path"]],["result",["treeentry","error"]]]],[11,"as_object","","Casts this Tree to be usable as an `Object`",114,[[["self"]],["object"]]],[11,"into_object","","Consumes Commit to be returned as an `Object`",114,[[["self"]],["object"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",114,[[["self"]],["self"]]],[11,"drop","","",114,[[["self"]]]],[11,"id","","Get the id of the object pointed by the entry",115,[[["self"]],["oid"]]],[11,"name","","Get the filename of a tree entry",115,[[["self"]],["option",["str"]]]],[11,"name_bytes","","Get the filename of a tree entry",115,N],[11,"to_object","","Convert a tree entry to the object it points to.",115,[[["self"],["repository"]],["result",["object","error"]]]],[11,"kind","","Get the type of the object pointed by the entry",115,[[["self"]],["option",["objecttype"]]]],[11,"filemode","","Get the UNIX file attributes of a tree entry",115,[[["self"]],["i32"]]],[11,"filemode_raw","","Get the raw UNIX file attributes of a tree entry",115,[[["self"]],["i32"]]],[11,"to_owned","","Convert this entry of any lifetime into an owned signature with a static lifetime.",115,[[["self"]],["treeentry"]]],[11,"clone","","",115,[[["self"]],["treeentry"]]],[11,"partial_cmp","","",115,[[["self"],["treeentry"]],["option",["ordering"]]]],[11,"cmp","","",115,[[["self"],["treeentry"]],["ordering"]]],[11,"eq","","",115,[[["self"],["treeentry"]],["bool"]]],[11,"drop","","",115,[[["self"]]]],[11,"next","","",116,[[["self"]],["option",["treeentry"]]]],[11,"size_hint","","",116,N],[11,"next_back","","",116,[[["self"]],["option",["treeentry"]]]],[11,"clear","","Clear all the entries in the builder",117,[[["self"]]]],[11,"len","","Get the number of entries",117,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` if there is no entry",117,[[["self"]],["bool"]]],[11,"get","","Get en entry from the builder from its filename",117,[[["self"],["p"]],["result",["option","error"]]]],[11,"insert","","Add or update an entry in the builder",117,[[["self"],["p"],["oid"],["i32"]],["result",["treeentry","error"]]]],[11,"remove","","Remove an entry from the builder by its filename",117,[[["self"],["p"]],["result",["error"]]]],[11,"filter","","Selectively remove entries from the tree",117,[[["self"],["f"]]]],[11,"write","","Write the contents of the TreeBuilder as a Tree object and return its Oid",117,[[["self"]],["result",["oid","error"]]]],[11,"drop","","",117,[[["self"]]]],[6,"IndexMatchedPath","","A callback function to filter index matches.",N,N],[6,"Credentials","","Callback used to acquire credentials for when a remote is fetched.",N,N],[6,"TransferProgress","","Callback to be invoked while a transfer is in progress.",N,N],[6,"TransportMessage","","Callback for receiving messages delivered by the transport.",N,N],[6,"UpdateTips","","Callback for whenever a reference is updated locally.",N,N],[6,"StashCb","","This is a callback function you can provide to iterate over all the stashed states that will be invoked per entry.",N,N],[6,"StashApplyProgressCb","","Stash application progress notification function.",N,N],[17,"DEFAULT_COMMENT_CHAR","","The default comment character for `message_prettify` ('#')",N,N],[8,"IntoCString","","A class of types that can be converted to C strings.",N,N],[10,"into_c_string","","Consume this container, converting it into a CString",118,[[["self"]],["result",["cstring","error"]]]],[11,"eq","","",5,[[["self"],["errorcode"]],["bool"]]],[11,"clone","","",5,[[["self"]],["errorcode"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["errorclass"]],["bool"]]],[11,"clone","","",6,[[["self"]],["errorclass"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["repositorystate"]],["bool"]]],[11,"clone","","",7,[[["self"]],["repositorystate"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["direction"]]],[11,"clone","","",9,[[["self"]],["resettype"]]],[11,"eq","","",10,[[["self"],["objecttype"]],["bool"]]],[11,"clone","","",10,[[["self"]],["objecttype"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["referencetype"]],["bool"]]],[11,"clone","","",11,[[["self"]],["referencetype"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["branchtype"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["branchtype"]]],[11,"eq","","",13,[[["self"],["configlevel"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["configlevel"]]],[11,"eq","","",14,[[["self"],["filefavor"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["filefavor"]]],[11,"eq","","",119,[[["self"],["sort"]],["bool"]]],[11,"ne","","",119,[[["self"],["sort"]],["bool"]]],[11,"clone","","",119,[[["self"]],["sort"]]],[11,"partial_cmp","","",119,[[["self"],["sort"]],["option",["ordering"]]]],[11,"lt","","",119,[[["self"],["sort"]],["bool"]]],[11,"le","","",119,[[["self"],["sort"]],["bool"]]],[11,"gt","","",119,[[["self"],["sort"]],["bool"]]],[11,"ge","","",119,[[["self"],["sort"]],["bool"]]],[11,"cmp","","",119,[[["self"],["sort"]],["ordering"]]],[11,"hash","","",119,N],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[18,"NONE","","Sort the repository contents in no particular ordering.",119,N],[18,"TOPOLOGICAL","","Sort the repository contents in topological order (parents before children).",119,N],[18,"TIME","","Sort the repository contents by commit time.",119,N],[18,"REVERSE","","Iterate through the repository contents in reverse order.",119,N],[11,"empty","","Returns an empty set of flags.",119,[[],["sort"]]],[11,"all","","Returns the set containing all flags.",119,[[],["sort"]]],[11,"bits","","Returns the raw value of the flags currently stored.",119,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,[[["u32"]],["option",["sort"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,[[["u32"]],["sort"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",119,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,[[["self"],["sort"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,[[["self"],["sort"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",119,[[["self"],["sort"]]]],[11,"remove","","Removes the specified flags in-place.",119,[[["self"],["sort"]]]],[11,"toggle","","Toggles the specified flags in-place.",119,[[["self"],["sort"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,[[["self"],["sort"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",119,[[["self"],["sort"]],["sort"]]],[11,"bitor_assign","","Adds the set of flags.",119,[[["self"],["sort"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,[[["self"],["sort"]],["sort"]]],[11,"bitxor_assign","","Toggles the set of flags.",119,[[["self"],["sort"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",119,[[["self"],["sort"]],["sort"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",119,[[["self"],["sort"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",119,[[["self"],["sort"]],["sort"]]],[11,"sub_assign","","Disables all flags enabled in the set.",119,[[["self"],["sort"]]]],[11,"not","","Returns the complement of this set of flags.",119,[[["self"]],["sort"]]],[11,"extend","","",119,[[["self"],["t"]]]],[11,"from_iter","","",119,[[["t"]],["sort"]]],[11,"is_none","","",119,[[["self"]],["bool"]]],[11,"is_topological","","",119,[[["self"]],["bool"]]],[11,"is_time","","",119,[[["self"]],["bool"]]],[11,"is_reverse","","",119,[[["self"]],["bool"]]],[11,"eq","","",120,[[["self"],["credentialtype"]],["bool"]]],[11,"ne","","",120,[[["self"],["credentialtype"]],["bool"]]],[11,"clone","","",120,[[["self"]],["credentialtype"]]],[11,"partial_cmp","","",120,[[["self"],["credentialtype"]],["option",["ordering"]]]],[11,"lt","","",120,[[["self"],["credentialtype"]],["bool"]]],[11,"le","","",120,[[["self"],["credentialtype"]],["bool"]]],[11,"gt","","",120,[[["self"],["credentialtype"]],["bool"]]],[11,"ge","","",120,[[["self"],["credentialtype"]],["bool"]]],[11,"cmp","","",120,[[["self"],["credentialtype"]],["ordering"]]],[11,"hash","","",120,N],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[18,"USER_PASS_PLAINTEXT","","",120,N],[18,"SSH_KEY","","",120,N],[18,"SSH_MEMORY","","",120,N],[18,"SSH_CUSTOM","","",120,N],[18,"DEFAULT","","",120,N],[18,"SSH_INTERACTIVE","","",120,N],[18,"USERNAME","","",120,N],[11,"empty","","Returns an empty set of flags.",120,[[],["credentialtype"]]],[11,"all","","Returns the set containing all flags.",120,[[],["credentialtype"]]],[11,"bits","","Returns the raw value of the flags currently stored.",120,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,[[["u32"]],["option",["credentialtype"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,[[["u32"]],["credentialtype"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",120,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,[[["self"],["credentialtype"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,[[["self"],["credentialtype"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",120,[[["self"],["credentialtype"]]]],[11,"remove","","Removes the specified flags in-place.",120,[[["self"],["credentialtype"]]]],[11,"toggle","","Toggles the specified flags in-place.",120,[[["self"],["credentialtype"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,[[["self"],["credentialtype"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",120,[[["self"],["credentialtype"]],["credentialtype"]]],[11,"bitor_assign","","Adds the set of flags.",120,[[["self"],["credentialtype"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,[[["self"],["credentialtype"]],["credentialtype"]]],[11,"bitxor_assign","","Toggles the set of flags.",120,[[["self"],["credentialtype"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",120,[[["self"],["credentialtype"]],["credentialtype"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",120,[[["self"],["credentialtype"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",120,[[["self"],["credentialtype"]],["credentialtype"]]],[11,"sub_assign","","Disables all flags enabled in the set.",120,[[["self"],["credentialtype"]]]],[11,"not","","Returns the complement of this set of flags.",120,[[["self"]],["credentialtype"]]],[11,"extend","","",120,[[["self"],["t"]]]],[11,"from_iter","","",120,[[["t"]],["credentialtype"]]],[11,"is_user_pass_plaintext","","",120,[[["self"]],["bool"]]],[11,"is_ssh_key","","",120,[[["self"]],["bool"]]],[11,"is_ssh_memory","","",120,[[["self"]],["bool"]]],[11,"is_ssh_custom","","",120,[[["self"]],["bool"]]],[11,"is_default","","",120,[[["self"]],["bool"]]],[11,"is_ssh_interactive","","",120,[[["self"]],["bool"]]],[11,"is_username","","",120,[[["self"]],["bool"]]],[11,"default","","",120,[[],["self"]]],[11,"eq","","",121,[[["self"],["indexentryflag"]],["bool"]]],[11,"ne","","",121,[[["self"],["indexentryflag"]],["bool"]]],[11,"clone","","",121,[[["self"]],["indexentryflag"]]],[11,"partial_cmp","","",121,[[["self"],["indexentryflag"]],["option",["ordering"]]]],[11,"lt","","",121,[[["self"],["indexentryflag"]],["bool"]]],[11,"le","","",121,[[["self"],["indexentryflag"]],["bool"]]],[11,"gt","","",121,[[["self"],["indexentryflag"]],["bool"]]],[11,"ge","","",121,[[["self"],["indexentryflag"]],["bool"]]],[11,"cmp","","",121,[[["self"],["indexentryflag"]],["ordering"]]],[11,"hash","","",121,N],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[18,"EXTENDED","","Set when the `extended_flags` field is valid.",121,N],[18,"VALID","","\"Assume valid\" flag",121,N],[11,"empty","","Returns an empty set of flags.",121,[[],["indexentryflag"]]],[11,"all","","Returns the set containing all flags.",121,[[],["indexentryflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",121,[[["self"]],["u16"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",121,[[["u16"]],["option",["indexentryflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",121,[[["u16"]],["indexentryflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",121,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",121,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",121,[[["self"],["indexentryflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",121,[[["self"],["indexentryflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",121,[[["self"],["indexentryflag"]]]],[11,"remove","","Removes the specified flags in-place.",121,[[["self"],["indexentryflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",121,[[["self"],["indexentryflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",121,[[["self"],["indexentryflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",121,[[["self"],["indexentryflag"]],["indexentryflag"]]],[11,"bitor_assign","","Adds the set of flags.",121,[[["self"],["indexentryflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",121,[[["self"],["indexentryflag"]],["indexentryflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",121,[[["self"],["indexentryflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",121,[[["self"],["indexentryflag"]],["indexentryflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",121,[[["self"],["indexentryflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",121,[[["self"],["indexentryflag"]],["indexentryflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",121,[[["self"],["indexentryflag"]]]],[11,"not","","Returns the complement of this set of flags.",121,[[["self"]],["indexentryflag"]]],[11,"extend","","",121,[[["self"],["t"]]]],[11,"from_iter","","",121,[[["t"]],["indexentryflag"]]],[11,"is_extended","","",121,[[["self"]],["bool"]]],[11,"is_valid","","",121,[[["self"]],["bool"]]],[11,"eq","","",122,[[["self"],["indexentryextendedflag"]],["bool"]]],[11,"ne","","",122,[[["self"],["indexentryextendedflag"]],["bool"]]],[11,"clone","","",122,[[["self"]],["indexentryextendedflag"]]],[11,"partial_cmp","","",122,[[["self"],["indexentryextendedflag"]],["option",["ordering"]]]],[11,"lt","","",122,[[["self"],["indexentryextendedflag"]],["bool"]]],[11,"le","","",122,[[["self"],["indexentryextendedflag"]],["bool"]]],[11,"gt","","",122,[[["self"],["indexentryextendedflag"]],["bool"]]],[11,"ge","","",122,[[["self"],["indexentryextendedflag"]],["bool"]]],[11,"cmp","","",122,[[["self"],["indexentryextendedflag"]],["ordering"]]],[11,"hash","","",122,N],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[18,"INTENT_TO_ADD","","An \"intent to add\" entry from \"git add -N\"",122,N],[18,"SKIP_WORKTREE","","Skip the associated worktree file, for sparse checkouts",122,N],[18,"EXTENDED2","","Reserved for a future on-disk extended flag",122,N],[18,"UPDATE","","",122,N],[18,"REMOVE","","",122,N],[18,"UPTODATE","","",122,N],[18,"ADDED","","",122,N],[18,"HASHED","","",122,N],[18,"UNHASHED","","",122,N],[18,"WT_REMOVE","","",122,N],[18,"CONFLICTED","","",122,N],[18,"UNPACKED","","",122,N],[18,"NEW_SKIP_WORKTREE","","",122,N],[11,"empty","","Returns an empty set of flags.",122,[[],["indexentryextendedflag"]]],[11,"all","","Returns the set containing all flags.",122,[[],["indexentryextendedflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",122,[[["self"]],["u16"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",122,[[["u16"]],["option",["indexentryextendedflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",122,[[["u16"]],["indexentryextendedflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",122,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",122,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",122,[[["self"],["indexentryextendedflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",122,[[["self"],["indexentryextendedflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",122,[[["self"],["indexentryextendedflag"]]]],[11,"remove","","Removes the specified flags in-place.",122,[[["self"],["indexentryextendedflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",122,[[["self"],["indexentryextendedflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",122,[[["self"],["indexentryextendedflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",122,[[["self"],["indexentryextendedflag"]],["indexentryextendedflag"]]],[11,"bitor_assign","","Adds the set of flags.",122,[[["self"],["indexentryextendedflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",122,[[["self"],["indexentryextendedflag"]],["indexentryextendedflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",122,[[["self"],["indexentryextendedflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",122,[[["self"],["indexentryextendedflag"]],["indexentryextendedflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",122,[[["self"],["indexentryextendedflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",122,[[["self"],["indexentryextendedflag"]],["indexentryextendedflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",122,[[["self"],["indexentryextendedflag"]]]],[11,"not","","Returns the complement of this set of flags.",122,[[["self"]],["indexentryextendedflag"]]],[11,"extend","","",122,[[["self"],["t"]]]],[11,"from_iter","","",122,[[["t"]],["indexentryextendedflag"]]],[11,"is_intent_to_add","","",122,[[["self"]],["bool"]]],[11,"is_skip_worktree","","",122,[[["self"]],["bool"]]],[11,"is_extended2","","",122,[[["self"]],["bool"]]],[11,"is_update","","",122,[[["self"]],["bool"]]],[11,"is_remove","","",122,[[["self"]],["bool"]]],[11,"is_up_to_date","","",122,[[["self"]],["bool"]]],[11,"is_added","","",122,[[["self"]],["bool"]]],[11,"is_hashed","","",122,[[["self"]],["bool"]]],[11,"is_unhashed","","",122,[[["self"]],["bool"]]],[11,"is_wt_remove","","",122,[[["self"]],["bool"]]],[11,"is_conflicted","","",122,[[["self"]],["bool"]]],[11,"is_unpacked","","",122,[[["self"]],["bool"]]],[11,"is_new_skip_worktree","","",122,[[["self"]],["bool"]]],[11,"eq","","",123,[[["self"],["indexaddoption"]],["bool"]]],[11,"ne","","",123,[[["self"],["indexaddoption"]],["bool"]]],[11,"clone","","",123,[[["self"]],["indexaddoption"]]],[11,"partial_cmp","","",123,[[["self"],["indexaddoption"]],["option",["ordering"]]]],[11,"lt","","",123,[[["self"],["indexaddoption"]],["bool"]]],[11,"le","","",123,[[["self"],["indexaddoption"]],["bool"]]],[11,"gt","","",123,[[["self"],["indexaddoption"]],["bool"]]],[11,"ge","","",123,[[["self"],["indexaddoption"]],["bool"]]],[11,"cmp","","",123,[[["self"],["indexaddoption"]],["ordering"]]],[11,"hash","","",123,N],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[18,"DEFAULT","","",123,N],[18,"FORCE","","",123,N],[18,"DISABLE_PATHSPEC_MATCH","","",123,N],[18,"CHECK_PATHSPEC","","",123,N],[11,"empty","","Returns an empty set of flags.",123,[[],["indexaddoption"]]],[11,"all","","Returns the set containing all flags.",123,[[],["indexaddoption"]]],[11,"bits","","Returns the raw value of the flags currently stored.",123,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",123,[[["u32"]],["option",["indexaddoption"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",123,[[["u32"]],["indexaddoption"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",123,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",123,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",123,[[["self"],["indexaddoption"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",123,[[["self"],["indexaddoption"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",123,[[["self"],["indexaddoption"]]]],[11,"remove","","Removes the specified flags in-place.",123,[[["self"],["indexaddoption"]]]],[11,"toggle","","Toggles the specified flags in-place.",123,[[["self"],["indexaddoption"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",123,[[["self"],["indexaddoption"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",123,[[["self"],["indexaddoption"]],["indexaddoption"]]],[11,"bitor_assign","","Adds the set of flags.",123,[[["self"],["indexaddoption"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",123,[[["self"],["indexaddoption"]],["indexaddoption"]]],[11,"bitxor_assign","","Toggles the set of flags.",123,[[["self"],["indexaddoption"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",123,[[["self"],["indexaddoption"]],["indexaddoption"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",123,[[["self"],["indexaddoption"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",123,[[["self"],["indexaddoption"]],["indexaddoption"]]],[11,"sub_assign","","Disables all flags enabled in the set.",123,[[["self"],["indexaddoption"]]]],[11,"not","","Returns the complement of this set of flags.",123,[[["self"]],["indexaddoption"]]],[11,"extend","","",123,[[["self"],["t"]]]],[11,"from_iter","","",123,[[["t"]],["indexaddoption"]]],[11,"is_default","","",123,[[["self"]],["bool"]]],[11,"is_force","","",123,[[["self"]],["bool"]]],[11,"is_disable_pathspec_match","","",123,[[["self"]],["bool"]]],[11,"is_check_pathspec","","",123,[[["self"]],["bool"]]],[11,"default","","",123,[[],["self"]]],[11,"eq","","",124,[[["self"],["repositoryopenflags"]],["bool"]]],[11,"ne","","",124,[[["self"],["repositoryopenflags"]],["bool"]]],[11,"clone","","",124,[[["self"]],["repositoryopenflags"]]],[11,"partial_cmp","","",124,[[["self"],["repositoryopenflags"]],["option",["ordering"]]]],[11,"lt","","",124,[[["self"],["repositoryopenflags"]],["bool"]]],[11,"le","","",124,[[["self"],["repositoryopenflags"]],["bool"]]],[11,"gt","","",124,[[["self"],["repositoryopenflags"]],["bool"]]],[11,"ge","","",124,[[["self"],["repositoryopenflags"]],["bool"]]],[11,"cmp","","",124,[[["self"],["repositoryopenflags"]],["ordering"]]],[11,"hash","","",124,N],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[18,"NO_SEARCH","","Only open the specified path; don't walk upward searching.",124,N],[18,"CROSS_FS","","Search across filesystem boundaries.",124,N],[18,"BARE","","Force opening as bare repository, and defer loading its config.",124,N],[18,"NO_DOTGIT","","Don't try appending `/.git` to the specified repository path.",124,N],[18,"FROM_ENV","","Respect environment variables like `$GIT_DIR`.",124,N],[11,"empty","","Returns an empty set of flags.",124,[[],["repositoryopenflags"]]],[11,"all","","Returns the set containing all flags.",124,[[],["repositoryopenflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",124,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",124,[[["u32"]],["option",["repositoryopenflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",124,[[["u32"]],["repositoryopenflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",124,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",124,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",124,[[["self"],["repositoryopenflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",124,[[["self"],["repositoryopenflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",124,[[["self"],["repositoryopenflags"]]]],[11,"remove","","Removes the specified flags in-place.",124,[[["self"],["repositoryopenflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",124,[[["self"],["repositoryopenflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",124,[[["self"],["repositoryopenflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",124,[[["self"],["repositoryopenflags"]],["repositoryopenflags"]]],[11,"bitor_assign","","Adds the set of flags.",124,[[["self"],["repositoryopenflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",124,[[["self"],["repositoryopenflags"]],["repositoryopenflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",124,[[["self"],["repositoryopenflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",124,[[["self"],["repositoryopenflags"]],["repositoryopenflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",124,[[["self"],["repositoryopenflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",124,[[["self"],["repositoryopenflags"]],["repositoryopenflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",124,[[["self"],["repositoryopenflags"]]]],[11,"not","","Returns the complement of this set of flags.",124,[[["self"]],["repositoryopenflags"]]],[11,"extend","","",124,[[["self"],["t"]]]],[11,"from_iter","","",124,[[["t"]],["repositoryopenflags"]]],[11,"is_no_search","","",124,[[["self"]],["bool"]]],[11,"is_cross_fs","","",124,[[["self"]],["bool"]]],[11,"is_bare","","",124,[[["self"]],["bool"]]],[11,"is_no_dotgit","","",124,[[["self"]],["bool"]]],[11,"is_from_env","","",124,[[["self"]],["bool"]]],[11,"eq","","",125,[[["self"],["revparsemode"]],["bool"]]],[11,"ne","","",125,[[["self"],["revparsemode"]],["bool"]]],[11,"clone","","",125,[[["self"]],["revparsemode"]]],[11,"partial_cmp","","",125,[[["self"],["revparsemode"]],["option",["ordering"]]]],[11,"lt","","",125,[[["self"],["revparsemode"]],["bool"]]],[11,"le","","",125,[[["self"],["revparsemode"]],["bool"]]],[11,"gt","","",125,[[["self"],["revparsemode"]],["bool"]]],[11,"ge","","",125,[[["self"],["revparsemode"]],["bool"]]],[11,"cmp","","",125,[[["self"],["revparsemode"]],["ordering"]]],[11,"hash","","",125,N],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[18,"SINGLE","","The spec targeted a single object",125,N],[18,"RANGE","","The spec targeted a range of commits",125,N],[18,"MERGE_BASE","","The spec used the `...` operator, which invokes special semantics.",125,N],[11,"empty","","Returns an empty set of flags.",125,[[],["revparsemode"]]],[11,"all","","Returns the set containing all flags.",125,[[],["revparsemode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",125,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",125,[[["u32"]],["option",["revparsemode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",125,[[["u32"]],["revparsemode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",125,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",125,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",125,[[["self"],["revparsemode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",125,[[["self"],["revparsemode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",125,[[["self"],["revparsemode"]]]],[11,"remove","","Removes the specified flags in-place.",125,[[["self"],["revparsemode"]]]],[11,"toggle","","Toggles the specified flags in-place.",125,[[["self"],["revparsemode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",125,[[["self"],["revparsemode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",125,[[["self"],["revparsemode"]],["revparsemode"]]],[11,"bitor_assign","","Adds the set of flags.",125,[[["self"],["revparsemode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",125,[[["self"],["revparsemode"]],["revparsemode"]]],[11,"bitxor_assign","","Toggles the set of flags.",125,[[["self"],["revparsemode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",125,[[["self"],["revparsemode"]],["revparsemode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",125,[[["self"],["revparsemode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",125,[[["self"],["revparsemode"]],["revparsemode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",125,[[["self"],["revparsemode"]]]],[11,"not","","Returns the complement of this set of flags.",125,[[["self"]],["revparsemode"]]],[11,"extend","","",125,[[["self"],["t"]]]],[11,"from_iter","","",125,[[["t"]],["revparsemode"]]],[11,"is_no_single","","",125,[[["self"]],["bool"]]],[11,"is_range","","",125,[[["self"]],["bool"]]],[11,"is_merge_base","","",125,[[["self"]],["bool"]]],[11,"eq","","",126,[[["self"],["mergeanalysis"]],["bool"]]],[11,"ne","","",126,[[["self"],["mergeanalysis"]],["bool"]]],[11,"clone","","",126,[[["self"]],["mergeanalysis"]]],[11,"partial_cmp","","",126,[[["self"],["mergeanalysis"]],["option",["ordering"]]]],[11,"lt","","",126,[[["self"],["mergeanalysis"]],["bool"]]],[11,"le","","",126,[[["self"],["mergeanalysis"]],["bool"]]],[11,"gt","","",126,[[["self"],["mergeanalysis"]],["bool"]]],[11,"ge","","",126,[[["self"],["mergeanalysis"]],["bool"]]],[11,"cmp","","",126,[[["self"],["mergeanalysis"]],["ordering"]]],[11,"hash","","",126,N],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[18,"ANALYSIS_NONE","","No merge is possible.",126,N],[18,"ANALYSIS_NORMAL","","A \"normal\" merge; both HEAD and the given merge input have diverged from their common ancestor. The divergent commits must be merged.",126,N],[18,"ANALYSIS_UP_TO_DATE","","All given merge inputs are reachable from HEAD, meaning the repository is up-to-date and no merge needs to be performed.",126,N],[18,"ANALYSIS_FASTFORWARD","","The given merge input is a fast-forward from HEAD and no merge needs to be performed.  Instead, the client can check out the given merge input.",126,N],[18,"ANALYSIS_UNBORN","","The HEAD of the current repository is \"unborn\" and does not point to a valid commit.  No merge can be performed, but the caller may wish to simply set HEAD to the target commit(s).",126,N],[11,"empty","","Returns an empty set of flags.",126,[[],["mergeanalysis"]]],[11,"all","","Returns the set containing all flags.",126,[[],["mergeanalysis"]]],[11,"bits","","Returns the raw value of the flags currently stored.",126,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",126,[[["u32"]],["option",["mergeanalysis"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",126,[[["u32"]],["mergeanalysis"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",126,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",126,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",126,[[["self"],["mergeanalysis"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",126,[[["self"],["mergeanalysis"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",126,[[["self"],["mergeanalysis"]]]],[11,"remove","","Removes the specified flags in-place.",126,[[["self"],["mergeanalysis"]]]],[11,"toggle","","Toggles the specified flags in-place.",126,[[["self"],["mergeanalysis"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",126,[[["self"],["mergeanalysis"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",126,[[["self"],["mergeanalysis"]],["mergeanalysis"]]],[11,"bitor_assign","","Adds the set of flags.",126,[[["self"],["mergeanalysis"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",126,[[["self"],["mergeanalysis"]],["mergeanalysis"]]],[11,"bitxor_assign","","Toggles the set of flags.",126,[[["self"],["mergeanalysis"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",126,[[["self"],["mergeanalysis"]],["mergeanalysis"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",126,[[["self"],["mergeanalysis"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",126,[[["self"],["mergeanalysis"]],["mergeanalysis"]]],[11,"sub_assign","","Disables all flags enabled in the set.",126,[[["self"],["mergeanalysis"]]]],[11,"not","","Returns the complement of this set of flags.",126,[[["self"]],["mergeanalysis"]]],[11,"extend","","",126,[[["self"],["t"]]]],[11,"from_iter","","",126,[[["t"]],["mergeanalysis"]]],[11,"is_none","","",126,[[["self"]],["bool"]]],[11,"is_normal","","",126,[[["self"]],["bool"]]],[11,"is_up_to_date","","",126,[[["self"]],["bool"]]],[11,"is_fast_forward","","",126,[[["self"]],["bool"]]],[11,"is_unborn","","",126,[[["self"]],["bool"]]],[11,"eq","","",127,[[["self"],["mergepreference"]],["bool"]]],[11,"ne","","",127,[[["self"],["mergepreference"]],["bool"]]],[11,"clone","","",127,[[["self"]],["mergepreference"]]],[11,"partial_cmp","","",127,[[["self"],["mergepreference"]],["option",["ordering"]]]],[11,"lt","","",127,[[["self"],["mergepreference"]],["bool"]]],[11,"le","","",127,[[["self"],["mergepreference"]],["bool"]]],[11,"gt","","",127,[[["self"],["mergepreference"]],["bool"]]],[11,"ge","","",127,[[["self"],["mergepreference"]],["bool"]]],[11,"cmp","","",127,[[["self"],["mergepreference"]],["ordering"]]],[11,"hash","","",127,N],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[18,"NONE","","No configuration was found that suggests a preferred behavior for merge.",127,N],[18,"NO_FAST_FORWARD","","There is a `merge.ff=false` configuration setting, suggesting that the user does not want to allow a fast-forward merge.",127,N],[18,"FASTFORWARD_ONLY","","There is a `merge.ff=only` configuration setting, suggesting that the user only wants fast-forward merges.",127,N],[11,"empty","","Returns an empty set of flags.",127,[[],["mergepreference"]]],[11,"all","","Returns the set containing all flags.",127,[[],["mergepreference"]]],[11,"bits","","Returns the raw value of the flags currently stored.",127,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",127,[[["u32"]],["option",["mergepreference"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",127,[[["u32"]],["mergepreference"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",127,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",127,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",127,[[["self"],["mergepreference"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",127,[[["self"],["mergepreference"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",127,[[["self"],["mergepreference"]]]],[11,"remove","","Removes the specified flags in-place.",127,[[["self"],["mergepreference"]]]],[11,"toggle","","Toggles the specified flags in-place.",127,[[["self"],["mergepreference"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",127,[[["self"],["mergepreference"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",127,[[["self"],["mergepreference"]],["mergepreference"]]],[11,"bitor_assign","","Adds the set of flags.",127,[[["self"],["mergepreference"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",127,[[["self"],["mergepreference"]],["mergepreference"]]],[11,"bitxor_assign","","Toggles the set of flags.",127,[[["self"],["mergepreference"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",127,[[["self"],["mergepreference"]],["mergepreference"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",127,[[["self"],["mergepreference"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",127,[[["self"],["mergepreference"]],["mergepreference"]]],[11,"sub_assign","","Disables all flags enabled in the set.",127,[[["self"],["mergepreference"]]]],[11,"not","","Returns the complement of this set of flags.",127,[[["self"]],["mergepreference"]]],[11,"extend","","",127,[[["self"],["t"]]]],[11,"from_iter","","",127,[[["t"]],["mergepreference"]]],[11,"is_none","","",127,[[["self"]],["bool"]]],[11,"is_no_fast_forward","","",127,[[["self"]],["bool"]]],[11,"is_fastforward_only","","",127,[[["self"]],["bool"]]],[11,"str","","Convert an object type to its string representation.",10,[[["self"]],["str"]]],[11,"is_loose","","Determine if the given git_otype is a valid loose object type.",10,[[["self"]],["bool"]]],[11,"from_raw","","Convert a raw git_otype to an ObjectType",10,[[["git_otype"]],["option",["objecttype"]]]],[11,"raw","","Convert this kind into its raw representation",10,[[["self"]],["git_otype"]]],[11,"from_str","","Convert a string object type representation to its object type.",10,[[["str"]],["option",["objecttype"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"str","","Convert an object type to its string representation.",11,[[["self"]],["str"]]],[11,"from_raw","","Convert a raw git_ref_t to a ReferenceType.",11,[[["git_ref_t"]],["option",["referencetype"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from_raw","","Converts a raw configuration level to a ConfigLevel",13,[[["git_config_level_t"]],["configlevel"]]],[11,"eq","","",128,[[["self"],["status"]],["bool"]]],[11,"ne","","",128,[[["self"],["status"]],["bool"]]],[11,"clone","","",128,[[["self"]],["status"]]],[11,"partial_cmp","","",128,[[["self"],["status"]],["option",["ordering"]]]],[11,"lt","","",128,[[["self"],["status"]],["bool"]]],[11,"le","","",128,[[["self"],["status"]],["bool"]]],[11,"gt","","",128,[[["self"],["status"]],["bool"]]],[11,"ge","","",128,[[["self"],["status"]],["bool"]]],[11,"cmp","","",128,[[["self"],["status"]],["ordering"]]],[11,"hash","","",128,N],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[18,"CURRENT","","",128,N],[18,"INDEX_NEW","","",128,N],[18,"INDEX_MODIFIED","","",128,N],[18,"INDEX_DELETED","","",128,N],[18,"INDEX_RENAMED","","",128,N],[18,"INDEX_TYPECHANGE","","",128,N],[18,"WT_NEW","","",128,N],[18,"WT_MODIFIED","","",128,N],[18,"WT_DELETED","","",128,N],[18,"WT_TYPECHANGE","","",128,N],[18,"WT_RENAMED","","",128,N],[18,"IGNORED","","",128,N],[18,"CONFLICTED","","",128,N],[11,"empty","","Returns an empty set of flags.",128,[[],["status"]]],[11,"all","","Returns the set containing all flags.",128,[[],["status"]]],[11,"bits","","Returns the raw value of the flags currently stored.",128,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",128,[[["u32"]],["option",["status"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",128,[[["u32"]],["status"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",128,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",128,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",128,[[["self"],["status"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",128,[[["self"],["status"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",128,[[["self"],["status"]]]],[11,"remove","","Removes the specified flags in-place.",128,[[["self"],["status"]]]],[11,"toggle","","Toggles the specified flags in-place.",128,[[["self"],["status"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",128,[[["self"],["status"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",128,[[["self"],["status"]],["status"]]],[11,"bitor_assign","","Adds the set of flags.",128,[[["self"],["status"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",128,[[["self"],["status"]],["status"]]],[11,"bitxor_assign","","Toggles the set of flags.",128,[[["self"],["status"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",128,[[["self"],["status"]],["status"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",128,[[["self"],["status"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",128,[[["self"],["status"]],["status"]]],[11,"sub_assign","","Disables all flags enabled in the set.",128,[[["self"],["status"]]]],[11,"not","","Returns the complement of this set of flags.",128,[[["self"]],["status"]]],[11,"extend","","",128,[[["self"],["t"]]]],[11,"from_iter","","",128,[[["t"]],["status"]]],[11,"is_index_new","","",128,[[["self"]],["bool"]]],[11,"is_index_modified","","",128,[[["self"]],["bool"]]],[11,"is_index_deleted","","",128,[[["self"]],["bool"]]],[11,"is_index_renamed","","",128,[[["self"]],["bool"]]],[11,"is_index_typechange","","",128,[[["self"]],["bool"]]],[11,"is_wt_new","","",128,[[["self"]],["bool"]]],[11,"is_wt_modified","","",128,[[["self"]],["bool"]]],[11,"is_wt_deleted","","",128,[[["self"]],["bool"]]],[11,"is_wt_typechange","","",128,[[["self"]],["bool"]]],[11,"is_wt_renamed","","",128,[[["self"]],["bool"]]],[11,"is_ignored","","",128,[[["self"]],["bool"]]],[11,"is_conflicted","","",128,[[["self"]],["bool"]]],[11,"eq","","",129,[[["self"],["repositoryinitmode"]],["bool"]]],[11,"ne","","",129,[[["self"],["repositoryinitmode"]],["bool"]]],[11,"clone","","",129,[[["self"]],["repositoryinitmode"]]],[11,"partial_cmp","","",129,[[["self"],["repositoryinitmode"]],["option",["ordering"]]]],[11,"lt","","",129,[[["self"],["repositoryinitmode"]],["bool"]]],[11,"le","","",129,[[["self"],["repositoryinitmode"]],["bool"]]],[11,"gt","","",129,[[["self"],["repositoryinitmode"]],["bool"]]],[11,"ge","","",129,[[["self"],["repositoryinitmode"]],["bool"]]],[11,"cmp","","",129,[[["self"],["repositoryinitmode"]],["ordering"]]],[11,"hash","","",129,N],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[18,"SHARED_UMASK","","Use permissions configured by umask - the default",129,N],[18,"SHARED_GROUP","","Use `--shared=group` behavior, chmod'ing the new repo to be group writable and \"g+sx\" for sticky group assignment",129,N],[18,"SHARED_ALL","","Use `--shared=all` behavior, adding world readability.",129,N],[11,"empty","","Returns an empty set of flags.",129,[[],["repositoryinitmode"]]],[11,"all","","Returns the set containing all flags.",129,[[],["repositoryinitmode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",129,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",129,[[["u32"]],["option",["repositoryinitmode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",129,[[["u32"]],["repositoryinitmode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",129,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",129,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",129,[[["self"],["repositoryinitmode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",129,[[["self"],["repositoryinitmode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",129,[[["self"],["repositoryinitmode"]]]],[11,"remove","","Removes the specified flags in-place.",129,[[["self"],["repositoryinitmode"]]]],[11,"toggle","","Toggles the specified flags in-place.",129,[[["self"],["repositoryinitmode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",129,[[["self"],["repositoryinitmode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",129,[[["self"],["repositoryinitmode"]],["repositoryinitmode"]]],[11,"bitor_assign","","Adds the set of flags.",129,[[["self"],["repositoryinitmode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",129,[[["self"],["repositoryinitmode"]],["repositoryinitmode"]]],[11,"bitxor_assign","","Toggles the set of flags.",129,[[["self"],["repositoryinitmode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",129,[[["self"],["repositoryinitmode"]],["repositoryinitmode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",129,[[["self"],["repositoryinitmode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",129,[[["self"],["repositoryinitmode"]],["repositoryinitmode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",129,[[["self"],["repositoryinitmode"]]]],[11,"not","","Returns the complement of this set of flags.",129,[[["self"]],["repositoryinitmode"]]],[11,"extend","","",129,[[["self"],["t"]]]],[11,"from_iter","","",129,[[["t"]],["repositoryinitmode"]]],[11,"is_shared_umask","","",129,[[["self"]],["bool"]]],[11,"is_shared_group","","",129,[[["self"]],["bool"]]],[11,"is_shared_all","","",129,[[["self"]],["bool"]]],[11,"clone","","",15,[[["self"]],["delta"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["delta"]],["bool"]]],[11,"eq","","",130,[[["self"],["submodulestatus"]],["bool"]]],[11,"ne","","",130,[[["self"],["submodulestatus"]],["bool"]]],[11,"clone","","",130,[[["self"]],["submodulestatus"]]],[11,"partial_cmp","","",130,[[["self"],["submodulestatus"]],["option",["ordering"]]]],[11,"lt","","",130,[[["self"],["submodulestatus"]],["bool"]]],[11,"le","","",130,[[["self"],["submodulestatus"]],["bool"]]],[11,"gt","","",130,[[["self"],["submodulestatus"]],["bool"]]],[11,"ge","","",130,[[["self"],["submodulestatus"]],["bool"]]],[11,"cmp","","",130,[[["self"],["submodulestatus"]],["ordering"]]],[11,"hash","","",130,N],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[18,"IN_HEAD","","",130,N],[18,"IN_INDEX","","",130,N],[18,"IN_CONFIG","","",130,N],[18,"IN_WD","","",130,N],[18,"INDEX_ADDED","","",130,N],[18,"INDEX_DELETED","","",130,N],[18,"INDEX_MODIFIED","","",130,N],[18,"WD_UNINITIALIZED","","",130,N],[18,"WD_ADDED","","",130,N],[18,"WD_DELETED","","",130,N],[18,"WD_MODIFIED","","",130,N],[18,"WD_INDEX_MODIFIED","","",130,N],[18,"WD_WD_MODIFIED","","",130,N],[18,"WD_UNTRACKED","","",130,N],[11,"empty","","Returns an empty set of flags.",130,[[],["submodulestatus"]]],[11,"all","","Returns the set containing all flags.",130,[[],["submodulestatus"]]],[11,"bits","","Returns the raw value of the flags currently stored.",130,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",130,[[["u32"]],["option",["submodulestatus"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",130,[[["u32"]],["submodulestatus"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",130,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",130,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",130,[[["self"],["submodulestatus"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",130,[[["self"],["submodulestatus"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",130,[[["self"],["submodulestatus"]]]],[11,"remove","","Removes the specified flags in-place.",130,[[["self"],["submodulestatus"]]]],[11,"toggle","","Toggles the specified flags in-place.",130,[[["self"],["submodulestatus"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",130,[[["self"],["submodulestatus"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",130,[[["self"],["submodulestatus"]],["submodulestatus"]]],[11,"bitor_assign","","Adds the set of flags.",130,[[["self"],["submodulestatus"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",130,[[["self"],["submodulestatus"]],["submodulestatus"]]],[11,"bitxor_assign","","Toggles the set of flags.",130,[[["self"],["submodulestatus"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",130,[[["self"],["submodulestatus"]],["submodulestatus"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",130,[[["self"],["submodulestatus"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",130,[[["self"],["submodulestatus"]],["submodulestatus"]]],[11,"sub_assign","","Disables all flags enabled in the set.",130,[[["self"],["submodulestatus"]]]],[11,"not","","Returns the complement of this set of flags.",130,[[["self"]],["submodulestatus"]]],[11,"extend","","",130,[[["self"],["t"]]]],[11,"from_iter","","",130,[[["t"]],["submodulestatus"]]],[11,"is_in_head","","",130,[[["self"]],["bool"]]],[11,"is_in_index","","",130,[[["self"]],["bool"]]],[11,"is_in_config","","",130,[[["self"]],["bool"]]],[11,"is_in_wd","","",130,[[["self"]],["bool"]]],[11,"is_index_added","","",130,[[["self"]],["bool"]]],[11,"is_index_deleted","","",130,[[["self"]],["bool"]]],[11,"is_index_modified","","",130,[[["self"]],["bool"]]],[11,"is_wd_uninitialized","","",130,[[["self"]],["bool"]]],[11,"is_wd_added","","",130,[[["self"]],["bool"]]],[11,"is_wd_deleted","","",130,[[["self"]],["bool"]]],[11,"is_wd_modified","","",130,[[["self"]],["bool"]]],[11,"is_wd_wd_modified","","",130,[[["self"]],["bool"]]],[11,"is_wd_untracked","","",130,[[["self"]],["bool"]]],[11,"eq","","",131,[[["self"],["pathspecflags"]],["bool"]]],[11,"ne","","",131,[[["self"],["pathspecflags"]],["bool"]]],[11,"clone","","",131,[[["self"]],["pathspecflags"]]],[11,"partial_cmp","","",131,[[["self"],["pathspecflags"]],["option",["ordering"]]]],[11,"lt","","",131,[[["self"],["pathspecflags"]],["bool"]]],[11,"le","","",131,[[["self"],["pathspecflags"]],["bool"]]],[11,"gt","","",131,[[["self"],["pathspecflags"]],["bool"]]],[11,"ge","","",131,[[["self"],["pathspecflags"]],["bool"]]],[11,"cmp","","",131,[[["self"],["pathspecflags"]],["ordering"]]],[11,"hash","","",131,N],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[18,"DEFAULT","","Use the default pathspec matching configuration.",131,N],[18,"IGNORE_CASE","","Force matching to ignore case, otherwise matching will use native case sensitivity fo the platform filesystem.",131,N],[18,"USE_CASE","","Force case sensitive matches, otherwise match will use the native case sensitivity of the platform filesystem.",131,N],[18,"NO_GLOB","","Disable glob patterns and just use simple string comparison for matching.",131,N],[18,"NO_MATCH_ERROR","","Means that match functions return the error code `NotFound` if no matches are found. By default no matches is a success.",131,N],[18,"FIND_FAILURES","","Means that the list returned should track which patterns matched which files so that at the end of the match we can identify patterns that did not match any files.",131,N],[18,"FAILURES_ONLY","","Means that the list returned does not need to keep the actual matching filenames. Use this to just test if there were any matches at all or in combination with `PATHSPEC_FAILURES` to validate a pathspec.",131,N],[11,"empty","","Returns an empty set of flags.",131,[[],["pathspecflags"]]],[11,"all","","Returns the set containing all flags.",131,[[],["pathspecflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",131,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",131,[[["u32"]],["option",["pathspecflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",131,[[["u32"]],["pathspecflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",131,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",131,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",131,[[["self"],["pathspecflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",131,[[["self"],["pathspecflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",131,[[["self"],["pathspecflags"]]]],[11,"remove","","Removes the specified flags in-place.",131,[[["self"],["pathspecflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",131,[[["self"],["pathspecflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",131,[[["self"],["pathspecflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",131,[[["self"],["pathspecflags"]],["pathspecflags"]]],[11,"bitor_assign","","Adds the set of flags.",131,[[["self"],["pathspecflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",131,[[["self"],["pathspecflags"]],["pathspecflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",131,[[["self"],["pathspecflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",131,[[["self"],["pathspecflags"]],["pathspecflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",131,[[["self"],["pathspecflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",131,[[["self"],["pathspecflags"]],["pathspecflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",131,[[["self"],["pathspecflags"]]]],[11,"not","","Returns the complement of this set of flags.",131,[[["self"]],["pathspecflags"]]],[11,"extend","","",131,[[["self"],["t"]]]],[11,"from_iter","","",131,[[["t"]],["pathspecflags"]]],[11,"is_default","","",131,[[["self"]],["bool"]]],[11,"is_ignore_case","","",131,[[["self"]],["bool"]]],[11,"is_use_case","","",131,[[["self"]],["bool"]]],[11,"is_no_glob","","",131,[[["self"]],["bool"]]],[11,"is_no_match_error","","",131,[[["self"]],["bool"]]],[11,"is_find_failures","","",131,[[["self"]],["bool"]]],[11,"is_failures_only","","",131,[[["self"]],["bool"]]],[11,"default","","",131,[[],["self"]]],[11,"eq","","",132,[[["self"],["checkoutnotificationtype"]],["bool"]]],[11,"ne","","",132,[[["self"],["checkoutnotificationtype"]],["bool"]]],[11,"clone","","",132,[[["self"]],["checkoutnotificationtype"]]],[11,"partial_cmp","","",132,[[["self"],["checkoutnotificationtype"]],["option",["ordering"]]]],[11,"lt","","",132,[[["self"],["checkoutnotificationtype"]],["bool"]]],[11,"le","","",132,[[["self"],["checkoutnotificationtype"]],["bool"]]],[11,"gt","","",132,[[["self"],["checkoutnotificationtype"]],["bool"]]],[11,"ge","","",132,[[["self"],["checkoutnotificationtype"]],["bool"]]],[11,"cmp","","",132,[[["self"],["checkoutnotificationtype"]],["ordering"]]],[11,"hash","","",132,N],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[18,"CONFLICT","","Notification about a conflict.",132,N],[18,"DIRTY","","Notification about a dirty file.",132,N],[18,"UPDATED","","Notification about an updated file.",132,N],[18,"UNTRACKED","","Notification about an untracked file.",132,N],[18,"IGNORED","","Notification about an ignored file.",132,N],[11,"empty","","Returns an empty set of flags.",132,[[],["checkoutnotificationtype"]]],[11,"all","","Returns the set containing all flags.",132,[[],["checkoutnotificationtype"]]],[11,"bits","","Returns the raw value of the flags currently stored.",132,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",132,[[["u32"]],["option",["checkoutnotificationtype"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",132,[[["u32"]],["checkoutnotificationtype"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",132,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,[[["self"],["checkoutnotificationtype"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,[[["self"],["checkoutnotificationtype"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",132,[[["self"],["checkoutnotificationtype"]]]],[11,"remove","","Removes the specified flags in-place.",132,[[["self"],["checkoutnotificationtype"]]]],[11,"toggle","","Toggles the specified flags in-place.",132,[[["self"],["checkoutnotificationtype"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",132,[[["self"],["checkoutnotificationtype"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",132,[[["self"],["checkoutnotificationtype"]],["checkoutnotificationtype"]]],[11,"bitor_assign","","Adds the set of flags.",132,[[["self"],["checkoutnotificationtype"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",132,[[["self"],["checkoutnotificationtype"]],["checkoutnotificationtype"]]],[11,"bitxor_assign","","Toggles the set of flags.",132,[[["self"],["checkoutnotificationtype"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",132,[[["self"],["checkoutnotificationtype"]],["checkoutnotificationtype"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",132,[[["self"],["checkoutnotificationtype"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",132,[[["self"],["checkoutnotificationtype"]],["checkoutnotificationtype"]]],[11,"sub_assign","","Disables all flags enabled in the set.",132,[[["self"],["checkoutnotificationtype"]]]],[11,"not","","Returns the complement of this set of flags.",132,[[["self"]],["checkoutnotificationtype"]]],[11,"extend","","",132,[[["self"],["t"]]]],[11,"from_iter","","",132,[[["t"]],["checkoutnotificationtype"]]],[11,"is_conflict","","",132,[[["self"]],["bool"]]],[11,"is_dirty","","",132,[[["self"]],["bool"]]],[11,"is_updated","","",132,[[["self"]],["bool"]]],[11,"is_untracked","","",132,[[["self"]],["bool"]]],[11,"is_ignored","","",132,[[["self"]],["bool"]]],[11,"clone","","",17,[[["self"]],["diffformat"]]],[11,"eq","","",133,[[["self"],["diffstatsformat"]],["bool"]]],[11,"ne","","",133,[[["self"],["diffstatsformat"]],["bool"]]],[11,"clone","","",133,[[["self"]],["diffstatsformat"]]],[11,"partial_cmp","","",133,[[["self"],["diffstatsformat"]],["option",["ordering"]]]],[11,"lt","","",133,[[["self"],["diffstatsformat"]],["bool"]]],[11,"le","","",133,[[["self"],["diffstatsformat"]],["bool"]]],[11,"gt","","",133,[[["self"],["diffstatsformat"]],["bool"]]],[11,"ge","","",133,[[["self"],["diffstatsformat"]],["bool"]]],[11,"cmp","","",133,[[["self"],["diffstatsformat"]],["ordering"]]],[11,"hash","","",133,N],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[18,"NONE","","Don't generate any stats",133,N],[18,"FULL","","Equivalent of `--stat` in git",133,N],[18,"SHORT","","Equivalent of `--shortstat` in git",133,N],[18,"NUMBER","","Equivalent of `--numstat` in git",133,N],[18,"INCLUDE_SUMMARY","","Extended header information such as creations, renames and mode changes, equivalent of `--summary` in git",133,N],[11,"empty","","Returns an empty set of flags.",133,[[],["diffstatsformat"]]],[11,"all","","Returns the set containing all flags.",133,[[],["diffstatsformat"]]],[11,"bits","","Returns the raw value of the flags currently stored.",133,[[["self"]],["git_diff_stats_format_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",133,[[["git_diff_stats_format_t"]],["option",["diffstatsformat"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",133,[[["git_diff_stats_format_t"]],["diffstatsformat"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",133,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",133,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",133,[[["self"],["diffstatsformat"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",133,[[["self"],["diffstatsformat"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",133,[[["self"],["diffstatsformat"]]]],[11,"remove","","Removes the specified flags in-place.",133,[[["self"],["diffstatsformat"]]]],[11,"toggle","","Toggles the specified flags in-place.",133,[[["self"],["diffstatsformat"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",133,[[["self"],["diffstatsformat"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",133,[[["self"],["diffstatsformat"]],["diffstatsformat"]]],[11,"bitor_assign","","Adds the set of flags.",133,[[["self"],["diffstatsformat"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",133,[[["self"],["diffstatsformat"]],["diffstatsformat"]]],[11,"bitxor_assign","","Toggles the set of flags.",133,[[["self"],["diffstatsformat"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",133,[[["self"],["diffstatsformat"]],["diffstatsformat"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",133,[[["self"],["diffstatsformat"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",133,[[["self"],["diffstatsformat"]],["diffstatsformat"]]],[11,"sub_assign","","Disables all flags enabled in the set.",133,[[["self"],["diffstatsformat"]]]],[11,"not","","Returns the complement of this set of flags.",133,[[["self"]],["diffstatsformat"]]],[11,"extend","","",133,[[["self"],["t"]]]],[11,"from_iter","","",133,[[["t"]],["diffstatsformat"]]],[11,"is_none","","",133,[[["self"]],["bool"]]],[11,"is_full","","",133,[[["self"]],["bool"]]],[11,"is_short","","",133,[[["self"]],["bool"]]],[11,"is_number","","",133,[[["self"]],["bool"]]],[11,"is_include_summary","","",133,[[["self"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",134,[[["self"],["stashapplyflags"]],["bool"]]],[11,"ne","","",134,[[["self"],["stashapplyflags"]],["bool"]]],[11,"clone","","",134,[[["self"]],["stashapplyflags"]]],[11,"partial_cmp","","",134,[[["self"],["stashapplyflags"]],["option",["ordering"]]]],[11,"lt","","",134,[[["self"],["stashapplyflags"]],["bool"]]],[11,"le","","",134,[[["self"],["stashapplyflags"]],["bool"]]],[11,"gt","","",134,[[["self"],["stashapplyflags"]],["bool"]]],[11,"ge","","",134,[[["self"],["stashapplyflags"]],["bool"]]],[11,"cmp","","",134,[[["self"],["stashapplyflags"]],["ordering"]]],[11,"hash","","",134,N],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[18,"DEFAULT","","",134,N],[18,"REINSTATE_INDEX","","Try to reinstate not only the working tree's changes, but also the index's changes.",134,N],[11,"empty","","Returns an empty set of flags.",134,[[],["stashapplyflags"]]],[11,"all","","Returns the set containing all flags.",134,[[],["stashapplyflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",134,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",134,[[["u32"]],["option",["stashapplyflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",134,[[["u32"]],["stashapplyflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",134,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",134,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",134,[[["self"],["stashapplyflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",134,[[["self"],["stashapplyflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",134,[[["self"],["stashapplyflags"]]]],[11,"remove","","Removes the specified flags in-place.",134,[[["self"],["stashapplyflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",134,[[["self"],["stashapplyflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",134,[[["self"],["stashapplyflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",134,[[["self"],["stashapplyflags"]],["stashapplyflags"]]],[11,"bitor_assign","","Adds the set of flags.",134,[[["self"],["stashapplyflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",134,[[["self"],["stashapplyflags"]],["stashapplyflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",134,[[["self"],["stashapplyflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",134,[[["self"],["stashapplyflags"]],["stashapplyflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",134,[[["self"],["stashapplyflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",134,[[["self"],["stashapplyflags"]],["stashapplyflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",134,[[["self"],["stashapplyflags"]]]],[11,"not","","Returns the complement of this set of flags.",134,[[["self"]],["stashapplyflags"]]],[11,"extend","","",134,[[["self"],["t"]]]],[11,"from_iter","","",134,[[["t"]],["stashapplyflags"]]],[11,"is_default","","",134,[[["self"]],["bool"]]],[11,"is_reinstate_index","","",134,[[["self"]],["bool"]]],[11,"default","","",134,[[],["self"]]],[11,"eq","","",135,[[["self"],["stashflags"]],["bool"]]],[11,"ne","","",135,[[["self"],["stashflags"]],["bool"]]],[11,"clone","","",135,[[["self"]],["stashflags"]]],[11,"partial_cmp","","",135,[[["self"],["stashflags"]],["option",["ordering"]]]],[11,"lt","","",135,[[["self"],["stashflags"]],["bool"]]],[11,"le","","",135,[[["self"],["stashflags"]],["bool"]]],[11,"gt","","",135,[[["self"],["stashflags"]],["bool"]]],[11,"ge","","",135,[[["self"],["stashflags"]],["bool"]]],[11,"cmp","","",135,[[["self"],["stashflags"]],["ordering"]]],[11,"hash","","",135,N],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[18,"DEFAULT","","",135,N],[18,"KEEP_INDEX","","All changes already added to the index are left intact in the working directory",135,N],[18,"INCLUDE_UNTRACKED","","All untracked files are also stashed and then cleaned up from the working directory",135,N],[18,"INCLUDE_IGNORED","","All ignored files are also stashed and then cleaned up from the working directory",135,N],[11,"empty","","Returns an empty set of flags.",135,[[],["stashflags"]]],[11,"all","","Returns the set containing all flags.",135,[[],["stashflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",135,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",135,[[["u32"]],["option",["stashflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",135,[[["u32"]],["stashflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",135,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,[[["self"],["stashflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,[[["self"],["stashflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",135,[[["self"],["stashflags"]]]],[11,"remove","","Removes the specified flags in-place.",135,[[["self"],["stashflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",135,[[["self"],["stashflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",135,[[["self"],["stashflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",135,[[["self"],["stashflags"]],["stashflags"]]],[11,"bitor_assign","","Adds the set of flags.",135,[[["self"],["stashflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",135,[[["self"],["stashflags"]],["stashflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",135,[[["self"],["stashflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",135,[[["self"],["stashflags"]],["stashflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",135,[[["self"],["stashflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",135,[[["self"],["stashflags"]],["stashflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",135,[[["self"],["stashflags"]]]],[11,"not","","Returns the complement of this set of flags.",135,[[["self"]],["stashflags"]]],[11,"extend","","",135,[[["self"],["t"]]]],[11,"from_iter","","",135,[[["t"]],["stashflags"]]],[11,"is_default","","",135,[[["self"]],["bool"]]],[11,"is_keep_index","","",135,[[["self"]],["bool"]]],[11,"is_include_untracked","","",135,[[["self"]],["bool"]]],[11,"is_include_ignored","","",135,[[["self"]],["bool"]]],[11,"default","","",135,[[],["self"]]]],"paths":[[3,"CredentialHelper"],[3,"IndexEntry"],[4,"DiffBinaryKind"],[4,"PackBuilderStage"],[4,"StatusShow"],[4,"ErrorCode"],[4,"ErrorClass"],[4,"RepositoryState"],[4,"Direction"],[4,"ResetType"],[4,"ObjectType"],[4,"ReferenceType"],[4,"BranchType"],[4,"ConfigLevel"],[4,"FileFavor"],[4,"Delta"],[4,"SubmoduleIgnore"],[4,"DiffFormat"],[4,"AutotagOption"],[4,"FetchPrune"],[4,"StashApplyProgress"],[4,"CloneLocal"],[3,"RepoBuilder"],[3,"CheckoutBuilder"],[3,"Cert"],[3,"CertHostkey"],[3,"CertX509"],[3,"StringArray"],[3,"Iter"],[3,"IterBytes"],[3,"OidArray"],[4,"Service"],[8,"SmartSubtransport"],[3,"Transport"],[3,"Blame"],[3,"BlameHunk"],[3,"BlameOptions"],[3,"BlameIter"],[3,"Blob"],[3,"BlobWriter"],[3,"Branch"],[3,"Branches"],[3,"Buf"],[3,"Commit"],[3,"Parents"],[3,"Config"],[3,"ConfigEntry"],[3,"ConfigEntries"],[3,"Cred"],[3,"Describe"],[3,"DescribeFormatOptions"],[3,"DescribeOptions"],[3,"Diff"],[3,"DiffDelta"],[3,"DiffFile"],[3,"DiffOptions"],[3,"Deltas"],[3,"DiffLine"],[3,"DiffHunk"],[3,"DiffStats"],[3,"DiffBinary"],[3,"DiffBinaryFile"],[3,"DiffFindOptions"],[3,"Error"],[3,"Index"],[3,"IndexEntries"],[3,"AnnotatedCommit"],[3,"MergeOptions"],[3,"Note"],[3,"Notes"],[3,"Object"],[3,"Odb"],[3,"OdbObject"],[3,"OdbReader"],[3,"OdbWriter"],[3,"Oid"],[3,"PackBuilder"],[3,"Pathspec"],[3,"PathspecMatchList"],[3,"PathspecEntries"],[3,"PathspecDiffEntries"],[3,"PathspecFailedEntries"],[3,"Patch"],[3,"ProxyOptions"],[3,"Reference"],[3,"References"],[3,"ReferenceNames"],[3,"Reflog"],[3,"ReflogEntry"],[3,"ReflogIter"],[3,"Refspec"],[3,"Remote"],[3,"Refspecs"],[3,"RemoteHead"],[3,"FetchOptions"],[3,"PushOptions"],[3,"RemoteConnection"],[3,"RemoteCallbacks"],[3,"Progress"],[3,"Repository"],[3,"RepositoryInitOptions"],[3,"Revspec"],[3,"Revwalk"],[3,"Signature"],[3,"StatusOptions"],[3,"Statuses"],[3,"StatusIter"],[3,"StatusEntry"],[3,"Submodule"],[3,"SubmoduleUpdateOptions"],[3,"StashApplyOptions"],[3,"Tag"],[3,"Time"],[3,"IndexTime"],[3,"Tree"],[3,"TreeEntry"],[3,"TreeIter"],[3,"TreeBuilder"],[8,"IntoCString"],[3,"Sort"],[3,"CredentialType"],[3,"IndexEntryFlag"],[3,"IndexEntryExtendedFlag"],[3,"IndexAddOption"],[3,"RepositoryOpenFlags"],[3,"RevparseMode"],[3,"MergeAnalysis"],[3,"MergePreference"],[3,"Status"],[3,"RepositoryInitMode"],[3,"SubmoduleStatus"],[3,"PathspecFlags"],[3,"CheckoutNotificationType"],[3,"DiffStatsFormat"],[3,"StashApplyFlags"],[3,"StashFlags"]]};
searchIndex["idna"]={"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",N,[[["str"]],["result",["string","errors"]]]],[5,"domain_to_unicode","","The domain to Unicode algorithm.",N,N],[0,"punycode","","Punycode (RFC 3492) implementation.",N,N],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",N,[[["str"]],["option",["string"]]]],[5,"decode","","Convert Punycode to Unicode.",N,[[["str"]],["option",["vec"]]]],[5,"encode_str","","Convert an Unicode `str` to Punycode.",N,[[["str"]],["option",["string"]]]],[5,"encode","","Convert Unicode to Punycode.",N,N],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",N,N],[3,"Flags","idna::uts46","",N,N],[12,"use_std3_ascii_rules","","",0,N],[12,"transitional_processing","","",0,N],[12,"verify_dns_length","","",0,N],[3,"Errors","","Errors recorded during UTS #46 processing.",N,N],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",N,[[["str"],["flags"]],["result",["string","errors"]]]],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",N,N],[7,"PUNYCODE_PREFIX","","",N,N],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["json"]={"doc":"","items":[[4,"Error","json","Error type of this crate.",N,N],[13,"UnexpectedCharacter","","",0,N],[12,"ch","json::Error","",0,N],[12,"line","","",0,N],[12,"column","","",0,N],[13,"UnexpectedEndOfJson","json","",0,N],[13,"ExceededDepthLimit","","",0,N],[13,"FailedUtf8Parsing","","",0,N],[13,"WrongType","","",0,N],[4,"JsonValue","","",N,N],[13,"Null","","",1,N],[13,"Short","","",1,N],[13,"String","","",1,N],[13,"Number","","",1,N],[13,"Boolean","","",1,N],[13,"Object","","",1,N],[13,"Array","","",1,N],[4,"JsonError","","Error type of this crate.",N,N],[13,"UnexpectedCharacter","","",0,N],[12,"ch","json::JsonError","",0,N],[12,"line","","",0,N],[12,"column","","",0,N],[13,"UnexpectedEndOfJson","json","",0,N],[13,"ExceededDepthLimit","","",0,N],[13,"FailedUtf8Parsing","","",0,N],[13,"WrongType","","",0,N],[5,"parse","","",N,[[["str"]],["result",["jsonvalue"]]]],[5,"from","","Convenience for `JsonValue::from(value)`",N,[[["t"]],["jsonvalue"]]],[5,"stringify","","Pretty prints out the value as JSON string.",N,[[["t"]],["string"]]],[5,"stringify_pretty","","Pretty prints out the value as JSON string. Second argument is a number of spaces to indent new blocks with.",N,[[["t"],["u16"]],["string"]]],[11,"from","","",1,[[["str"]],["jsonvalue"]]],[11,"from","","",1,[[["option"]],["jsonvalue"]]],[11,"from","","",1,[[["vec"]],["jsonvalue"]]],[11,"from","","",1,[[["hashmap",["string","jsonvalue"]]],["jsonvalue"]]],[11,"from","","",1,[[["btreemap",["string","jsonvalue"]]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"from","","",1,[[["string"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"from","","",1,[[["isize"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["isize"]],["bool"]]],[11,"from","","",1,[[["usize"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["usize"]],["bool"]]],[11,"from","","",1,[[["i8"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["i8"]],["bool"]]],[11,"from","","",1,[[["i16"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["i16"]],["bool"]]],[11,"from","","",1,[[["i32"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["i32"]],["bool"]]],[11,"from","","",1,[[["i64"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["i64"]],["bool"]]],[11,"from","","",1,[[["u8"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["u8"]],["bool"]]],[11,"from","","",1,[[["u16"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["u16"]],["bool"]]],[11,"from","","",1,[[["u32"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["u32"]],["bool"]]],[11,"from","","",1,[[["u64"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["u64"]],["bool"]]],[11,"from","","",1,[[["f32"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["f32"]],["bool"]]],[11,"from","","",1,[[["f64"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["f64"]],["bool"]]],[11,"from","","",1,[[["number"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["number"]],["bool"]]],[11,"from","","",1,[[["object"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["object"]],["bool"]]],[11,"from","","",1,[[["bool"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["bool"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["jsonvalue"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new_object","","Create an empty `JsonValue::Object` instance. When creating an object with data, consider using the `object!` macro.",1,[[],["jsonvalue"]]],[11,"new_array","","Create an empty `JsonValue::Array` instance. When creating array with data, consider using the `array!` macro.",1,[[],["jsonvalue"]]],[11,"dump","","Prints out the value as JSON string.",1,[[["self"]],["string"]]],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",1,[[["self"],["u16"]],["string"]]],[11,"to_writer","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,[[["self"],["w"]]]],[11,"write","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,[[["self"],["w"]],["result"]]],[11,"write_pretty","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,[[["self"],["w"],["u16"]],["result"]]],[11,"is_string","","",1,[[["self"]],["bool"]]],[11,"is_number","","",1,[[["self"]],["bool"]]],[11,"is_boolean","","",1,[[["self"]],["bool"]]],[11,"is_null","","",1,[[["self"]],["bool"]]],[11,"is_object","","",1,[[["self"]],["bool"]]],[11,"is_array","","",1,[[["self"]],["bool"]]],[11,"is_empty","","Checks whether the value is empty. Returns true for:",1,[[["self"]],["bool"]]],[11,"as_str","","",1,[[["self"]],["option",["str"]]]],[11,"as_number","","",1,[[["self"]],["option",["number"]]]],[11,"as_f64","","",1,[[["self"]],["option",["f64"]]]],[11,"as_f32","","",1,[[["self"]],["option",["f32"]]]],[11,"as_u64","","",1,[[["self"]],["option",["u64"]]]],[11,"as_u32","","",1,[[["self"]],["option",["u32"]]]],[11,"as_u16","","",1,[[["self"]],["option",["u16"]]]],[11,"as_u8","","",1,[[["self"]],["option",["u8"]]]],[11,"as_usize","","",1,[[["self"]],["option",["usize"]]]],[11,"as_i64","","",1,[[["self"]],["option",["i64"]]]],[11,"as_i32","","",1,[[["self"]],["option",["i32"]]]],[11,"as_i16","","",1,[[["self"]],["option",["i16"]]]],[11,"as_i8","","",1,[[["self"]],["option",["i8"]]]],[11,"as_isize","","",1,[[["self"]],["option",["isize"]]]],[11,"as_bool","","",1,[[["self"]],["option",["bool"]]]],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",1,[[["self"],["u16"]],["option",["u64"]]]],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",1,[[["self"],["u16"]],["option",["i64"]]]],[11,"take","","Take over the ownership of the value, leaving `Null` in it's place.",1,[[["self"]],["jsonvalue"]]],[11,"take_string","","Checks that self is a string, returns an owned Rust `String`, leaving `Null` in it's place.",1,[[["self"]],["option",["string"]]]],[11,"push","","Works on `JsonValue::Array` - pushes a new value to the array.",1,[[["self"],["t"]],["result"]]],[11,"pop","","Works on `JsonValue::Array` - remove and return last element from an array. On failure returns a null.",1,[[["self"]],["jsonvalue"]]],[11,"contains","","Works on `JsonValue::Array` - checks if the array contains a value",1,[[["self"],["t"]],["bool"]]],[11,"has_key","","Works on `JsonValue::Object` - checks if the object has a key",1,[[["self"],["str"]],["bool"]]],[11,"len","","Returns length of array or object (number of keys), defaults to `0` for other types.",1,[[["self"]],["usize"]]],[11,"members","","Works on `JsonValue::Array` - returns an iterator over members. Will return an empty iterator if called on non-array types.",1,[[["self"]],["members"]]],[11,"members_mut","","Works on `JsonValue::Array` - returns a mutable iterator over members. Will return an empty iterator if called on non-array types.",1,[[["self"]],["membersmut"]]],[11,"entries","","Works on `JsonValue::Object` - returns an iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,[[["self"]],["entries"]]],[11,"entries_mut","","Works on `JsonValue::Object` - returns a mutable iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,[[["self"]],["entriesmut"]]],[11,"remove","","Works on `JsonValue::Object` - remove a key and return the value it held. If the key was not present, the method is called on anything but an object, it will return a null.",1,[[["self"],["str"]],["jsonvalue"]]],[11,"array_remove","","Works on `JsonValue::Array` - remove an entry and return the value it held. If the method is called on anything but an object or if the index is out of bounds, it will return `JsonValue::Null`.",1,[[["self"],["usize"]],["jsonvalue"]]],[11,"clear","","When called on an array or an object, will wipe them clean. When called on a string will clear the string. Numbers and booleans become null.",1,[[["self"]]]],[11,"index","","",1,[[["self"],["usize"]],["jsonvalue"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["jsonvalue"]]],[11,"index","","",1,[[["self"],["str"]],["jsonvalue"]]],[11,"index","","",1,[[["self"],["string"]],["jsonvalue"]]],[11,"index","","",1,[[["self"],["string"]],["jsonvalue"]]],[11,"index_mut","","",1,[[["self"],["str"]],["jsonvalue"]]],[11,"index_mut","","",1,[[["self"],["string"]],["jsonvalue"]]],[11,"index_mut","","",1,[[["self"],["string"]],["jsonvalue"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"wrong_type","","",0,[[["str"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[0,"short","","",N,N],[3,"Short","json::short","",N,N],[17,"MAX_LEN","","",N,N],[11,"clone","","",2,[[["self"]],["short"]]],[11,"from_slice","","Creates a `Short` from a `&str` slice. This method can cause buffer overflow if the length of the slice is larger than `MAX_LEN`, which is why it is marked as `unsafe`.",2,[[["str"]],["self"]]],[11,"as_str","","Cheaply obtain a `&str` slice out of the `Short`.",2,[[["self"]],["str"]]],[11,"eq","","",2,[[["self"],["short"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"deref","","",2,[[["self"]],["str"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[0,"object","json","",N,N],[3,"Object","json::object","A binary tree implementation of a string -> `JsonValue` map. You normally don't have to interact with instances of `Object`, much more likely you will be using the `JsonValue::Object` variant, which wraps around this struct.",N,N],[3,"Iter","","",N,N],[3,"IterMut","","",N,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty instance of `Object`. Empty `Object` performs no allocation until a value is inserted into it.",3,[[],["self"]]],[11,"with_capacity","","Create a new `Object` with memory preallocated for `capacity` number of entries.",3,[[["usize"]],["self"]]],[11,"insert","","Insert a new entry, or override an existing one. Note that `key` has to be a `&str` slice and not an owned `String`. The internals of `Object` will handle the heap allocation of the key if needed for better performance.",3,[[["self"],["str"],["jsonvalue"]]]],[11,"override_last","","",3,[[["self"],["jsonvalue"]]]],[11,"get","","",3,[[["self"],["str"]],["option",["jsonvalue"]]]],[11,"get_mut","","",3,[[["self"],["str"]],["option",["jsonvalue"]]]],[11,"remove","","Attempts to remove the value behind `key`, if successful will return the `JsonValue` stored behind the `key`.",3,[[["self"],["str"]],["option",["jsonvalue"]]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"is_empty","","",3,[[["self"]],["bool"]]],[11,"clear","","Wipe the `Object` clear. The capacity will remain untouched.",3,[[["self"]]]],[11,"iter","","",3,[[["self"]],["iter"]]],[11,"iter_mut","","",3,[[["self"]],["itermut"]]],[11,"dump","","Prints out the value as JSON string.",3,[[["self"]],["string"]]],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",3,[[["self"],["u16"]],["string"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"eq","","",3,[[["self"],["object"]],["bool"]]],[11,"empty","","Create an empty iterator that always returns `None`",4,[[],["self"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"empty","","Create an empty iterator that always returns `None`",5,[[],["self"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"index","","",3,[[["self"],["str"]],["jsonvalue"]]],[11,"index","","",3,[[["self"],["string"]],["jsonvalue"]]],[11,"index","","",3,[[["self"],["string"]],["jsonvalue"]]],[11,"index_mut","","",3,[[["self"],["str"]],["jsonvalue"]]],[11,"index_mut","","",3,[[["self"],["string"]],["jsonvalue"]]],[11,"index_mut","","",3,[[["self"],["string"]],["jsonvalue"]]],[0,"number","json","",N,N],[3,"Number","json::number","Number representation used inside `JsonValue`. You can easily convert the `Number` type into native Rust number types and back, or use the equality operator with another number type.",N,N],[17,"NAN","","NaN value represented in `Number` type. NaN is equal to itself.",N,N],[11,"clone","","",6,[[["self"]],["number"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"from_parts_unchecked","","Construct a new `Number` from parts. This can't create a NaN value.",6,[[["bool"],["u64"],["i16"]],["self"]]],[11,"from_parts","","Construct a new `Number` from parts, stripping unnecessary trailing zeroes. This can't create a NaN value.",6,[[["bool"],["u64"],["i16"]],["self"]]],[11,"as_parts","","Reverse to `from_parts` - obtain parts from an existing `Number`.",6,N],[11,"is_sign_positive","","",6,[[["self"]],["bool"]]],[11,"is_zero","","",6,[[["self"]],["bool"]]],[11,"is_nan","","",6,[[["self"]],["bool"]]],[11,"is_empty","","Test if the number is NaN or has a zero value.",6,[[["self"]],["bool"]]],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",6,[[["self"],["u16"]],["option",["u64"]]]],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",6,[[["self"],["u16"]],["option",["i64"]]]],[11,"eq","","",6,[[["self"],["number"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"from","","",6,[[["f64"]],["number"]]],[11,"from","","",6,[[["f32"]],["number"]]],[11,"eq","","",6,[[["self"],["f64"]],["bool"]]],[11,"eq","","",6,[[["self"],["f32"]],["bool"]]],[11,"from","","",6,[[["isize"]],["number"]]],[11,"eq","","",6,[[["self"],["isize"]],["bool"]]],[11,"from","","",6,[[["i8"]],["number"]]],[11,"eq","","",6,[[["self"],["i8"]],["bool"]]],[11,"from","","",6,[[["i16"]],["number"]]],[11,"eq","","",6,[[["self"],["i16"]],["bool"]]],[11,"from","","",6,[[["i32"]],["number"]]],[11,"eq","","",6,[[["self"],["i32"]],["bool"]]],[11,"from","","",6,[[["i64"]],["number"]]],[11,"eq","","",6,[[["self"],["i64"]],["bool"]]],[11,"from","","",6,[[["usize"]],["number"]]],[11,"eq","","",6,[[["self"],["usize"]],["bool"]]],[11,"from","","",6,[[["u8"]],["number"]]],[11,"eq","","",6,[[["self"],["u8"]],["bool"]]],[11,"from","","",6,[[["u16"]],["number"]]],[11,"eq","","",6,[[["self"],["u16"]],["bool"]]],[11,"from","","",6,[[["u32"]],["number"]]],[11,"eq","","",6,[[["self"],["u32"]],["bool"]]],[11,"from","","",6,[[["u64"]],["number"]]],[11,"eq","","",6,[[["self"],["u64"]],["bool"]]],[11,"neg","","",6,[[["self"]],["number"]]],[0,"iterators","json","",N,N],[6,"Members","json::iterators","Iterator over members of `JsonValue::Array`.",N,N],[6,"MembersMut","","Mutable iterator over members of `JsonValue::Array`.",N,N],[6,"Entries","","Iterator over key value pairs of `JsonValue::Object`.",N,N],[6,"EntriesMut","","Mutable iterator over key value pairs of `JsonValue::Object`.",N,N],[6,"Result","json","Result type used by this crate.",N,N],[6,"Array","","",N,N],[14,"array","","Helper macro for creating instances of `JsonValue::Array`.",N,N],[14,"object","","Helper macro for creating instances of `JsonValue::Object`.",N,N],[11,"eq","json::number","",6,[[["self"],["jsonvalue"]],["bool"]]],[11,"eq","json::object","",3,[[["self"],["jsonvalue"]],["bool"]]]],"paths":[[4,"Error"],[4,"JsonValue"],[3,"Short"],[3,"Object"],[3,"Iter"],[3,"IterMut"],[3,"Number"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["lazysort"]={"doc":"","items":[[3,"LazySortIterator","lazysort","",N,N],[3,"LazySortIteratorPartialFirst","","",N,N],[3,"LazySortIteratorPartialLast","","",N,N],[3,"LazySortIteratorBy","","",N,N],[8,"Sorted","","",N,N],[16,"Item","","",0,N],[10,"sorted","","",0,[[["self"]],["lazysortiterator"]]],[8,"SortedPartial","","",N,N],[16,"Item","","",1,N],[10,"sorted_partial_first","","",1,[[["self"]],["lazysortiteratorpartialfirst"]]],[10,"sorted_partial_last","","",1,[[["self"]],["lazysortiteratorpartiallast"]]],[8,"SortedBy","","",N,N],[16,"Item","","",2,N],[10,"sorted_by","","",2,[[["self"],["f"]],["lazysortiteratorby"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N]],"paths":[[8,"Sorted"],[8,"SortedPartial"],[8,"SortedBy"],[3,"LazySortIterator"],[3,"LazySortIteratorPartialFirst"],[3,"LazySortIteratorPartialLast"],[3,"LazySortIteratorBy"]]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",116,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]],[11,"clone","","",117,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",118,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",119,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",120,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",121,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",123,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",124,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",125,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",126,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",127,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",128,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",129,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",130,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["libgit2_sys"]={"doc":"","items":[[3,"git_revspec","libgit2_sys","",N,N],[12,"from","","",0,N],[12,"to","","",0,N],[12,"flags","","",0,N],[3,"git_error","","",N,N],[12,"message","","",1,N],[12,"klass","","",1,N],[3,"git_oid","","",N,N],[12,"id","","",2,N],[3,"git_strarray","","",N,N],[12,"strings","","",3,N],[12,"count","","",3,N],[3,"git_oidarray","","",N,N],[12,"ids","","",4,N],[12,"count","","",4,N],[3,"git_signature","","",N,N],[12,"name","","",5,N],[12,"email","","",5,N],[12,"when","","",5,N],[3,"git_time","","",N,N],[12,"time","","",6,N],[12,"offset","","",6,N],[12,"sign","","",6,N],[3,"git_clone_options","","",N,N],[12,"version","","",7,N],[12,"checkout_opts","","",7,N],[12,"fetch_opts","","",7,N],[12,"bare","","",7,N],[12,"local","","",7,N],[12,"checkout_branch","","",7,N],[12,"repository_cb","","",7,N],[12,"repository_cb_payload","","",7,N],[12,"remote_cb","","",7,N],[12,"remote_cb_payload","","",7,N],[3,"git_checkout_options","","",N,N],[12,"version","","",8,N],[12,"checkout_strategy","","",8,N],[12,"disable_filters","","",8,N],[12,"dir_mode","","",8,N],[12,"file_mode","","",8,N],[12,"file_open_flags","","",8,N],[12,"notify_flags","","",8,N],[12,"notify_cb","","",8,N],[12,"notify_payload","","",8,N],[12,"progress_cb","","",8,N],[12,"progress_payload","","",8,N],[12,"paths","","",8,N],[12,"baseline","","",8,N],[12,"baseline_index","","",8,N],[12,"target_directory","","",8,N],[12,"ancestor_label","","",8,N],[12,"our_label","","",8,N],[12,"their_label","","",8,N],[12,"perfdata_cb","","",8,N],[12,"perfdata_payload","","",8,N],[3,"git_checkout_perfdata","","",N,N],[12,"mkdir_calls","","",9,N],[12,"stat_calls","","",9,N],[12,"chmod_calls","","",9,N],[3,"git_remote_callbacks","","",N,N],[12,"version","","",10,N],[12,"sideband_progress","","",10,N],[12,"completion","","",10,N],[12,"credentials","","",10,N],[12,"certificate_check","","",10,N],[12,"transfer_progress","","",10,N],[12,"update_tips","","",10,N],[12,"pack_progress","","",10,N],[12,"push_transfer_progress","","",10,N],[12,"push_update_reference","","",10,N],[12,"push_negotiation","","",10,N],[12,"transport","","",10,N],[12,"payload","","",10,N],[3,"git_fetch_options","","",N,N],[12,"version","","",11,N],[12,"callbacks","","",11,N],[12,"prune","","",11,N],[12,"update_fetchhead","","",11,N],[12,"download_tags","","",11,N],[12,"proxy_opts","","",11,N],[12,"custom_headers","","",11,N],[3,"git_push_update","","",N,N],[12,"src_refname","","",12,N],[12,"dst_refname","","",12,N],[12,"src","","",12,N],[12,"dst","","",12,N],[3,"git_cert","","",N,N],[12,"cert_type","","",13,N],[3,"git_cert_hostkey","","",N,N],[12,"parent","","",14,N],[12,"kind","","",14,N],[12,"hash_md5","","",14,N],[12,"hash_sha1","","",14,N],[3,"git_cert_x509","","",N,N],[12,"parent","","",15,N],[12,"data","","",15,N],[12,"len","","",15,N],[3,"git_transfer_progress","","",N,N],[12,"total_objects","","",16,N],[12,"indexed_objects","","",16,N],[12,"received_objects","","",16,N],[12,"local_objects","","",16,N],[12,"total_deltas","","",16,N],[12,"indexed_deltas","","",16,N],[12,"received_bytes","","",16,N],[3,"git_diff_file","","",N,N],[12,"id","","",17,N],[12,"path","","",17,N],[12,"size","","",17,N],[12,"flags","","",17,N],[12,"mode","","",17,N],[3,"git_status_options","","",N,N],[12,"version","","",18,N],[12,"show","","",18,N],[12,"flags","","",18,N],[12,"pathspec","","",18,N],[12,"baseline","","",18,N],[3,"git_diff_delta","","",N,N],[12,"status","","",19,N],[12,"flags","","",19,N],[12,"similarity","","",19,N],[12,"nfiles","","",19,N],[12,"old_file","","",19,N],[12,"new_file","","",19,N],[3,"git_status_entry","","",N,N],[12,"status","","",20,N],[12,"head_to_index","","",20,N],[12,"index_to_workdir","","",20,N],[3,"git_buf","","",N,N],[12,"ptr","","",21,N],[12,"asize","","",21,N],[12,"size","","",21,N],[3,"git_blame_options","","",N,N],[12,"version","","",22,N],[12,"flags","","",22,N],[12,"min_match_characters","","",22,N],[12,"newest_commit","","",22,N],[12,"oldest_commit","","",22,N],[12,"min_line","","",22,N],[12,"max_line","","",22,N],[3,"git_blame_hunk","","",N,N],[12,"lines_in_hunk","","",23,N],[12,"final_commit_id","","",23,N],[12,"final_start_line_number","","",23,N],[12,"final_signature","","",23,N],[12,"orig_commit_id","","",23,N],[12,"orig_path","","",23,N],[12,"orig_start_line_number","","",23,N],[12,"orig_signature","","",23,N],[12,"boundary","","",23,N],[3,"git_index_entry","","",N,N],[12,"ctime","","",24,N],[12,"mtime","","",24,N],[12,"dev","","",24,N],[12,"ino","","",24,N],[12,"mode","","",24,N],[12,"uid","","",24,N],[12,"gid","","",24,N],[12,"file_size","","",24,N],[12,"id","","",24,N],[12,"flags","","",24,N],[12,"flags_extended","","",24,N],[12,"path","","",24,N],[3,"git_index_time","","",N,N],[12,"seconds","","",25,N],[12,"nanoseconds","","",25,N],[3,"git_config_entry","","",N,N],[12,"name","","",26,N],[12,"value","","",26,N],[12,"include_depth","","",26,N],[12,"level","","",26,N],[12,"free","","",26,N],[12,"payload","","",26,N],[3,"git_submodule_update_options","","",N,N],[12,"version","","",27,N],[12,"checkout_opts","","",27,N],[12,"fetch_opts","","",27,N],[12,"allow_fetch","","",27,N],[3,"git_writestream","","",N,N],[12,"write","","",28,N],[12,"close","","",28,N],[12,"free","","",28,N],[3,"git_cred","","",N,N],[12,"credtype","","",29,N],[12,"free","","",29,N],[3,"git_push_options","","",N,N],[12,"version","","",30,N],[12,"pb_parallelism","","",30,N],[12,"callbacks","","",30,N],[12,"proxy_opts","","",30,N],[12,"custom_headers","","",30,N],[3,"git_repository_init_options","","",N,N],[12,"version","","",31,N],[12,"flags","","",31,N],[12,"mode","","",31,N],[12,"workdir_path","","",31,N],[12,"description","","",31,N],[12,"template_path","","",31,N],[12,"initial_head","","",31,N],[12,"origin_url","","",31,N],[3,"git_remote_head","","",N,N],[12,"local","","",32,N],[12,"oid","","",32,N],[12,"loid","","",32,N],[12,"name","","",32,N],[12,"symref_target","","",32,N],[3,"git_diff_hunk","","",N,N],[12,"old_start","","",33,N],[12,"old_lines","","",33,N],[12,"new_start","","",33,N],[12,"new_lines","","",33,N],[12,"header_len","","",33,N],[12,"header","","",33,N],[3,"git_diff_line","","",N,N],[12,"origin","","",34,N],[12,"old_lineno","","",34,N],[12,"new_lineno","","",34,N],[12,"num_lines","","",34,N],[12,"content_len","","",34,N],[12,"content_offset","","",34,N],[12,"content","","",34,N],[3,"git_diff_options","","",N,N],[12,"version","","",35,N],[12,"flags","","",35,N],[12,"ignore_submodules","","",35,N],[12,"pathspec","","",35,N],[12,"notify_cb","","",35,N],[12,"progress_cb","","",35,N],[12,"payload","","",35,N],[12,"context_lines","","",35,N],[12,"interhunk_lines","","",35,N],[12,"id_abbrev","","",35,N],[12,"max_size","","",35,N],[12,"old_prefix","","",35,N],[12,"new_prefix","","",35,N],[3,"git_diff_find_options","","",N,N],[12,"version","","",36,N],[12,"flags","","",36,N],[12,"rename_threshold","","",36,N],[12,"rename_from_rewrite_threshold","","",36,N],[12,"copy_threshold","","",36,N],[12,"break_rewrite_threshold","","",36,N],[12,"rename_limit","","",36,N],[12,"metric","","",36,N],[3,"git_diff_similarity_metric","","",N,N],[12,"file_signature","","",37,N],[12,"buffer_signature","","",37,N],[12,"free_signature","","",37,N],[12,"similarity","","",37,N],[12,"payload","","",37,N],[3,"git_diff_binary","","",N,N],[12,"contains_data","","",38,N],[12,"old_file","","",38,N],[12,"new_file","","",38,N],[3,"git_diff_binary_file","","",N,N],[12,"kind","","",39,N],[12,"data","","",39,N],[12,"datalen","","",39,N],[12,"inflatedlen","","",39,N],[3,"git_merge_options","","",N,N],[12,"version","","",40,N],[12,"flags","","",40,N],[12,"rename_threshold","","",40,N],[12,"target_limit","","",40,N],[12,"metric","","",40,N],[12,"recursion_limit","","",40,N],[12,"default_driver","","",40,N],[12,"file_favor","","",40,N],[12,"file_flags","","",40,N],[3,"git_transport","","",N,N],[12,"version","","",41,N],[12,"set_callbacks","","",41,N],[12,"set_custom_headers","","",41,N],[12,"connect","","",41,N],[12,"ls","","",41,N],[12,"push","","",41,N],[12,"negotiate_fetch","","",41,N],[12,"download_pack","","",41,N],[12,"is_connected","","",41,N],[12,"read_flags","","",41,N],[12,"cancel","","",41,N],[12,"close","","",41,N],[12,"free","","",41,N],[3,"git_odb_backend","","",N,N],[12,"version","","",42,N],[12,"odb","","",42,N],[12,"read","","",42,N],[12,"read_prefix","","",42,N],[12,"read_header","","",42,N],[12,"write","","",42,N],[12,"writestream","","",42,N],[12,"readstream","","",42,N],[12,"exists","","",42,N],[12,"exists_prefix","","",42,N],[12,"refresh","","",42,N],[12,"foreach","","",42,N],[12,"writepack","","",42,N],[12,"freshen","","",42,N],[12,"free","","",42,N],[3,"git_refdb_backend","","",N,N],[12,"version","","",43,N],[12,"exists","","",43,N],[12,"lookup","","",43,N],[12,"iterator","","",43,N],[12,"write","","",43,N],[12,"rename","","",43,N],[12,"del","","",43,N],[12,"compress","","",43,N],[12,"has_log","","",43,N],[12,"ensure_log","","",43,N],[12,"free","","",43,N],[12,"reflog_read","","",43,N],[12,"reflog_write","","",43,N],[12,"reflog_rename","","",43,N],[12,"reflog_delete","","",43,N],[12,"lock","","",43,N],[12,"unlock","","",43,N],[3,"git_proxy_options","","",N,N],[12,"version","","",44,N],[12,"kind","","",44,N],[12,"url","","",44,N],[12,"credentials","","",44,N],[12,"certificate_check","","",44,N],[12,"payload","","",44,N],[3,"git_smart_subtransport_stream","","",N,N],[12,"subtransport","","",45,N],[12,"read","","",45,N],[12,"write","","",45,N],[12,"free","","",45,N],[3,"git_smart_subtransport","","",N,N],[12,"action","","",46,N],[12,"close","","",46,N],[12,"free","","",46,N],[3,"git_smart_subtransport_definition","","",N,N],[12,"callback","","",47,N],[12,"rpc","","",47,N],[12,"param","","",47,N],[3,"git_describe_options","","",N,N],[12,"version","","",48,N],[12,"max_candidates_tags","","",48,N],[12,"describe_strategy","","",48,N],[12,"pattern","","",48,N],[12,"only_follow_first_parent","","",48,N],[12,"show_commit_oid_as_fallback","","",48,N],[3,"git_describe_format_options","","",N,N],[12,"version","","",49,N],[12,"abbreviated_size","","",49,N],[12,"always_use_long_format","","",49,N],[12,"dirty_suffix","","",49,N],[3,"git_stash_apply_options","","",N,N],[12,"version","","",50,N],[12,"flags","","",50,N],[12,"checkout_options","","",50,N],[12,"progress_cb","","",50,N],[12,"progress_payload","","",50,N],[4,"git_blob","","",N,N],[4,"git_branch_iterator","","",N,N],[4,"git_blame","","",N,N],[4,"git_commit","","",N,N],[4,"git_config","","",N,N],[4,"git_config_iterator","","",N,N],[4,"git_index","","",N,N],[4,"git_object","","",N,N],[4,"git_reference","","",N,N],[4,"git_reference_iterator","","",N,N],[4,"git_annotated_commit","","",N,N],[4,"git_refdb","","",N,N],[4,"git_refspec","","",N,N],[4,"git_remote","","",N,N],[4,"git_repository","","",N,N],[4,"git_revwalk","","",N,N],[4,"git_submodule","","",N,N],[4,"git_tag","","",N,N],[4,"git_tree","","",N,N],[4,"git_tree_entry","","",N,N],[4,"git_treebuilder","","",N,N],[4,"git_push","","",N,N],[4,"git_note","","",N,N],[4,"git_note_iterator","","",N,N],[4,"git_status_list","","",N,N],[4,"git_pathspec","","",N,N],[4,"git_pathspec_match_list","","",N,N],[4,"git_diff","","",N,N],[4,"git_diff_stats","","",N,N],[4,"git_patch","","",N,N],[4,"git_reflog","","",N,N],[4,"git_reflog_entry","","",N,N],[4,"git_describe_result","","",N,N],[4,"git_packbuilder","","",N,N],[4,"git_odb","","",N,N],[4,"git_odb_stream","","",N,N],[4,"git_odb_object","","",N,N],[4,"git_odb_writepack","","",N,N],[4,"git_worktree","","",N,N],[4,"LIBSSH2_SESSION","","",N,N],[4,"LIBSSH2_USERAUTH_KBDINT_PROMPT","","",N,N],[4,"LIBSSH2_USERAUTH_KBDINT_RESPONSE","","",N,N],[5,"init","","",N,[[]]],[5,"git_libgit2_init","","",N,N],[5,"git_libgit2_shutdown","","",N,N],[5,"git_repository_new","","",N,N],[5,"git_repository_free","","",N,N],[5,"git_repository_open","","",N,N],[5,"git_repository_open_bare","","",N,N],[5,"git_repository_open_ext","","",N,N],[5,"git_repository_open_from_worktree","","",N,N],[5,"git_repository_wrap_odb","","",N,N],[5,"git_repository_init","","",N,N],[5,"git_repository_init_ext","","",N,N],[5,"git_repository_init_init_options","","",N,N],[5,"git_repository_get_namespace","","",N,N],[5,"git_repository_set_namespace","","",N,N],[5,"git_repository_head","","",N,N],[5,"git_repository_set_head","","",N,N],[5,"git_repository_head_detached","","",N,N],[5,"git_repository_set_head_detached","","",N,N],[5,"git_repository_set_bare","","",N,N],[5,"git_repository_is_worktree","","",N,N],[5,"git_repository_is_bare","","",N,N],[5,"git_repository_is_empty","","",N,N],[5,"git_repository_is_shallow","","",N,N],[5,"git_repository_path","","",N,N],[5,"git_repository_state","","",N,N],[5,"git_repository_workdir","","",N,N],[5,"git_repository_set_workdir","","",N,N],[5,"git_repository_index","","",N,N],[5,"git_repository_set_index","","",N,N],[5,"git_repository_message","","",N,N],[5,"git_repository_message_remove","","",N,N],[5,"git_repository_config","","",N,N],[5,"git_repository_set_config","","",N,N],[5,"git_repository_config_snapshot","","",N,N],[5,"git_repository_discover","","",N,N],[5,"git_repository_set_odb","","",N,N],[5,"git_repository_refdb","","",N,N],[5,"git_repository_set_refdb","","",N,N],[5,"git_repository_reinit_filesystem","","",N,N],[5,"git_ignore_add_rule","","",N,N],[5,"git_ignore_clear_internal_rules","","",N,N],[5,"git_ignore_path_is_ignored","","",N,N],[5,"git_revparse","","",N,N],[5,"git_revparse_single","","",N,N],[5,"git_revparse_ext","","",N,N],[5,"git_object_dup","","",N,N],[5,"git_object_id","","",N,N],[5,"git_object_free","","",N,N],[5,"git_object_lookup","","",N,N],[5,"git_object_type","","",N,N],[5,"git_object_peel","","",N,N],[5,"git_object_short_id","","",N,N],[5,"git_object_type2string","","",N,N],[5,"git_object_string2type","","",N,N],[5,"git_object_typeisloose","","",N,N],[5,"git_oid_fromraw","","",N,N],[5,"git_oid_fromstrn","","",N,N],[5,"git_oid_tostr","","",N,N],[5,"git_oid_cmp","","",N,N],[5,"git_oid_equal","","",N,N],[5,"git_oid_streq","","",N,N],[5,"git_oid_iszero","","",N,N],[5,"giterr_last","","",N,N],[5,"giterr_clear","","",N,N],[5,"giterr_set_str","","",N,N],[5,"git_remote_create","","",N,N],[5,"git_remote_lookup","","",N,N],[5,"git_remote_create_anonymous","","",N,N],[5,"git_remote_delete","","",N,N],[5,"git_remote_free","","",N,N],[5,"git_remote_name","","",N,N],[5,"git_remote_pushurl","","",N,N],[5,"git_remote_refspec_count","","",N,N],[5,"git_remote_url","","",N,N],[5,"git_remote_connect","","",N,N],[5,"git_remote_connected","","",N,N],[5,"git_remote_disconnect","","",N,N],[5,"git_remote_add_fetch","","",N,N],[5,"git_remote_add_push","","",N,N],[5,"git_remote_download","","",N,N],[5,"git_remote_stop","","",N,N],[5,"git_remote_dup","","",N,N],[5,"git_remote_get_fetch_refspecs","","",N,N],[5,"git_remote_get_push_refspecs","","",N,N],[5,"git_remote_get_refspec","","",N,N],[5,"git_remote_is_valid_name","","",N,N],[5,"git_remote_list","","",N,N],[5,"git_remote_rename","","",N,N],[5,"git_remote_fetch","","",N,N],[5,"git_remote_push","","",N,N],[5,"git_remote_update_tips","","",N,N],[5,"git_remote_set_url","","",N,N],[5,"git_remote_set_pushurl","","",N,N],[5,"git_remote_init_callbacks","","",N,N],[5,"git_fetch_init_options","","",N,N],[5,"git_remote_stats","","",N,N],[5,"git_remote_ls","","",N,N],[5,"git_remote_set_autotag","","",N,N],[5,"git_remote_prune","","",N,N],[5,"git_refspec_direction","","",N,N],[5,"git_refspec_dst","","",N,N],[5,"git_refspec_dst_matches","","",N,N],[5,"git_refspec_src","","",N,N],[5,"git_refspec_src_matches","","",N,N],[5,"git_refspec_force","","",N,N],[5,"git_refspec_string","","",N,N],[5,"git_strarray_free","","",N,N],[5,"git_oidarray_free","","",N,N],[5,"git_signature_default","","",N,N],[5,"git_signature_free","","",N,N],[5,"git_signature_new","","",N,N],[5,"git_signature_now","","",N,N],[5,"git_signature_dup","","",N,N],[5,"git_status_list_new","","",N,N],[5,"git_status_list_entrycount","","",N,N],[5,"git_status_byindex","","",N,N],[5,"git_status_list_free","","",N,N],[5,"git_status_init_options","","",N,N],[5,"git_status_file","","",N,N],[5,"git_status_should_ignore","","",N,N],[5,"git_clone","","",N,N],[5,"git_clone_init_options","","",N,N],[5,"git_reset","","",N,N],[5,"git_reset_default","","",N,N],[5,"git_reference_cmp","","",N,N],[5,"git_reference_delete","","",N,N],[5,"git_reference_free","","",N,N],[5,"git_reference_is_branch","","",N,N],[5,"git_reference_is_note","","",N,N],[5,"git_reference_is_remote","","",N,N],[5,"git_reference_is_tag","","",N,N],[5,"git_reference_is_valid_name","","",N,N],[5,"git_reference_lookup","","",N,N],[5,"git_reference_name","","",N,N],[5,"git_reference_name_to_id","","",N,N],[5,"git_reference_peel","","",N,N],[5,"git_reference_rename","","",N,N],[5,"git_reference_resolve","","",N,N],[5,"git_reference_shorthand","","",N,N],[5,"git_reference_symbolic_target","","",N,N],[5,"git_reference_target","","",N,N],[5,"git_reference_target_peel","","",N,N],[5,"git_reference_set_target","","",N,N],[5,"git_reference_type","","",N,N],[5,"git_reference_iterator_new","","",N,N],[5,"git_reference_iterator_glob_new","","",N,N],[5,"git_reference_iterator_free","","",N,N],[5,"git_reference_next","","",N,N],[5,"git_reference_next_name","","",N,N],[5,"git_reference_create","","",N,N],[5,"git_reference_symbolic_create","","",N,N],[5,"git_reference_create_matching","","",N,N],[5,"git_reference_symbolic_create_matching","","",N,N],[5,"git_reference_has_log","","",N,N],[5,"git_reference_ensure_log","","",N,N],[5,"git_stash_save","","",N,N],[5,"git_stash_apply_init_options","","",N,N],[5,"git_stash_apply","","",N,N],[5,"git_stash_foreach","","",N,N],[5,"git_stash_drop","","",N,N],[5,"git_stash_pop","","",N,N],[5,"git_submodule_add_finalize","","",N,N],[5,"git_submodule_add_setup","","",N,N],[5,"git_submodule_add_to_index","","",N,N],[5,"git_submodule_branch","","",N,N],[5,"git_submodule_foreach","","",N,N],[5,"git_submodule_free","","",N,N],[5,"git_submodule_head_id","","",N,N],[5,"git_submodule_index_id","","",N,N],[5,"git_submodule_init","","",N,N],[5,"git_submodule_location","","",N,N],[5,"git_submodule_lookup","","",N,N],[5,"git_submodule_name","","",N,N],[5,"git_submodule_open","","",N,N],[5,"git_submodule_path","","",N,N],[5,"git_submodule_reload","","",N,N],[5,"git_submodule_set_ignore","","",N,N],[5,"git_submodule_set_update","","",N,N],[5,"git_submodule_set_url","","",N,N],[5,"git_submodule_sync","","",N,N],[5,"git_submodule_update_strategy","","",N,N],[5,"git_submodule_update","","",N,N],[5,"git_submodule_update_init_options","","",N,N],[5,"git_submodule_url","","",N,N],[5,"git_submodule_wd_id","","",N,N],[5,"git_submodule_status","","",N,N],[5,"git_submodule_set_branch","","",N,N],[5,"git_blob_free","","",N,N],[5,"git_blob_id","","",N,N],[5,"git_blob_is_binary","","",N,N],[5,"git_blob_lookup","","",N,N],[5,"git_blob_lookup_prefix","","",N,N],[5,"git_blob_rawcontent","","",N,N],[5,"git_blob_rawsize","","",N,N],[5,"git_blob_create_frombuffer","","",N,N],[5,"git_blob_create_fromdisk","","",N,N],[5,"git_blob_create_fromworkdir","","",N,N],[5,"git_blob_create_fromstream","","",N,N],[5,"git_blob_create_fromstream_commit","","",N,N],[5,"git_tree_entry_byid","","",N,N],[5,"git_tree_entry_byindex","","",N,N],[5,"git_tree_entry_byname","","",N,N],[5,"git_tree_entry_bypath","","",N,N],[5,"git_tree_entry_cmp","","",N,N],[5,"git_tree_entry_dup","","",N,N],[5,"git_tree_entry_filemode","","",N,N],[5,"git_tree_entry_filemode_raw","","",N,N],[5,"git_tree_entry_free","","",N,N],[5,"git_tree_entry_id","","",N,N],[5,"git_tree_entry_name","","",N,N],[5,"git_tree_entry_to_object","","",N,N],[5,"git_tree_entry_type","","",N,N],[5,"git_tree_entrycount","","",N,N],[5,"git_tree_free","","",N,N],[5,"git_tree_id","","",N,N],[5,"git_tree_lookup","","",N,N],[5,"git_tree_walk","","",N,N],[5,"git_treebuilder_new","","",N,N],[5,"git_treebuilder_clear","","",N,N],[5,"git_treebuilder_entrycount","","",N,N],[5,"git_treebuilder_free","","",N,N],[5,"git_treebuilder_get","","",N,N],[5,"git_treebuilder_insert","","",N,N],[5,"git_treebuilder_remove","","",N,N],[5,"git_treebuilder_filter","","",N,N],[5,"git_treebuilder_write","","",N,N],[5,"git_buf_free","","",N,N],[5,"git_buf_grow","","",N,N],[5,"git_buf_set","","",N,N],[5,"git_commit_author","","",N,N],[5,"git_commit_committer","","",N,N],[5,"git_commit_free","","",N,N],[5,"git_commit_id","","",N,N],[5,"git_commit_lookup","","",N,N],[5,"git_commit_message","","",N,N],[5,"git_commit_message_encoding","","",N,N],[5,"git_commit_message_raw","","",N,N],[5,"git_commit_nth_gen_ancestor","","",N,N],[5,"git_commit_parent","","",N,N],[5,"git_commit_parent_id","","",N,N],[5,"git_commit_parentcount","","",N,N],[5,"git_commit_raw_header","","",N,N],[5,"git_commit_summary","","",N,N],[5,"git_commit_time","","",N,N],[5,"git_commit_time_offset","","",N,N],[5,"git_commit_tree","","",N,N],[5,"git_commit_tree_id","","",N,N],[5,"git_commit_amend","","",N,N],[5,"git_commit_create","","",N,N],[5,"git_commit_header_field","","",N,N],[5,"git_annotated_commit_lookup","","",N,N],[5,"git_commit_create_with_signature","","",N,N],[5,"git_commit_extract_signature","","",N,N],[5,"git_branch_create","","",N,N],[5,"git_branch_delete","","",N,N],[5,"git_branch_is_head","","",N,N],[5,"git_branch_iterator_free","","",N,N],[5,"git_branch_iterator_new","","",N,N],[5,"git_branch_lookup","","",N,N],[5,"git_branch_move","","",N,N],[5,"git_branch_name","","",N,N],[5,"git_branch_next","","",N,N],[5,"git_branch_set_upstream","","",N,N],[5,"git_branch_upstream","","",N,N],[5,"git_index_add","","",N,N],[5,"git_index_add_all","","",N,N],[5,"git_index_add_bypath","","",N,N],[5,"git_index_add_frombuffer","","",N,N],[5,"git_index_conflict_add","","",N,N],[5,"git_index_clear","","",N,N],[5,"git_index_entry_stage","","",N,N],[5,"git_index_entrycount","","",N,N],[5,"git_index_find","","",N,N],[5,"git_index_free","","",N,N],[5,"git_index_get_byindex","","",N,N],[5,"git_index_get_bypath","","",N,N],[5,"git_index_has_conflicts","","",N,N],[5,"git_index_new","","",N,N],[5,"git_index_open","","",N,N],[5,"git_index_path","","",N,N],[5,"git_index_read","","",N,N],[5,"git_index_read_tree","","",N,N],[5,"git_index_remove","","",N,N],[5,"git_index_remove_all","","",N,N],[5,"git_index_remove_bypath","","",N,N],[5,"git_index_remove_directory","","",N,N],[5,"git_index_update_all","","",N,N],[5,"git_index_write","","",N,N],[5,"git_index_write_tree","","",N,N],[5,"git_index_write_tree_to","","",N,N],[5,"git_config_add_file_ondisk","","",N,N],[5,"git_config_delete_entry","","",N,N],[5,"git_config_delete_multivar","","",N,N],[5,"git_config_find_programdata","","",N,N],[5,"git_config_find_global","","",N,N],[5,"git_config_find_system","","",N,N],[5,"git_config_find_xdg","","",N,N],[5,"git_config_free","","",N,N],[5,"git_config_get_bool","","",N,N],[5,"git_config_get_entry","","",N,N],[5,"git_config_get_int32","","",N,N],[5,"git_config_get_int64","","",N,N],[5,"git_config_get_string","","",N,N],[5,"git_config_get_string_buf","","",N,N],[5,"git_config_get_path","","",N,N],[5,"git_config_iterator_free","","",N,N],[5,"git_config_iterator_glob_new","","",N,N],[5,"git_config_iterator_new","","",N,N],[5,"git_config_new","","",N,N],[5,"git_config_next","","",N,N],[5,"git_config_open_default","","",N,N],[5,"git_config_open_global","","",N,N],[5,"git_config_open_level","","",N,N],[5,"git_config_open_ondisk","","",N,N],[5,"git_config_parse_bool","","",N,N],[5,"git_config_parse_int32","","",N,N],[5,"git_config_parse_int64","","",N,N],[5,"git_config_set_bool","","",N,N],[5,"git_config_set_int32","","",N,N],[5,"git_config_set_int64","","",N,N],[5,"git_config_set_multivar","","",N,N],[5,"git_config_set_string","","",N,N],[5,"git_config_snapshot","","",N,N],[5,"git_config_entry_free","","",N,N],[5,"git_cred_default_new","","",N,N],[5,"git_cred_has_username","","",N,N],[5,"git_cred_ssh_custom_new","","",N,N],[5,"git_cred_ssh_interactive_new","","",N,N],[5,"git_cred_ssh_key_from_agent","","",N,N],[5,"git_cred_ssh_key_new","","",N,N],[5,"git_cred_ssh_key_memory_new","","",N,N],[5,"git_cred_userpass","","",N,N],[5,"git_cred_userpass_plaintext_new","","",N,N],[5,"git_cred_username_new","","",N,N],[5,"git_tag_annotation_create","","",N,N],[5,"git_tag_create","","",N,N],[5,"git_tag_create_frombuffer","","",N,N],[5,"git_tag_create_lightweight","","",N,N],[5,"git_tag_delete","","",N,N],[5,"git_tag_foreach","","",N,N],[5,"git_tag_free","","",N,N],[5,"git_tag_id","","",N,N],[5,"git_tag_list","","",N,N],[5,"git_tag_list_match","","",N,N],[5,"git_tag_lookup","","",N,N],[5,"git_tag_lookup_prefix","","",N,N],[5,"git_tag_message","","",N,N],[5,"git_tag_name","","",N,N],[5,"git_tag_peel","","",N,N],[5,"git_tag_tagger","","",N,N],[5,"git_tag_target","","",N,N],[5,"git_tag_target_id","","",N,N],[5,"git_tag_target_type","","",N,N],[5,"git_checkout_head","","",N,N],[5,"git_checkout_index","","",N,N],[5,"git_checkout_tree","","",N,N],[5,"git_checkout_init_options","","",N,N],[5,"git_annotated_commit_id","","",N,N],[5,"git_annotated_commit_from_ref","","",N,N],[5,"git_annotated_commit_free","","",N,N],[5,"git_merge_init_options","","",N,N],[5,"git_merge","","",N,N],[5,"git_merge_commits","","",N,N],[5,"git_merge_trees","","",N,N],[5,"git_repository_state_cleanup","","",N,N],[5,"git_merge_analysis","","",N,N],[5,"git_note_author","","",N,N],[5,"git_note_committer","","",N,N],[5,"git_note_create","","",N,N],[5,"git_note_default_ref","","",N,N],[5,"git_note_free","","",N,N],[5,"git_note_id","","",N,N],[5,"git_note_iterator_free","","",N,N],[5,"git_note_iterator_new","","",N,N],[5,"git_note_message","","",N,N],[5,"git_note_next","","",N,N],[5,"git_note_read","","",N,N],[5,"git_note_remove","","",N,N],[5,"git_blame_file","","",N,N],[5,"git_blame_free","","",N,N],[5,"git_blame_init_options","","",N,N],[5,"git_blame_get_hunk_count","","",N,N],[5,"git_blame_get_hunk_byline","","",N,N],[5,"git_blame_get_hunk_byindex","","",N,N],[5,"git_revwalk_new","","",N,N],[5,"git_revwalk_free","","",N,N],[5,"git_revwalk_reset","","",N,N],[5,"git_revwalk_sorting","","",N,N],[5,"git_revwalk_push_head","","",N,N],[5,"git_revwalk_push","","",N,N],[5,"git_revwalk_push_ref","","",N,N],[5,"git_revwalk_push_glob","","",N,N],[5,"git_revwalk_push_range","","",N,N],[5,"git_revwalk_simplify_first_parent","","",N,N],[5,"git_revwalk_hide_head","","",N,N],[5,"git_revwalk_hide","","",N,N],[5,"git_revwalk_hide_ref","","",N,N],[5,"git_revwalk_hide_glob","","",N,N],[5,"git_revwalk_add_hide_cb","","",N,N],[5,"git_revwalk_next","","",N,N],[5,"git_merge_base","","",N,N],[5,"git_merge_bases","","",N,N],[5,"git_pathspec_free","","",N,N],[5,"git_pathspec_match_diff","","",N,N],[5,"git_pathspec_match_index","","",N,N],[5,"git_pathspec_match_list_diff_entry","","",N,N],[5,"git_pathspec_match_list_entry","","",N,N],[5,"git_pathspec_match_list_entrycount","","",N,N],[5,"git_pathspec_match_list_failed_entry","","",N,N],[5,"git_pathspec_match_list_failed_entrycount","","",N,N],[5,"git_pathspec_match_list_free","","",N,N],[5,"git_pathspec_match_tree","","",N,N],[5,"git_pathspec_match_workdir","","",N,N],[5,"git_pathspec_matches_path","","",N,N],[5,"git_pathspec_new","","",N,N],[5,"git_diff_blob_to_buffer","","",N,N],[5,"git_diff_blobs","","",N,N],[5,"git_diff_buffers","","",N,N],[5,"git_diff_find_similar","","",N,N],[5,"git_diff_find_init_options","","",N,N],[5,"git_diff_foreach","","",N,N],[5,"git_diff_free","","",N,N],[5,"git_diff_get_delta","","",N,N],[5,"git_diff_get_stats","","",N,N],[5,"git_diff_index_to_index","","",N,N],[5,"git_diff_index_to_workdir","","",N,N],[5,"git_diff_init_options","","",N,N],[5,"git_diff_is_sorted_icase","","",N,N],[5,"git_diff_merge","","",N,N],[5,"git_diff_num_deltas","","",N,N],[5,"git_diff_num_deltas_of_type","","",N,N],[5,"git_diff_print","","",N,N],[5,"git_diff_stats_deletions","","",N,N],[5,"git_diff_stats_files_changed","","",N,N],[5,"git_diff_stats_free","","",N,N],[5,"git_diff_stats_insertions","","",N,N],[5,"git_diff_stats_to_buf","","",N,N],[5,"git_diff_status_char","","",N,N],[5,"git_diff_tree_to_index","","",N,N],[5,"git_diff_tree_to_tree","","",N,N],[5,"git_diff_tree_to_workdir","","",N,N],[5,"git_diff_tree_to_workdir_with_index","","",N,N],[5,"git_graph_ahead_behind","","",N,N],[5,"git_graph_descendant_of","","",N,N],[5,"git_patch_from_diff","","",N,N],[5,"git_patch_from_blobs","","",N,N],[5,"git_patch_from_blob_and_buffer","","",N,N],[5,"git_patch_from_buffers","","",N,N],[5,"git_patch_free","","",N,N],[5,"git_patch_get_delta","","",N,N],[5,"git_patch_num_hunks","","",N,N],[5,"git_patch_line_stats","","",N,N],[5,"git_patch_get_hunk","","",N,N],[5,"git_patch_num_lines_in_hunk","","",N,N],[5,"git_patch_get_line_in_hunk","","",N,N],[5,"git_patch_size","","",N,N],[5,"git_patch_print","","",N,N],[5,"git_patch_to_buf","","",N,N],[5,"git_reflog_append","","",N,N],[5,"git_reflog_delete","","",N,N],[5,"git_reflog_drop","","",N,N],[5,"git_reflog_entry_byindex","","",N,N],[5,"git_reflog_entry_committer","","",N,N],[5,"git_reflog_entry_id_new","","",N,N],[5,"git_reflog_entry_id_old","","",N,N],[5,"git_reflog_entry_message","","",N,N],[5,"git_reflog_entrycount","","",N,N],[5,"git_reflog_free","","",N,N],[5,"git_reflog_read","","",N,N],[5,"git_reflog_rename","","",N,N],[5,"git_reflog_write","","",N,N],[5,"git_transport_register","","",N,N],[5,"git_transport_unregister","","",N,N],[5,"git_transport_smart","","",N,N],[5,"git_describe_commit","","",N,N],[5,"git_describe_format","","",N,N],[5,"git_describe_result_free","","",N,N],[5,"git_describe_workdir","","",N,N],[5,"git_message_prettify","","",N,N],[5,"git_packbuilder_new","","",N,N],[5,"git_packbuilder_set_threads","","",N,N],[5,"git_packbuilder_insert","","",N,N],[5,"git_packbuilder_insert_tree","","",N,N],[5,"git_packbuilder_insert_commit","","",N,N],[5,"git_packbuilder_insert_walk","","",N,N],[5,"git_packbuilder_insert_recur","","",N,N],[5,"git_packbuilder_write_buf","","",N,N],[5,"git_packbuilder_write","","",N,N],[5,"git_packbuilder_hash","","",N,N],[5,"git_packbuilder_foreach","","",N,N],[5,"git_packbuilder_object_count","","",N,N],[5,"git_packbuilder_written","","",N,N],[5,"git_packbuilder_set_callbacks","","",N,N],[5,"git_packbuilder_free","","",N,N],[5,"git_repository_odb","","",N,N],[5,"git_odb_new","","",N,N],[5,"git_odb_free","","",N,N],[5,"git_odb_open_rstream","","",N,N],[5,"git_odb_stream_read","","",N,N],[5,"git_odb_open_wstream","","",N,N],[5,"git_odb_stream_write","","",N,N],[5,"git_odb_stream_finalize_write","","",N,N],[5,"git_odb_stream_free","","",N,N],[5,"git_odb_foreach","","",N,N],[5,"git_odb_read","","",N,N],[5,"git_odb_read_header","","",N,N],[5,"git_odb_write","","",N,N],[5,"git_odb_hash","","",N,N],[5,"git_odb_hashfile","","",N,N],[5,"git_odb_exists_prefix","","",N,N],[5,"git_odb_exists","","",N,N],[5,"git_odb_refresh","","",N,N],[5,"git_odb_object_id","","",N,N],[5,"git_odb_object_size","","",N,N],[5,"git_odb_object_type","","",N,N],[5,"git_odb_object_data","","",N,N],[5,"git_odb_object_dup","","",N,N],[5,"git_odb_object_free","","",N,N],[5,"git_odb_init_backend","","",N,N],[5,"git_odb_add_backend","","",N,N],[5,"git_odb_backend_pack","","",N,N],[5,"git_odb_backend_one_pack","","",N,N],[5,"git_odb_add_disk_alternate","","",N,N],[5,"git_odb_backend_loose","","",N,N],[5,"git_odb_add_alternate","","",N,N],[5,"git_odb_backend_malloc","","",N,N],[5,"git_odb_num_backends","","",N,N],[5,"git_odb_get_backend","","",N,N],[5,"git_mempack_new","","",N,N],[5,"git_mempack_reset","","",N,N],[5,"git_mempack_dump","","",N,N],[5,"git_refdb_new","","",N,N],[5,"git_refdb_open","","",N,N],[5,"git_refdb_backend_fs","","",N,N],[5,"git_refdb_init_backend","","",N,N],[5,"git_refdb_set_backend","","",N,N],[5,"git_refdb_compress","","",N,N],[5,"git_refdb_free","","",N,N],[6,"git_off_t","","",N,N],[6,"git_time_t","","",N,N],[6,"git_revparse_mode_t","","",N,N],[6,"git_error_code","","",N,N],[6,"git_error_t","","",N,N],[6,"git_repository_state_t","","",N,N],[6,"git_direction","","",N,N],[6,"git_clone_local_t","","",N,N],[6,"git_checkout_notify_cb","","",N,N],[6,"git_checkout_progress_cb","","",N,N],[6,"git_checkout_perfdata_cb","","",N,N],[6,"git_remote_autotag_option_t","","",N,N],[6,"git_fetch_prune_t","","",N,N],[6,"git_remote_completion_type","","",N,N],[6,"git_transport_message_cb","","",N,N],[6,"git_cred_acquire_cb","","",N,N],[6,"git_transfer_progress_cb","","",N,N],[6,"git_packbuilder_progress","","",N,N],[6,"git_push_transfer_progress","","",N,N],[6,"git_transport_certificate_check_cb","","",N,N],[6,"git_push_negotiation","","",N,N],[6,"git_push_update_reference_cb","","",N,N],[6,"git_cert_t","","",N,N],[6,"git_cert_ssh_t","","",N,N],[6,"git_repository_create_cb","","",N,N],[6,"git_remote_create_cb","","",N,N],[6,"git_checkout_notify_t","","",N,N],[6,"git_status_t","","",N,N],[6,"git_status_opt_t","","",N,N],[6,"git_status_show_t","","",N,N],[6,"git_delta_t","","",N,N],[6,"git_checkout_strategy_t","","",N,N],[6,"git_reset_t","","",N,N],[6,"git_otype","","",N,N],[6,"git_ref_t","","",N,N],[6,"git_filemode_t","","",N,N],[6,"git_treewalk_mode","","",N,N],[6,"git_treewalk_cb","","",N,N],[6,"git_treebuilder_filter_cb","","",N,N],[6,"git_revwalk_hide_cb","","",N,N],[6,"git_branch_t","","",N,N],[6,"git_index_matched_path_cb","","",N,N],[6,"git_idxentry_extended_flag_t","","",N,N],[6,"git_indxentry_flag_t","","",N,N],[6,"git_config_level_t","","",N,N],[6,"git_submodule_update_t","","",N,N],[6,"git_submodule_ignore_t","","",N,N],[6,"git_submodule_cb","","",N,N],[6,"git_credtype_t","","",N,N],[6,"git_cred_ssh_interactive_callback","","",N,N],[6,"git_cred_sign_callback","","",N,N],[6,"git_tag_foreach_cb","","",N,N],[6,"git_index_add_option_t","","",N,N],[6,"git_repository_open_flag_t","","",N,N],[6,"git_repository_init_flag_t","","",N,N],[6,"git_repository_init_mode_t","","",N,N],[6,"git_sort_t","","",N,N],[6,"git_submodule_status_t","","",N,N],[6,"git_pathspec_flag_t","","",N,N],[6,"git_diff_file_cb","","",N,N],[6,"git_diff_hunk_cb","","",N,N],[6,"git_diff_line_cb","","",N,N],[6,"git_diff_binary_cb","","",N,N],[6,"git_diff_line_t","","",N,N],[6,"git_diff_format_t","","",N,N],[6,"git_diff_stats_format_t","","",N,N],[6,"git_diff_notify_cb","","",N,N],[6,"git_diff_progress_cb","","",N,N],[6,"git_diff_option_t","","",N,N],[6,"git_diff_binary_t","","",N,N],[6,"git_merge_flag_t","","",N,N],[6,"git_merge_file_favor_t","","",N,N],[6,"git_merge_file_flag_t","","",N,N],[6,"git_merge_analysis_t","","",N,N],[6,"git_merge_preference_t","","",N,N],[6,"git_transport_cb","","",N,N],[6,"git_proxy_t","","",N,N],[6,"git_smart_service_t","","",N,N],[6,"git_smart_subtransport_cb","","",N,N],[6,"git_describe_strategy_t","","",N,N],[6,"git_packbuilder_stage_t","","",N,N],[6,"git_stash_flags","","",N,N],[6,"git_stash_apply_flags","","",N,N],[6,"git_stash_apply_progress_t","","",N,N],[6,"git_stash_apply_progress_cb","","",N,N],[6,"git_stash_cb","","",N,N],[6,"git_packbuilder_foreach_cb","","",N,N],[6,"git_odb_foreach_cb","","",N,N],[17,"GIT_OID_RAWSZ","","",N,N],[17,"GIT_OID_HEXSZ","","",N,N],[17,"GIT_CLONE_OPTIONS_VERSION","","",N,N],[17,"GIT_STASH_APPLY_OPTIONS_VERSION","","",N,N],[17,"GIT_CHECKOUT_OPTIONS_VERSION","","",N,N],[17,"GIT_MERGE_OPTIONS_VERSION","","",N,N],[17,"GIT_REMOTE_CALLBACKS_VERSION","","",N,N],[17,"GIT_STATUS_OPTIONS_VERSION","","",N,N],[17,"GIT_BLAME_OPTIONS_VERSION","","",N,N],[17,"GIT_PROXY_OPTIONS_VERSION","","",N,N],[17,"GIT_SUBMODULE_UPDATE_OPTIONS_VERSION","","",N,N],[17,"GIT_ODB_BACKEND_VERSION","","",N,N],[17,"GIT_REFDB_BACKEND_VERSION","","",N,N],[17,"GIT_REVPARSE_SINGLE","","",N,N],[17,"GIT_REVPARSE_RANGE","","",N,N],[17,"GIT_REVPARSE_MERGE_BASE","","",N,N],[17,"GIT_OK","","",N,N],[17,"GIT_ERROR","","",N,N],[17,"GIT_ENOTFOUND","","",N,N],[17,"GIT_EEXISTS","","",N,N],[17,"GIT_EAMBIGUOUS","","",N,N],[17,"GIT_EBUFS","","",N,N],[17,"GIT_EUSER","","",N,N],[17,"GIT_EBAREREPO","","",N,N],[17,"GIT_EUNBORNBRANCH","","",N,N],[17,"GIT_EUNMERGED","","",N,N],[17,"GIT_ENONFASTFORWARD","","",N,N],[17,"GIT_EINVALIDSPEC","","",N,N],[17,"GIT_ECONFLICT","","",N,N],[17,"GIT_ELOCKED","","",N,N],[17,"GIT_EMODIFIED","","",N,N],[17,"GIT_EAUTH","","",N,N],[17,"GIT_ECERTIFICATE","","",N,N],[17,"GIT_EAPPLIED","","",N,N],[17,"GIT_EPEEL","","",N,N],[17,"GIT_EEOF","","",N,N],[17,"GIT_EINVALID","","",N,N],[17,"GIT_EUNCOMMITTED","","",N,N],[17,"GIT_EDIRECTORY","","",N,N],[17,"GIT_EMERGECONFLICT","","",N,N],[17,"GIT_PASSTHROUGH","","",N,N],[17,"GIT_ITEROVER","","",N,N],[17,"GITERR_NONE","","",N,N],[17,"GITERR_NOMEMORY","","",N,N],[17,"GITERR_OS","","",N,N],[17,"GITERR_INVALID","","",N,N],[17,"GITERR_REFERENCE","","",N,N],[17,"GITERR_ZLIB","","",N,N],[17,"GITERR_REPOSITORY","","",N,N],[17,"GITERR_CONFIG","","",N,N],[17,"GITERR_REGEX","","",N,N],[17,"GITERR_ODB","","",N,N],[17,"GITERR_INDEX","","",N,N],[17,"GITERR_OBJECT","","",N,N],[17,"GITERR_NET","","",N,N],[17,"GITERR_TAG","","",N,N],[17,"GITERR_TREE","","",N,N],[17,"GITERR_INDEXER","","",N,N],[17,"GITERR_SSL","","",N,N],[17,"GITERR_SUBMODULE","","",N,N],[17,"GITERR_THREAD","","",N,N],[17,"GITERR_STASH","","",N,N],[17,"GITERR_CHECKOUT","","",N,N],[17,"GITERR_FETCHHEAD","","",N,N],[17,"GITERR_MERGE","","",N,N],[17,"GITERR_SSH","","",N,N],[17,"GITERR_FILTER","","",N,N],[17,"GITERR_REVERT","","",N,N],[17,"GITERR_CALLBACK","","",N,N],[17,"GITERR_CHERRYPICK","","",N,N],[17,"GITERR_DESCRIBE","","",N,N],[17,"GITERR_REBASE","","",N,N],[17,"GITERR_FILESYSTEM","","",N,N],[17,"GIT_REPOSITORY_STATE_NONE","","",N,N],[17,"GIT_REPOSITORY_STATE_MERGE","","",N,N],[17,"GIT_REPOSITORY_STATE_REVERT","","",N,N],[17,"GIT_REPOSITORY_STATE_REVERT_SEQUENCE","","",N,N],[17,"GIT_REPOSITORY_STATE_CHERRYPICK","","",N,N],[17,"GIT_REPOSITORY_STATE_CHERRYPICK_SEQUENCE","","",N,N],[17,"GIT_REPOSITORY_STATE_BISECT","","",N,N],[17,"GIT_REPOSITORY_STATE_REBASE","","",N,N],[17,"GIT_REPOSITORY_STATE_REBASE_INTERACTIVE","","",N,N],[17,"GIT_REPOSITORY_STATE_REBASE_MERGE","","",N,N],[17,"GIT_REPOSITORY_STATE_APPLY_MAILBOX","","",N,N],[17,"GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE","","",N,N],[17,"GIT_DIRECTION_FETCH","","",N,N],[17,"GIT_DIRECTION_PUSH","","",N,N],[17,"GIT_CLONE_LOCAL_AUTO","","",N,N],[17,"GIT_CLONE_LOCAL","","",N,N],[17,"GIT_CLONE_NO_LOCAL","","",N,N],[17,"GIT_CLONE_LOCAL_NO_LINKS","","",N,N],[17,"GIT_REMOTE_DOWNLOAD_TAGS_UNSPECIFIED","","",N,N],[17,"GIT_REMOTE_DOWNLOAD_TAGS_AUTO","","",N,N],[17,"GIT_REMOTE_DOWNLOAD_TAGS_NONE","","",N,N],[17,"GIT_REMOTE_DOWNLOAD_TAGS_ALL","","",N,N],[17,"GIT_FETCH_PRUNE_UNSPECIFIED","","",N,N],[17,"GIT_FETCH_PRUNE","","",N,N],[17,"GIT_FETCH_NO_PRUNE","","",N,N],[17,"GIT_REMOTE_COMPLETION_DOWNLOAD","","",N,N],[17,"GIT_REMOTE_COMPLETION_INDEXING","","",N,N],[17,"GIT_REMOTE_COMPLETION_ERROR","","",N,N],[17,"GIT_CERT_NONE","","",N,N],[17,"GIT_CERT_X509","","",N,N],[17,"GIT_CERT_HOSTKEY_LIBSSH2","","",N,N],[17,"GIT_CERT_SSH_MD5","","",N,N],[17,"GIT_CERT_SSH_SHA1","","",N,N],[17,"GIT_CHECKOUT_NOTIFY_NONE","","",N,N],[17,"GIT_CHECKOUT_NOTIFY_CONFLICT","","",N,N],[17,"GIT_CHECKOUT_NOTIFY_DIRTY","","",N,N],[17,"GIT_CHECKOUT_NOTIFY_UPDATED","","",N,N],[17,"GIT_CHECKOUT_NOTIFY_UNTRACKED","","",N,N],[17,"GIT_CHECKOUT_NOTIFY_IGNORED","","",N,N],[17,"GIT_CHECKOUT_NOTIFY_ALL","","",N,N],[17,"GIT_STATUS_CURRENT","","",N,N],[17,"GIT_STATUS_INDEX_NEW","","",N,N],[17,"GIT_STATUS_INDEX_MODIFIED","","",N,N],[17,"GIT_STATUS_INDEX_DELETED","","",N,N],[17,"GIT_STATUS_INDEX_RENAMED","","",N,N],[17,"GIT_STATUS_INDEX_TYPECHANGE","","",N,N],[17,"GIT_STATUS_WT_NEW","","",N,N],[17,"GIT_STATUS_WT_MODIFIED","","",N,N],[17,"GIT_STATUS_WT_DELETED","","",N,N],[17,"GIT_STATUS_WT_TYPECHANGE","","",N,N],[17,"GIT_STATUS_WT_RENAMED","","",N,N],[17,"GIT_STATUS_WT_UNREADABLE","","",N,N],[17,"GIT_STATUS_IGNORED","","",N,N],[17,"GIT_STATUS_CONFLICTED","","",N,N],[17,"GIT_STATUS_OPT_INCLUDE_UNTRACKED","","",N,N],[17,"GIT_STATUS_OPT_INCLUDE_IGNORED","","",N,N],[17,"GIT_STATUS_OPT_INCLUDE_UNMODIFIED","","",N,N],[17,"GIT_STATUS_OPT_EXCLUDE_SUBMODULES","","",N,N],[17,"GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS","","",N,N],[17,"GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH","","",N,N],[17,"GIT_STATUS_OPT_RECURSE_IGNORED_DIRS","","",N,N],[17,"GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX","","",N,N],[17,"GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR","","",N,N],[17,"GIT_STATUS_OPT_SORT_CASE_SENSITIVELY","","",N,N],[17,"GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY","","",N,N],[17,"GIT_STATUS_OPT_RENAMES_FROM_REWRITES","","",N,N],[17,"GIT_STATUS_OPT_NO_REFRESH","","",N,N],[17,"GIT_STATUS_OPT_UPDATE_INDEX","","",N,N],[17,"GIT_STATUS_OPT_INCLUDE_UNREADABLE","","",N,N],[17,"GIT_STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED","","",N,N],[17,"GIT_STATUS_SHOW_INDEX_AND_WORKDIR","","",N,N],[17,"GIT_STATUS_SHOW_INDEX_ONLY","","",N,N],[17,"GIT_STATUS_SHOW_WORKDIR_ONLY","","",N,N],[17,"GIT_DELTA_UNMODIFIED","","",N,N],[17,"GIT_DELTA_ADDED","","",N,N],[17,"GIT_DELTA_DELETED","","",N,N],[17,"GIT_DELTA_MODIFIED","","",N,N],[17,"GIT_DELTA_RENAMED","","",N,N],[17,"GIT_DELTA_COPIED","","",N,N],[17,"GIT_DELTA_IGNORED","","",N,N],[17,"GIT_DELTA_UNTRACKED","","",N,N],[17,"GIT_DELTA_TYPECHANGE","","",N,N],[17,"GIT_DELTA_UNREADABLE","","",N,N],[17,"GIT_DELTA_CONFLICTED","","",N,N],[17,"GIT_CHECKOUT_NONE","","",N,N],[17,"GIT_CHECKOUT_SAFE","","",N,N],[17,"GIT_CHECKOUT_FORCE","","",N,N],[17,"GIT_CHECKOUT_RECREATE_MISSING","","",N,N],[17,"GIT_CHECKOUT_ALLOW_CONFLICTS","","",N,N],[17,"GIT_CHECKOUT_REMOVE_UNTRACKED","","",N,N],[17,"GIT_CHECKOUT_REMOVE_IGNORED","","",N,N],[17,"GIT_CHECKOUT_UPDATE_ONLY","","",N,N],[17,"GIT_CHECKOUT_DONT_UPDATE_INDEX","","",N,N],[17,"GIT_CHECKOUT_NO_REFRESH","","",N,N],[17,"GIT_CHECKOUT_SKIP_UNMERGED","","",N,N],[17,"GIT_CHECKOUT_USE_OURS","","",N,N],[17,"GIT_CHECKOUT_USE_THEIRS","","",N,N],[17,"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH","","",N,N],[17,"GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES","","",N,N],[17,"GIT_CHECKOUT_DONT_OVERWRITE_IGNORED","","",N,N],[17,"GIT_CHECKOUT_CONFLICT_STYLE_MERGE","","",N,N],[17,"GIT_CHECKOUT_CONFLICT_STYLE_DIFF3","","",N,N],[17,"GIT_CHECKOUT_UPDATE_SUBMODULES","","",N,N],[17,"GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED","","",N,N],[17,"GIT_RESET_SOFT","","",N,N],[17,"GIT_RESET_MIXED","","",N,N],[17,"GIT_RESET_HARD","","",N,N],[17,"GIT_OBJ_ANY","","",N,N],[17,"GIT_OBJ_BAD","","",N,N],[17,"GIT_OBJ__EXT1","","",N,N],[17,"GIT_OBJ_COMMIT","","",N,N],[17,"GIT_OBJ_TREE","","",N,N],[17,"GIT_OBJ_BLOB","","",N,N],[17,"GIT_OBJ_TAG","","",N,N],[17,"GIT_OBJ__EXT2","","",N,N],[17,"GIT_OBJ_OFS_DELTA","","",N,N],[17,"GIT_OBJ_REF_DELTA","","",N,N],[17,"GIT_REF_INVALID","","",N,N],[17,"GIT_REF_OID","","",N,N],[17,"GIT_REF_SYMBOLIC","","",N,N],[17,"GIT_REF_LISTALL","","",N,N],[17,"GIT_FILEMODE_UNREADABLE","","",N,N],[17,"GIT_FILEMODE_TREE","","",N,N],[17,"GIT_FILEMODE_BLOB","","",N,N],[17,"GIT_FILEMODE_BLOB_EXECUTABLE","","",N,N],[17,"GIT_FILEMODE_LINK","","",N,N],[17,"GIT_FILEMODE_COMMIT","","",N,N],[17,"GIT_TREEWALK_PRE","","",N,N],[17,"GIT_TREEWALK_POST","","",N,N],[17,"GIT_BRANCH_LOCAL","","",N,N],[17,"GIT_BRANCH_REMOTE","","",N,N],[17,"GIT_BRANCH_ALL","","",N,N],[17,"GIT_BLAME_NORMAL","","",N,N],[17,"GIT_BLAME_TRACK_COPIES_SAME_FILE","","",N,N],[17,"GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES","","",N,N],[17,"GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES","","",N,N],[17,"GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES","","",N,N],[17,"GIT_BLAME_FIRST_PARENT","","",N,N],[17,"GIT_IDXENTRY_INTENT_TO_ADD","","",N,N],[17,"GIT_IDXENTRY_SKIP_WORKTREE","","",N,N],[17,"GIT_IDXENTRY_EXTENDED2","","",N,N],[17,"GIT_IDXENTRY_UPDATE","","",N,N],[17,"GIT_IDXENTRY_REMOVE","","",N,N],[17,"GIT_IDXENTRY_UPTODATE","","",N,N],[17,"GIT_IDXENTRY_ADDED","","",N,N],[17,"GIT_IDXENTRY_HASHED","","",N,N],[17,"GIT_IDXENTRY_UNHASHED","","",N,N],[17,"GIT_IDXENTRY_WT_REMOVE","","",N,N],[17,"GIT_IDXENTRY_CONFLICTED","","",N,N],[17,"GIT_IDXENTRY_UNPACKED","","",N,N],[17,"GIT_IDXENTRY_NEW_SKIP_WORKTREE","","",N,N],[17,"GIT_IDXENTRY_EXTENDED","","",N,N],[17,"GIT_IDXENTRY_VALID","","",N,N],[17,"GIT_IDXENTRY_NAMEMASK","","",N,N],[17,"GIT_IDXENTRY_STAGEMASK","","",N,N],[17,"GIT_IDXENTRY_STAGESHIFT","","",N,N],[17,"GIT_CONFIG_LEVEL_PROGRAMDATA","","",N,N],[17,"GIT_CONFIG_LEVEL_SYSTEM","","",N,N],[17,"GIT_CONFIG_LEVEL_XDG","","",N,N],[17,"GIT_CONFIG_LEVEL_GLOBAL","","",N,N],[17,"GIT_CONFIG_LEVEL_LOCAL","","",N,N],[17,"GIT_CONFIG_LEVEL_APP","","",N,N],[17,"GIT_CONFIG_HIGHEST_LEVEL","","",N,N],[17,"GIT_SUBMODULE_UPDATE_CHECKOUT","","",N,N],[17,"GIT_SUBMODULE_UPDATE_REBASE","","",N,N],[17,"GIT_SUBMODULE_UPDATE_MERGE","","",N,N],[17,"GIT_SUBMODULE_UPDATE_NONE","","",N,N],[17,"GIT_SUBMODULE_UPDATE_DEFAULT","","",N,N],[17,"GIT_SUBMODULE_IGNORE_UNSPECIFIED","","",N,N],[17,"GIT_SUBMODULE_IGNORE_NONE","","",N,N],[17,"GIT_SUBMODULE_IGNORE_UNTRACKED","","",N,N],[17,"GIT_SUBMODULE_IGNORE_DIRTY","","",N,N],[17,"GIT_SUBMODULE_IGNORE_ALL","","",N,N],[17,"GIT_CREDTYPE_USERPASS_PLAINTEXT","","",N,N],[17,"GIT_CREDTYPE_SSH_KEY","","",N,N],[17,"GIT_CREDTYPE_SSH_CUSTOM","","",N,N],[17,"GIT_CREDTYPE_DEFAULT","","",N,N],[17,"GIT_CREDTYPE_SSH_INTERACTIVE","","",N,N],[17,"GIT_CREDTYPE_USERNAME","","",N,N],[17,"GIT_CREDTYPE_SSH_MEMORY","","",N,N],[17,"GIT_INDEX_ADD_DEFAULT","","",N,N],[17,"GIT_INDEX_ADD_FORCE","","",N,N],[17,"GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH","","",N,N],[17,"GIT_INDEX_ADD_CHECK_PATHSPEC","","",N,N],[17,"GIT_REPOSITORY_OPEN_NO_SEARCH","","",N,N],[17,"GIT_REPOSITORY_OPEN_CROSS_FS","","",N,N],[17,"GIT_REPOSITORY_OPEN_BARE","","",N,N],[17,"GIT_REPOSITORY_OPEN_NO_DOTGIT","","",N,N],[17,"GIT_REPOSITORY_OPEN_FROM_ENV","","",N,N],[17,"GIT_REPOSITORY_INIT_OPTIONS_VERSION","","",N,N],[17,"GIT_REPOSITORY_INIT_BARE","","",N,N],[17,"GIT_REPOSITORY_INIT_NO_REINIT","","",N,N],[17,"GIT_REPOSITORY_INIT_NO_DOTGIT_DIR","","",N,N],[17,"GIT_REPOSITORY_INIT_MKDIR","","",N,N],[17,"GIT_REPOSITORY_INIT_MKPATH","","",N,N],[17,"GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE","","",N,N],[17,"GIT_REPOSITORY_INIT_SHARED_UMASK","","",N,N],[17,"GIT_REPOSITORY_INIT_SHARED_GROUP","","",N,N],[17,"GIT_REPOSITORY_INIT_SHARED_ALL","","",N,N],[17,"GIT_SORT_NONE","","",N,N],[17,"GIT_SORT_TOPOLOGICAL","","",N,N],[17,"GIT_SORT_TIME","","",N,N],[17,"GIT_SORT_REVERSE","","",N,N],[17,"GIT_SUBMODULE_STATUS_IN_HEAD","","",N,N],[17,"GIT_SUBMODULE_STATUS_IN_INDEX","","",N,N],[17,"GIT_SUBMODULE_STATUS_IN_CONFIG","","",N,N],[17,"GIT_SUBMODULE_STATUS_IN_WD","","",N,N],[17,"GIT_SUBMODULE_STATUS_INDEX_ADDED","","",N,N],[17,"GIT_SUBMODULE_STATUS_INDEX_DELETED","","",N,N],[17,"GIT_SUBMODULE_STATUS_INDEX_MODIFIED","","",N,N],[17,"GIT_SUBMODULE_STATUS_WD_UNINITIALIZED","","",N,N],[17,"GIT_SUBMODULE_STATUS_WD_ADDED","","",N,N],[17,"GIT_SUBMODULE_STATUS_WD_DELETED","","",N,N],[17,"GIT_SUBMODULE_STATUS_WD_MODIFIED","","",N,N],[17,"GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED","","",N,N],[17,"GIT_SUBMODULE_STATUS_WD_WD_MODIFIED","","",N,N],[17,"GIT_SUBMODULE_STATUS_WD_UNTRACKED","","",N,N],[17,"GIT_PATHSPEC_DEFAULT","","",N,N],[17,"GIT_PATHSPEC_IGNORE_CASE","","",N,N],[17,"GIT_PATHSPEC_USE_CASE","","",N,N],[17,"GIT_PATHSPEC_NO_GLOB","","",N,N],[17,"GIT_PATHSPEC_NO_MATCH_ERROR","","",N,N],[17,"GIT_PATHSPEC_FIND_FAILURES","","",N,N],[17,"GIT_PATHSPEC_FAILURES_ONLY","","",N,N],[17,"GIT_DIFF_LINE_CONTEXT","","",N,N],[17,"GIT_DIFF_LINE_ADDITION","","",N,N],[17,"GIT_DIFF_LINE_DELETION","","",N,N],[17,"GIT_DIFF_LINE_CONTEXT_EOFNL","","",N,N],[17,"GIT_DIFF_LINE_ADD_EOFNL","","",N,N],[17,"GIT_DIFF_LINE_DEL_EOFNL","","",N,N],[17,"GIT_DIFF_LINE_FILE_HDR","","",N,N],[17,"GIT_DIFF_LINE_HUNK_HDR","","",N,N],[17,"GIT_DIFF_LINE_BINARY","","",N,N],[17,"GIT_DIFF_FORMAT_PATCH","","",N,N],[17,"GIT_DIFF_FORMAT_PATCH_HEADER","","",N,N],[17,"GIT_DIFF_FORMAT_RAW","","",N,N],[17,"GIT_DIFF_FORMAT_NAME_ONLY","","",N,N],[17,"GIT_DIFF_FORMAT_NAME_STATUS","","",N,N],[17,"GIT_DIFF_STATS_NONE","","",N,N],[17,"GIT_DIFF_STATS_FULL","","",N,N],[17,"GIT_DIFF_STATS_SHORT","","",N,N],[17,"GIT_DIFF_STATS_NUMBER","","",N,N],[17,"GIT_DIFF_STATS_INCLUDE_SUMMARY","","",N,N],[17,"GIT_DIFF_NORMAL","","",N,N],[17,"GIT_DIFF_REVERSE","","",N,N],[17,"GIT_DIFF_INCLUDE_IGNORED","","",N,N],[17,"GIT_DIFF_RECURSE_IGNORED_DIRS","","",N,N],[17,"GIT_DIFF_INCLUDE_UNTRACKED","","",N,N],[17,"GIT_DIFF_RECURSE_UNTRACKED_DIRS","","",N,N],[17,"GIT_DIFF_INCLUDE_UNMODIFIED","","",N,N],[17,"GIT_DIFF_INCLUDE_TYPECHANGE","","",N,N],[17,"GIT_DIFF_INCLUDE_TYPECHANGE_TREES","","",N,N],[17,"GIT_DIFF_IGNORE_FILEMODE","","",N,N],[17,"GIT_DIFF_IGNORE_SUBMODULES","","",N,N],[17,"GIT_DIFF_IGNORE_CASE","","",N,N],[17,"GIT_DIFF_DISABLE_PATHSPEC_MATCH","","",N,N],[17,"GIT_DIFF_SKIP_BINARY_CHECK","","",N,N],[17,"GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS","","",N,N],[17,"GIT_DIFF_UPDATE_INDEX","","",N,N],[17,"GIT_DIFF_INCLUDE_UNREADABLE","","",N,N],[17,"GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED","","",N,N],[17,"GIT_DIFF_FORCE_TEXT","","",N,N],[17,"GIT_DIFF_FORCE_BINARY","","",N,N],[17,"GIT_DIFF_IGNORE_WHITESPACE","","",N,N],[17,"GIT_DIFF_IGNORE_WHITESPACE_CHANGE","","",N,N],[17,"GIT_DIFF_IGNORE_WHITESPACE_EOL","","",N,N],[17,"GIT_DIFF_SHOW_UNTRACKED_CONTENT","","",N,N],[17,"GIT_DIFF_SHOW_UNMODIFIED","","",N,N],[17,"GIT_DIFF_PATIENCE","","",N,N],[17,"GIT_DIFF_MINIMAL","","",N,N],[17,"GIT_DIFF_SHOW_BINARY","","",N,N],[17,"GIT_DIFF_INDENT_HEURISTIC","","",N,N],[17,"GIT_DIFF_FIND_OPTIONS_VERSION","","",N,N],[17,"GIT_DIFF_FIND_BY_CONFIG","","",N,N],[17,"GIT_DIFF_FIND_RENAMES","","",N,N],[17,"GIT_DIFF_FIND_RENAMES_FROM_REWRITES","","",N,N],[17,"GIT_DIFF_FIND_COPIES","","",N,N],[17,"GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED","","",N,N],[17,"GIT_DIFF_FIND_REWRITES","","",N,N],[17,"GIT_DIFF_BREAK_REWRITES","","",N,N],[17,"GIT_DIFF_FIND_AND_BREAK_REWRITES","","",N,N],[17,"GIT_DIFF_FIND_FOR_UNTRACKED","","",N,N],[17,"GIT_DIFF_FIND_ALL","","",N,N],[17,"GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE","","",N,N],[17,"GIT_DIFF_FIND_IGNORE_WHITESPACE","","",N,N],[17,"GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE","","",N,N],[17,"GIT_DIFF_FIND_EXACT_MATCH_ONLY","","",N,N],[17,"GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY","","",N,N],[17,"GIT_DIFF_FIND_REMOVE_UNMODIFIED","","",N,N],[17,"GIT_DIFF_BINARY_NONE","","",N,N],[17,"GIT_DIFF_BINARY_LITERAL","","",N,N],[17,"GIT_DIFF_BINARY_DELTA","","",N,N],[17,"GIT_MERGE_FIND_RENAMES","","",N,N],[17,"GIT_MERGE_FAIL_ON_CONFLICT","","",N,N],[17,"GIT_MERGE_SKIP_REUC","","",N,N],[17,"GIT_MERGE_NO_RECURSIVE","","",N,N],[17,"GIT_MERGE_FILE_FAVOR_NORMAL","","",N,N],[17,"GIT_MERGE_FILE_FAVOR_OURS","","",N,N],[17,"GIT_MERGE_FILE_FAVOR_THEIRS","","",N,N],[17,"GIT_MERGE_FILE_FAVOR_UNION","","",N,N],[17,"GIT_MERGE_FILE_DEFAULT","","",N,N],[17,"GIT_MERGE_FILE_STYLE_MERGE","","",N,N],[17,"GIT_MERGE_FILE_STYLE_DIFF3","","",N,N],[17,"GIT_MERGE_FILE_SIMPLIFY_ALNUM","","",N,N],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE","","",N,N],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE_CHANGE","","",N,N],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE_EOL","","",N,N],[17,"GIT_MERGE_FILE_DIFF_PATIENCE","","",N,N],[17,"GIT_MERGE_FILE_DIFF_MINIMAL","","",N,N],[17,"GIT_MERGE_ANALYSIS_NONE","","",N,N],[17,"GIT_MERGE_ANALYSIS_NORMAL","","",N,N],[17,"GIT_MERGE_ANALYSIS_UP_TO_DATE","","",N,N],[17,"GIT_MERGE_ANALYSIS_FASTFORWARD","","",N,N],[17,"GIT_MERGE_ANALYSIS_UNBORN","","",N,N],[17,"GIT_MERGE_PREFERENCE_NONE","","",N,N],[17,"GIT_MERGE_PREFERENCE_NO_FASTFORWARD","","",N,N],[17,"GIT_MERGE_PREFERENCE_FASTFORWARD_ONLY","","",N,N],[17,"GIT_PROXY_NONE","","",N,N],[17,"GIT_PROXY_AUTO","","",N,N],[17,"GIT_PROXY_SPECIFIED","","",N,N],[17,"GIT_SERVICE_UPLOADPACK_LS","","",N,N],[17,"GIT_SERVICE_UPLOADPACK","","",N,N],[17,"GIT_SERVICE_RECEIVEPACK_LS","","",N,N],[17,"GIT_SERVICE_RECEIVEPACK","","",N,N],[17,"GIT_DESCRIBE_DEFAULT","","",N,N],[17,"GIT_DESCRIBE_TAGS","","",N,N],[17,"GIT_DESCRIBE_ALL","","",N,N],[17,"GIT_PACKBUILDER_ADDING_OBJECTS","","",N,N],[17,"GIT_PACKBUILDER_DELTAFICATION","","",N,N],[17,"GIT_STASH_DEFAULT","","",N,N],[17,"GIT_STASH_KEEP_INDEX","","",N,N],[17,"GIT_STASH_INCLUDE_UNTRACKED","","",N,N],[17,"GIT_STASH_INCLUDE_IGNORED","","",N,N],[17,"GIT_STASH_APPLY_DEFAULT","","",N,N],[17,"GIT_STASH_APPLY_REINSTATE_INDEX","","",N,N],[17,"GIT_STASH_APPLY_PROGRESS_NONE","","",N,N],[17,"GIT_STASH_APPLY_PROGRESS_LOADING_STASH","","",N,N],[17,"GIT_STASH_APPLY_PROGRESS_ANALYZE_INDEX","","",N,N],[17,"GIT_STASH_APPLY_PROGRESS_ANALYZE_MODIFIED","","",N,N],[17,"GIT_STASH_APPLY_PROGRESS_ANALYZE_UNTRACKED","","",N,N],[17,"GIT_STASH_APPLY_PROGRESS_CHECKOUT_UNTRACKED","","",N,N],[17,"GIT_STASH_APPLY_PROGRESS_CHECKOUT_MODIFIED","","",N,N],[17,"GIT_STASH_APPLY_PROGRESS_DONE","","",N,N],[11,"clone","","",2,[[["self"]],["git_oid"]]],[11,"clone","","",3,[[["self"]],["git_strarray"]]],[11,"clone","","",4,[[["self"]],["git_oidarray"]]],[11,"clone","","",6,[[["self"]],["git_time"]]],[11,"eq","","",6,[[["self"],["git_time"]],["bool"]]],[11,"ne","","",6,[[["self"],["git_time"]],["bool"]]],[11,"clone","","",16,[[["self"]],["git_transfer_progress"]]],[11,"clone","","",21,[[["self"]],["git_buf"]]],[11,"clone","","",22,[[["self"]],["git_blame_options"]]],[11,"clone","","",23,[[["self"]],["git_blame_hunk"]]],[11,"clone","","",24,[[["self"]],["git_index_entry"]]],[11,"clone","","",25,[[["self"]],["git_index_time"]]],[11,"eq","","",25,[[["self"],["git_index_time"]],["bool"]]],[11,"ne","","",25,[[["self"],["git_index_time"]],["bool"]]]],"paths":[[3,"git_revspec"],[3,"git_error"],[3,"git_oid"],[3,"git_strarray"],[3,"git_oidarray"],[3,"git_signature"],[3,"git_time"],[3,"git_clone_options"],[3,"git_checkout_options"],[3,"git_checkout_perfdata"],[3,"git_remote_callbacks"],[3,"git_fetch_options"],[3,"git_push_update"],[3,"git_cert"],[3,"git_cert_hostkey"],[3,"git_cert_x509"],[3,"git_transfer_progress"],[3,"git_diff_file"],[3,"git_status_options"],[3,"git_diff_delta"],[3,"git_status_entry"],[3,"git_buf"],[3,"git_blame_options"],[3,"git_blame_hunk"],[3,"git_index_entry"],[3,"git_index_time"],[3,"git_config_entry"],[3,"git_submodule_update_options"],[3,"git_writestream"],[3,"git_cred"],[3,"git_push_options"],[3,"git_repository_init_options"],[3,"git_remote_head"],[3,"git_diff_hunk"],[3,"git_diff_line"],[3,"git_diff_options"],[3,"git_diff_find_options"],[3,"git_diff_similarity_metric"],[3,"git_diff_binary"],[3,"git_diff_binary_file"],[3,"git_merge_options"],[3,"git_transport"],[3,"git_odb_backend"],[3,"git_refdb_backend"],[3,"git_proxy_options"],[3,"git_smart_subtransport_stream"],[3,"git_smart_subtransport"],[3,"git_smart_subtransport_definition"],[3,"git_describe_options"],[3,"git_describe_format_options"],[3,"git_stash_apply_options"]]};
searchIndex["libssh2_sys"]={"doc":"","items":[[3,"libssh2_agent_publickey","libssh2_sys","",N,N],[12,"magic","","",0,N],[12,"node","","",0,N],[12,"blob","","",0,N],[12,"blob_len","","",0,N],[12,"comment","","",0,N],[3,"libssh2_knownhost","","",N,N],[12,"magic","","",1,N],[12,"node","","",1,N],[12,"name","","",1,N],[12,"key","","",1,N],[12,"typemask","","",1,N],[3,"LIBSSH2_SFTP_ATTRIBUTES","","",N,N],[12,"flags","","",2,N],[12,"filesize","","",2,N],[12,"uid","","",2,N],[12,"gid","","",2,N],[12,"permissions","","",2,N],[12,"atime","","",2,N],[12,"mtime","","",2,N],[3,"LIBSSH2_SFTP_STATVFS","","",N,N],[12,"f_bsize","","",3,N],[12,"f_frsize","","",3,N],[12,"f_blocks","","",3,N],[12,"f_bfree","","",3,N],[12,"f_bavail","","",3,N],[12,"f_files","","",3,N],[12,"f_ffree","","",3,N],[12,"f_favail","","",3,N],[12,"f_fsid","","",3,N],[12,"f_flag","","",3,N],[12,"f_namemax","","",3,N],[4,"LIBSSH2_SESSION","","",N,N],[4,"LIBSSH2_AGENT","","",N,N],[4,"LIBSSH2_CHANNEL","","",N,N],[4,"LIBSSH2_LISTENER","","",N,N],[4,"LIBSSH2_KNOWNHOSTS","","",N,N],[4,"LIBSSH2_SFTP","","",N,N],[4,"LIBSSH2_SFTP_HANDLE","","",N,N],[5,"init","","",N,[[]]],[5,"libssh2_init","","",N,N],[5,"libssh2_exit","","",N,N],[5,"libssh2_free","","",N,N],[5,"libssh2_hostkey_hash","","",N,N],[5,"libssh2_session_init_ex","","",N,N],[5,"libssh2_session_free","","",N,N],[5,"libssh2_session_banner_get","","",N,N],[5,"libssh2_session_banner_set","","",N,N],[5,"libssh2_session_disconnect_ex","","",N,N],[5,"libssh2_session_flag","","",N,N],[5,"libssh2_session_get_blocking","","",N,N],[5,"libssh2_session_get_timeout","","",N,N],[5,"libssh2_session_hostkey","","",N,N],[5,"libssh2_session_method_pref","","",N,N],[5,"libssh2_session_methods","","",N,N],[5,"libssh2_session_set_blocking","","",N,N],[5,"libssh2_session_set_timeout","","",N,N],[5,"libssh2_session_supported_algs","","",N,N],[5,"libssh2_session_last_error","","",N,N],[5,"libssh2_session_handshake","","",N,N],[5,"libssh2_keepalive_config","","",N,N],[5,"libssh2_keepalive_send","","",N,N],[5,"libssh2_agent_init","","",N,N],[5,"libssh2_agent_free","","",N,N],[5,"libssh2_agent_connect","","",N,N],[5,"libssh2_agent_disconnect","","",N,N],[5,"libssh2_agent_list_identities","","",N,N],[5,"libssh2_agent_get_identity","","",N,N],[5,"libssh2_agent_userauth","","",N,N],[5,"libssh2_channel_free","","",N,N],[5,"libssh2_channel_close","","",N,N],[5,"libssh2_channel_wait_closed","","",N,N],[5,"libssh2_channel_wait_eof","","",N,N],[5,"libssh2_channel_eof","","",N,N],[5,"libssh2_channel_process_startup","","",N,N],[5,"libssh2_channel_flush_ex","","",N,N],[5,"libssh2_channel_write_ex","","",N,N],[5,"libssh2_channel_get_exit_signal","","",N,N],[5,"libssh2_channel_get_exit_status","","",N,N],[5,"libssh2_channel_open_ex","","",N,N],[5,"libssh2_channel_read_ex","","",N,N],[5,"libssh2_channel_setenv_ex","","",N,N],[5,"libssh2_channel_send_eof","","",N,N],[5,"libssh2_channel_request_pty_ex","","",N,N],[5,"libssh2_channel_request_pty_size_ex","","",N,N],[5,"libssh2_channel_window_read_ex","","",N,N],[5,"libssh2_channel_window_write_ex","","",N,N],[5,"libssh2_channel_receive_window_adjust2","","",N,N],[5,"libssh2_channel_direct_tcpip_ex","","",N,N],[5,"libssh2_channel_forward_accept","","",N,N],[5,"libssh2_channel_forward_cancel","","",N,N],[5,"libssh2_channel_forward_listen_ex","","",N,N],[5,"libssh2_userauth_authenticated","","",N,N],[5,"libssh2_userauth_list","","",N,N],[5,"libssh2_userauth_hostbased_fromfile_ex","","",N,N],[5,"libssh2_userauth_publickey_fromfile_ex","","",N,N],[5,"libssh2_userauth_publickey_frommemory","","",N,N],[5,"libssh2_userauth_password_ex","","",N,N],[5,"libssh2_knownhost_free","","",N,N],[5,"libssh2_knownhost_addc","","",N,N],[5,"libssh2_knownhost_check","","",N,N],[5,"libssh2_knownhost_checkp","","",N,N],[5,"libssh2_knownhost_del","","",N,N],[5,"libssh2_knownhost_get","","",N,N],[5,"libssh2_knownhost_readfile","","",N,N],[5,"libssh2_knownhost_readline","","",N,N],[5,"libssh2_knownhost_writefile","","",N,N],[5,"libssh2_knownhost_writeline","","",N,N],[5,"libssh2_knownhost_init","","",N,N],[5,"libssh2_scp_recv","","",N,N],[5,"libssh2_scp_send64","","",N,N],[5,"libssh2_sftp_init","","",N,N],[5,"libssh2_sftp_shutdown","","",N,N],[5,"libssh2_sftp_last_error","","",N,N],[5,"libssh2_sftp_open_ex","","",N,N],[5,"libssh2_sftp_close_handle","","",N,N],[5,"libssh2_sftp_mkdir_ex","","",N,N],[5,"libssh2_sftp_fsync","","",N,N],[5,"libssh2_sftp_fstat_ex","","",N,N],[5,"libssh2_sftp_fstatvfs","","",N,N],[5,"libssh2_sftp_stat_ex","","",N,N],[5,"libssh2_sftp_read","","",N,N],[5,"libssh2_sftp_symlink_ex","","",N,N],[5,"libssh2_sftp_rename_ex","","",N,N],[5,"libssh2_sftp_rmdir_ex","","",N,N],[5,"libssh2_sftp_write","","",N,N],[5,"libssh2_sftp_tell64","","",N,N],[5,"libssh2_sftp_seek64","","",N,N],[5,"libssh2_sftp_readdir_ex","","",N,N],[5,"libssh2_sftp_unlink_ex","","",N,N],[6,"libssh2_int64_t","","",N,N],[6,"libssh2_uint64_t","","",N,N],[6,"LIBSSH2_ALLOC_FUNC","","",N,N],[6,"LIBSSH2_FREE_FUNC","","",N,N],[6,"LIBSSH2_REALLOC_FUNC","","",N,N],[6,"LIBSSH2_PASSWD_CHANGEREQ_FUNC","","",N,N],[6,"libssh2_socket_t","","",N,N],[17,"SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT","","",N,N],[17,"SSH_DISCONNECT_PROTOCOL_ERROR","","",N,N],[17,"SSH_DISCONNECT_KEY_EXCHANGE_FAILED","","",N,N],[17,"SSH_DISCONNECT_RESERVED","","",N,N],[17,"SSH_DISCONNECT_MAC_ERROR","","",N,N],[17,"SSH_DISCONNECT_COMPRESSION_ERROR","","",N,N],[17,"SSH_DISCONNECT_SERVICE_NOT_AVAILABLE","","",N,N],[17,"SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED","","",N,N],[17,"SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE","","",N,N],[17,"SSH_DISCONNECT_CONNECTION_LOST","","",N,N],[17,"SSH_DISCONNECT_BY_APPLICATION","","",N,N],[17,"SSH_DISCONNECT_TOO_MANY_CONNECTIONS","","",N,N],[17,"SSH_DISCONNECT_AUTH_CANCELLED_BY_USER","","",N,N],[17,"SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE","","",N,N],[17,"SSH_DISCONNECT_ILLEGAL_USER_NAME","","",N,N],[17,"LIBSSH2_FLAG_SIGPIPE","","",N,N],[17,"LIBSSH2_FLAG_COMPRESS","","",N,N],[17,"LIBSSH2_HOSTKEY_TYPE_UNKNOWN","","",N,N],[17,"LIBSSH2_HOSTKEY_TYPE_RSA","","",N,N],[17,"LIBSSH2_HOSTKEY_TYPE_DSS","","",N,N],[17,"LIBSSH2_METHOD_KEX","","",N,N],[17,"LIBSSH2_METHOD_HOSTKEY","","",N,N],[17,"LIBSSH2_METHOD_CRYPT_CS","","",N,N],[17,"LIBSSH2_METHOD_CRYPT_SC","","",N,N],[17,"LIBSSH2_METHOD_MAC_CS","","",N,N],[17,"LIBSSH2_METHOD_MAC_SC","","",N,N],[17,"LIBSSH2_METHOD_COMP_CS","","",N,N],[17,"LIBSSH2_METHOD_COMP_SC","","",N,N],[17,"LIBSSH2_METHOD_LANG_CS","","",N,N],[17,"LIBSSH2_METHOD_LANG_SC","","",N,N],[17,"LIBSSH2_CHANNEL_PACKET_DEFAULT","","",N,N],[17,"LIBSSH2_CHANNEL_WINDOW_DEFAULT","","",N,N],[17,"LIBSSH2_ERROR_BANNER_RECV","","",N,N],[17,"LIBSSH2_ERROR_BANNER_SEND","","",N,N],[17,"LIBSSH2_ERROR_INVALID_MAC","","",N,N],[17,"LIBSSH2_ERROR_KEX_FAILURE","","",N,N],[17,"LIBSSH2_ERROR_ALLOC","","",N,N],[17,"LIBSSH2_ERROR_SOCKET_SEND","","",N,N],[17,"LIBSSH2_ERROR_KEY_EXCHANGE_FAILURE","","",N,N],[17,"LIBSSH2_ERROR_TIMEOUT","","",N,N],[17,"LIBSSH2_ERROR_HOSTKEY_INIT","","",N,N],[17,"LIBSSH2_ERROR_HOSTKEY_SIGN","","",N,N],[17,"LIBSSH2_ERROR_DECRYPT","","",N,N],[17,"LIBSSH2_ERROR_SOCKET_DISCONNECT","","",N,N],[17,"LIBSSH2_ERROR_PROTO","","",N,N],[17,"LIBSSH2_ERROR_PASSWORD_EXPIRED","","",N,N],[17,"LIBSSH2_ERROR_FILE","","",N,N],[17,"LIBSSH2_ERROR_METHOD_NONE","","",N,N],[17,"LIBSSH2_ERROR_AUTHENTICATION_FAILED","","",N,N],[17,"LIBSSH2_ERROR_PUBLICKEY_UNRECOGNIZED","","",N,N],[17,"LIBSSH2_ERROR_PUBLICKEY_UNVERIFIED","","",N,N],[17,"LIBSSH2_ERROR_CHANNEL_OUTOFORDER","","",N,N],[17,"LIBSSH2_ERROR_CHANNEL_FAILURE","","",N,N],[17,"LIBSSH2_ERROR_CHANNEL_REQUEST_DENIED","","",N,N],[17,"LIBSSH2_ERROR_CHANNEL_UNKNOWN","","",N,N],[17,"LIBSSH2_ERROR_CHANNEL_WINDOW_EXCEEDED","","",N,N],[17,"LIBSSH2_ERROR_CHANNEL_PACKET_EXCEEDED","","",N,N],[17,"LIBSSH2_ERROR_CHANNEL_CLOSED","","",N,N],[17,"LIBSSH2_ERROR_CHANNEL_EOF_SENT","","",N,N],[17,"LIBSSH2_ERROR_SCP_PROTOCOL","","",N,N],[17,"LIBSSH2_ERROR_ZLIB","","",N,N],[17,"LIBSSH2_ERROR_SOCKET_TIMEOUT","","",N,N],[17,"LIBSSH2_ERROR_SFTP_PROTOCOL","","",N,N],[17,"LIBSSH2_ERROR_REQUEST_DENIED","","",N,N],[17,"LIBSSH2_ERROR_METHOD_NOT_SUPPORTED","","",N,N],[17,"LIBSSH2_ERROR_INVAL","","",N,N],[17,"LIBSSH2_ERROR_INVALID_POLL_TYPE","","",N,N],[17,"LIBSSH2_ERROR_PUBLICKEY_PROTOCOL","","",N,N],[17,"LIBSSH2_ERROR_EAGAIN","","",N,N],[17,"LIBSSH2_ERROR_BUFFER_TOO_SMALL","","",N,N],[17,"LIBSSH2_ERROR_BAD_USE","","",N,N],[17,"LIBSSH2_ERROR_COMPRESS","","",N,N],[17,"LIBSSH2_ERROR_OUT_OF_BOUNDARY","","",N,N],[17,"LIBSSH2_ERROR_AGENT_PROTOCOL","","",N,N],[17,"LIBSSH2_ERROR_SOCKET_RECV","","",N,N],[17,"LIBSSH2_ERROR_ENCRYPT","","",N,N],[17,"LIBSSH2_ERROR_BAD_SOCKET","","",N,N],[17,"LIBSSH2_ERROR_KNOWN_HOSTS","","",N,N],[17,"LIBSSH2_FX_EOF","","",N,N],[17,"LIBSSH2_FX_NO_SUCH_FILE","","",N,N],[17,"LIBSSH2_FX_PERMISSION_DENIED","","",N,N],[17,"LIBSSH2_FX_FAILURE","","",N,N],[17,"LIBSSH2_FX_BAD_MESSAGE","","",N,N],[17,"LIBSSH2_FX_NO_CONNECTION","","",N,N],[17,"LIBSSH2_FX_CONNECTION_LOST","","",N,N],[17,"LIBSSH2_FX_OP_UNSUPPORTED","","",N,N],[17,"LIBSSH2_FX_INVALID_HANDLE","","",N,N],[17,"LIBSSH2_FX_NO_SUCH_PATH","","",N,N],[17,"LIBSSH2_FX_FILE_ALREADY_EXISTS","","",N,N],[17,"LIBSSH2_FX_WRITE_PROTECT","","",N,N],[17,"LIBSSH2_FX_NO_MEDIA","","",N,N],[17,"LIBSSH2_FX_NO_SPACE_ON_FILESYSTEM","","",N,N],[17,"LIBSSH2_FX_QUOTA_EXCEEDED","","",N,N],[17,"LIBSSH2_FX_UNKNOWN_PRINCIPAL","","",N,N],[17,"LIBSSH2_FX_LOCK_CONFLICT","","",N,N],[17,"LIBSSH2_FX_DIR_NOT_EMPTY","","",N,N],[17,"LIBSSH2_FX_NOT_A_DIRECTORY","","",N,N],[17,"LIBSSH2_FX_INVALID_FILENAME","","",N,N],[17,"LIBSSH2_FX_LINK_LOOP","","",N,N],[17,"LIBSSH2_HOSTKEY_HASH_MD5","","",N,N],[17,"LIBSSH2_HOSTKEY_HASH_SHA1","","",N,N],[17,"LIBSSH2_KNOWNHOST_FILE_OPENSSH","","",N,N],[17,"LIBSSH2_KNOWNHOST_CHECK_MATCH","","",N,N],[17,"LIBSSH2_KNOWNHOST_CHECK_MISMATCH","","",N,N],[17,"LIBSSH2_KNOWNHOST_CHECK_NOTFOUND","","",N,N],[17,"LIBSSH2_KNOWNHOST_CHECK_FAILURE","","",N,N],[17,"LIBSSH2_KNOWNHOST_TYPE_PLAIN","","",N,N],[17,"LIBSSH2_KNOWNHOST_TYPE_SHA1","","",N,N],[17,"LIBSSH2_KNOWNHOST_TYPE_CUSTOM","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEYENC_RAW","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEYENC_BASE64","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEY_RSA1","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEY_SSHRSA","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEY_SSHDSS","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEY_ECDSA_256","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEY_ECDSA_384","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEY_ECDSA_521","","",N,N],[17,"LIBSSH2_KNOWNHOST_KEY_UNKNOWN","","",N,N],[17,"LIBSSH2_FXF_READ","","",N,N],[17,"LIBSSH2_FXF_WRITE","","",N,N],[17,"LIBSSH2_FXF_APPEND","","",N,N],[17,"LIBSSH2_FXF_CREAT","","",N,N],[17,"LIBSSH2_FXF_TRUNC","","",N,N],[17,"LIBSSH2_FXF_EXCL","","",N,N],[17,"LIBSSH2_SFTP_OPENFILE","","",N,N],[17,"LIBSSH2_SFTP_OPENDIR","","",N,N],[17,"LIBSSH2_SFTP_ATTR_SIZE","","",N,N],[17,"LIBSSH2_SFTP_ATTR_UIDGID","","",N,N],[17,"LIBSSH2_SFTP_ATTR_PERMISSIONS","","",N,N],[17,"LIBSSH2_SFTP_ATTR_ACMODTIME","","",N,N],[17,"LIBSSH2_SFTP_ATTR_EXTENDED","","",N,N],[17,"LIBSSH2_SFTP_STAT","","",N,N],[17,"LIBSSH2_SFTP_LSTAT","","",N,N],[17,"LIBSSH2_SFTP_SETSTAT","","",N,N],[17,"LIBSSH2_SFTP_SYMLINK","","",N,N],[17,"LIBSSH2_SFTP_READLINK","","",N,N],[17,"LIBSSH2_SFTP_REALPATH","","",N,N],[17,"LIBSSH2_SFTP_RENAME_OVERWRITE","","",N,N],[17,"LIBSSH2_SFTP_RENAME_ATOMIC","","",N,N],[17,"LIBSSH2_SFTP_RENAME_NATIVE","","",N,N],[17,"LIBSSH2_INIT_NO_CRYPTO","","",N,N],[17,"LIBSSH2_SFTP_S_IFMT","","",N,N],[17,"LIBSSH2_SFTP_S_IFDIR","","",N,N],[17,"LIBSSH2_SFTP_S_IFREG","","",N,N],[17,"LIBSSH2_SFTP_S_IFLNK","","",N,N],[11,"clone","","",2,[[["self"]],["libssh2_sftp_attributes"]]],[11,"clone","","",3,[[["self"]],["libssh2_sftp_statvfs"]]]],"paths":[[3,"libssh2_agent_publickey"],[3,"libssh2_knownhost"],[3,"LIBSSH2_SFTP_ATTRIBUTES"],[3,"LIBSSH2_SFTP_STATVFS"]]};
searchIndex["libz_sys"]={"doc":"","items":[[3,"gz_header","libz_sys","",N,N],[12,"text","","",0,N],[12,"time","","",0,N],[12,"xflags","","",0,N],[12,"os","","",0,N],[12,"extra","","",0,N],[12,"extra_len","","",0,N],[12,"extra_max","","",0,N],[12,"name","","",0,N],[12,"name_max","","",0,N],[12,"comment","","",0,N],[12,"comm_max","","",0,N],[12,"hcrc","","",0,N],[12,"done","","",0,N],[3,"z_stream","","",N,N],[12,"next_in","","",1,N],[12,"avail_in","","",1,N],[12,"total_in","","",1,N],[12,"next_out","","",1,N],[12,"avail_out","","",1,N],[12,"total_out","","",1,N],[12,"msg","","",1,N],[12,"state","","",1,N],[12,"zalloc","","",1,N],[12,"zfree","","",1,N],[12,"opaque","","",1,N],[12,"data_type","","",1,N],[12,"adler","","",1,N],[12,"reserved","","",1,N],[4,"gzFile_s","","",N,N],[4,"internal_state","","",N,N],[5,"adler32","","",N,N],[5,"adler32_combine","","",N,N],[5,"compress","","",N,N],[5,"compress2","","",N,N],[5,"compressBound","","",N,N],[5,"crc32","","",N,N],[5,"crc32_combine","","",N,N],[5,"deflate","","",N,N],[5,"deflateBound","","",N,N],[5,"deflateCopy","","",N,N],[5,"deflateEnd","","",N,N],[5,"deflateInit_","","",N,N],[5,"deflateInit2_","","",N,N],[5,"deflateParams","","",N,N],[5,"deflatePrime","","",N,N],[5,"deflateReset","","",N,N],[5,"deflateSetDictionary","","",N,N],[5,"deflateSetHeader","","",N,N],[5,"deflateTune","","",N,N],[5,"gzdirect","","",N,N],[5,"gzdopen","","",N,N],[5,"gzclearerr","","",N,N],[5,"gzclose","","",N,N],[5,"gzeof","","",N,N],[5,"gzerror","","",N,N],[5,"gzflush","","",N,N],[5,"gzgetc","","",N,N],[5,"gzgets","","",N,N],[5,"gzopen","","",N,N],[5,"gzputc","","",N,N],[5,"gzputs","","",N,N],[5,"gzread","","",N,N],[5,"gzrewind","","",N,N],[5,"gzseek","","",N,N],[5,"gzsetparams","","",N,N],[5,"gztell","","",N,N],[5,"gzungetc","","",N,N],[5,"gzwrite","","",N,N],[5,"inflate","","",N,N],[5,"inflateBack","","",N,N],[5,"inflateBackEnd","","",N,N],[5,"inflateBackInit_","","",N,N],[5,"inflateCopy","","",N,N],[5,"inflateEnd","","",N,N],[5,"inflateGetHeader","","",N,N],[5,"inflateInit_","","",N,N],[5,"inflateInit2_","","",N,N],[5,"inflateMark","","",N,N],[5,"inflatePrime","","",N,N],[5,"inflateReset","","",N,N],[5,"inflateReset2","","",N,N],[5,"inflateSetDictionary","","",N,N],[5,"inflateSync","","",N,N],[5,"uncompress","","",N,N],[5,"zlibCompileFlags","","",N,N],[5,"zlibVersion","","",N,N],[6,"alloc_func","","",N,N],[6,"Bytef","","",N,N],[6,"free_func","","",N,N],[6,"gzFile","","",N,N],[6,"in_func","","",N,N],[6,"out_func","","",N,N],[6,"uInt","","",N,N],[6,"uLong","","",N,N],[6,"uLongf","","",N,N],[6,"voidp","","",N,N],[6,"voidpc","","",N,N],[6,"voidpf","","",N,N],[6,"z_off_t","","",N,N],[6,"gz_headerp","","",N,N],[6,"z_streamp","","",N,N],[17,"Z_NO_FLUSH","","",N,N],[17,"Z_PARTIAL_FLUSH","","",N,N],[17,"Z_SYNC_FLUSH","","",N,N],[17,"Z_FULL_FLUSH","","",N,N],[17,"Z_FINISH","","",N,N],[17,"Z_BLOCK","","",N,N],[17,"Z_TREES","","",N,N],[17,"Z_OK","","",N,N],[17,"Z_STREAM_END","","",N,N],[17,"Z_NEED_DICT","","",N,N],[17,"Z_ERRNO","","",N,N],[17,"Z_STREAM_ERROR","","",N,N],[17,"Z_DATA_ERROR","","",N,N],[17,"Z_MEM_ERROR","","",N,N],[17,"Z_BUF_ERROR","","",N,N],[17,"Z_VERSION_ERROR","","",N,N],[17,"Z_NO_COMPRESSION","","",N,N],[17,"Z_BEST_SPEED","","",N,N],[17,"Z_BEST_COMPRESSION","","",N,N],[17,"Z_DEFAULT_COMPRESSION","","",N,N],[17,"Z_FILTERED","","",N,N],[17,"Z_HUFFMAN_ONLY","","",N,N],[17,"Z_RLE","","",N,N],[17,"Z_FIXED","","",N,N],[17,"Z_DEFAULT_STRATEGY","","",N,N],[17,"Z_BINARY","","",N,N],[17,"Z_TEXT","","",N,N],[17,"Z_ASCII","","",N,N],[17,"Z_UNKNOWN","","",N,N],[17,"Z_DEFLATED","","",N,N],[11,"clone","","",0,[[["self"]],["gz_header"]]],[11,"clone","","",1,[[["self"]],["z_stream"]]]],"paths":[[3,"gz_header"],[3,"z_stream"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["matches"]={"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",N,N],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",N,N],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"The `memchr` crate provides heavily optimized routines for searching bytes.","items":[[3,"Memchr","memchr","An iterator for `memchr`.",N,N],[3,"Memchr2","","An iterator for `memchr2`.",N,N],[3,"Memchr3","","An iterator for `memchr3`.",N,N],[5,"memchr_iter","","An iterator over all occurrences of the needle in a haystack.",N,N],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a haystack, in reverse.",N,N],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memchr","","Search for the first occurrence of a byte in a slice.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",N,N],[5,"memrchr2","","Like `memrchr`, but searches for two bytes instead of one.",N,N],[5,"memrchr3","","Like `memrchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"new","","Create a new `Memchr3` that's initialized to zero with a haystack",2,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"next_back","","",2,[[["self"]],["option"]]]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["openssl_probe"]={"doc":"","items":[[3,"ProbeResult","openssl_probe","",N,N],[12,"cert_file","","",0,N],[12,"cert_dir","","",0,N],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be found.",N,[[],["vec",["pathbuf"]]]],[5,"init_ssl_cert_env_vars","","",N,[[]]],[5,"probe","","",N,[[],["proberesult"]]]],"paths":[[3,"ProbeResult"]]};
searchIndex["openssl_sys"]={"doc":"","items":[[3,"AES_KEY","openssl_sys","",N,N],[3,"ASN1_ENCODING","","",N,N],[12,"enc","","",0,N],[12,"len","","",0,N],[12,"modified","","",0,N],[3,"stack_st_ASN1_OBJECT","","",N,N],[12,"stack","","",1,N],[3,"BIO_METHOD","","",N,N],[12,"type_","","",2,N],[12,"name","","",2,N],[12,"bwrite","","",2,N],[12,"bread","","",2,N],[12,"bputs","","",2,N],[12,"bgets","","",2,N],[12,"ctrl","","",2,N],[12,"create","","",2,N],[12,"destroy","","",2,N],[12,"callback_ctrl","","",2,N],[3,"stack_st_void","","",N,N],[12,"stack","","",3,N],[3,"ECDSA_SIG","","",N,N],[12,"r","","",4,N],[12,"s","","",4,N],[3,"ERR_STRING_DATA","","",N,N],[12,"error","","",5,N],[12,"string","","",5,N],[3,"BIO","","",N,N],[12,"method","","",6,N],[12,"callback","","",6,N],[12,"cb_arg","","",6,N],[12,"init","","",6,N],[12,"shutdown","","",6,N],[12,"flags","","",6,N],[12,"retry_reason","","",6,N],[12,"num","","",6,N],[12,"ptr","","",6,N],[12,"next_bio","","",6,N],[12,"prev_bio","","",6,N],[12,"references","","",6,N],[12,"num_read","","",6,N],[12,"num_write","","",6,N],[12,"ex_data","","",6,N],[3,"BIGNUM","","",N,N],[12,"d","","",7,N],[12,"top","","",7,N],[12,"dmax","","",7,N],[12,"neg","","",7,N],[12,"flags","","",7,N],[3,"EVP_CIPHER","","",N,N],[12,"nid","","",8,N],[12,"block_size","","",8,N],[12,"key_len","","",8,N],[12,"iv_len","","",8,N],[12,"flags","","",8,N],[12,"init","","",8,N],[12,"do_cipher","","",8,N],[12,"cleanup","","",8,N],[12,"ctx_size","","",8,N],[12,"set_asn1_parameters","","",8,N],[12,"get_asn1_parameters","","",8,N],[12,"ctrl","","",8,N],[12,"app_data","","",8,N],[3,"EVP_MD_CTX","","",N,N],[3,"EVP_PKEY","","",N,N],[12,"type_","","",9,N],[12,"save_type","","",9,N],[12,"references","","",9,N],[12,"ameth","","",9,N],[12,"engine","","",9,N],[12,"pkey","","",9,N],[12,"save_parameters","","",9,N],[12,"attributes","","",9,N],[3,"HMAC_CTX","","",N,N],[3,"DH","","",N,N],[12,"pad","","",10,N],[12,"version","","",10,N],[12,"p","","",10,N],[12,"g","","",10,N],[12,"length","","",10,N],[12,"pub_key","","",10,N],[12,"priv_key","","",10,N],[12,"flags","","",10,N],[12,"method_mont_p","","",10,N],[12,"q","","",10,N],[12,"j","","",10,N],[12,"seed","","",10,N],[12,"seedlen","","",10,N],[12,"counter","","",10,N],[12,"references","","",10,N],[12,"ex_data","","",10,N],[12,"meth","","",10,N],[12,"engine","","",10,N],[3,"DSA","","",N,N],[12,"pad","","",11,N],[12,"version","","",11,N],[12,"write_params","","",11,N],[12,"p","","",11,N],[12,"q","","",11,N],[12,"g","","",11,N],[12,"pub_key","","",11,N],[12,"priv_key","","",11,N],[12,"kinv","","",11,N],[12,"r","","",11,N],[12,"flags","","",11,N],[12,"method_mont_p","","",11,N],[12,"references","","",11,N],[12,"ex_data","","",11,N],[12,"meth","","",11,N],[12,"engine","","",11,N],[3,"RSA","","",N,N],[12,"pad","","",12,N],[12,"version","","",12,N],[12,"meth","","",12,N],[12,"engine","","",12,N],[12,"n","","",12,N],[12,"e","","",12,N],[12,"d","","",12,N],[12,"p","","",12,N],[12,"q","","",12,N],[12,"dmp1","","",12,N],[12,"dmq1","","",12,N],[12,"iqmp","","",12,N],[12,"ex_data","","",12,N],[12,"references","","",12,N],[12,"flags","","",12,N],[12,"_method_mod_n","","",12,N],[12,"_method_mod_p","","",12,N],[12,"_method_mod_q","","",12,N],[12,"bignum_data","","",12,N],[12,"blinding","","",12,N],[12,"mt_blinding","","",12,N],[3,"X509","","",N,N],[12,"cert_info","","",13,N],[12,"sig_alg","","",13,N],[12,"signature","","",13,N],[12,"valid","","",13,N],[12,"references","","",13,N],[12,"name","","",13,N],[12,"ex_data","","",13,N],[12,"ex_pathlen","","",13,N],[12,"ex_pcpathlen","","",13,N],[12,"ex_flags","","",13,N],[12,"ex_kusage","","",13,N],[12,"ex_xkusage","","",13,N],[12,"ex_nscert","","",13,N],[3,"X509_ALGOR","","",N,N],[12,"algorithm","","",14,N],[3,"X509V3_CTX","","",N,N],[3,"SSL","","",N,N],[12,"server","","",15,N],[3,"SSL_CTX","","",N,N],[12,"references","","",16,N],[3,"SRP_CTX","","",N,N],[3,"CRYPTO_EX_DATA","","",N,N],[12,"sk","","",17,N],[12,"dummy","","",17,N],[3,"stack_st_OPENSSL_STRING","","",N,N],[12,"stack","","",18,N],[3,"SHA_CTX","","",N,N],[12,"h0","","",19,N],[12,"h1","","",19,N],[12,"h2","","",19,N],[12,"h3","","",19,N],[12,"h4","","",19,N],[12,"Nl","","",19,N],[12,"Nh","","",19,N],[12,"data","","",19,N],[12,"num","","",19,N],[3,"SHA256_CTX","","",N,N],[12,"h","","",20,N],[12,"Nl","","",20,N],[12,"Nh","","",20,N],[12,"data","","",20,N],[12,"num","","",20,N],[12,"md_len","","",20,N],[3,"SHA512_CTX","","",N,N],[12,"h","","",21,N],[12,"Nl","","",21,N],[12,"Nh","","",21,N],[12,"num","","",21,N],[12,"md_len","","",21,N],[3,"SSL_SESSION","","",N,N],[12,"master_key_length","","",22,N],[12,"master_key","","",22,N],[12,"references","","",22,N],[3,"stack_st_SSL_CIPHER","","",N,N],[12,"stack","","",23,N],[3,"SRTP_PROTECTION_PROFILE","","",N,N],[12,"name","","",24,N],[12,"id","","",24,N],[3,"stack_st_SRTP_PROTECTION_PROFILE","","",N,N],[12,"stack","","",25,N],[3,"_STACK","","",N,N],[12,"num","","",26,N],[12,"data","","",26,N],[12,"sorted","","",26,N],[12,"num_alloc","","",26,N],[12,"comp","","",26,N],[3,"X509_VAL","","",N,N],[12,"notBefore","","",27,N],[12,"notAfter","","",27,N],[3,"stack_st_X509_NAME","","",N,N],[12,"stack","","",28,N],[3,"stack_st_X509_EXTENSION","","",N,N],[12,"stack","","",29,N],[3,"stack_st_X509_ATTRIBUTE","","",N,N],[12,"stack","","",30,N],[3,"X509_REQ_INFO","","",N,N],[12,"enc","","",31,N],[12,"version","","",31,N],[12,"subject","","",31,N],[12,"attributes","","",31,N],[3,"X509_REQ","","",N,N],[12,"req_info","","",32,N],[3,"X509_CINF","","",N,N],[12,"validity","","",33,N],[12,"extensions","","",33,N],[3,"stack_st_X509","","",N,N],[12,"stack","","",34,N],[3,"GENERAL_NAME","","",N,N],[12,"type_","","",35,N],[12,"d","","",35,N],[3,"stack_st_GENERAL_NAME","","",N,N],[12,"stack","","",36,N],[4,"CMS_ContentInfo","","",N,N],[4,"point_conversion_form_t","","",N,N],[13,"POINT_CONVERSION_COMPRESSED","","",37,N],[13,"POINT_CONVERSION_UNCOMPRESSED","","",37,N],[13,"POINT_CONVERSION_HYBRID","","",37,N],[4,"EC_METHOD","","",N,N],[4,"EC_GROUP","","",N,N],[4,"EC_POINT","","",N,N],[4,"OCSP_CERTID","","",N,N],[4,"OCSP_ONEREQ","","",N,N],[4,"OCSP_REQUEST","","",N,N],[4,"OCSP_BASICRESP","","",N,N],[4,"ASN1_INTEGER","","",N,N],[4,"ASN1_GENERALIZEDTIME","","",N,N],[4,"ASN1_STRING","","",N,N],[4,"ASN1_BIT_STRING","","",N,N],[4,"ASN1_TIME","","",N,N],[4,"ASN1_TYPE","","",N,N],[4,"ASN1_OBJECT","","",N,N],[4,"bio_st","","",N,N],[4,"BN_BLINDING","","",N,N],[4,"BN_MONT_CTX","","",N,N],[4,"BN_CTX","","",N,N],[4,"BN_GENCB","","",N,N],[4,"EVP_CIPHER_CTX","","",N,N],[4,"EVP_MD","","",N,N],[4,"EVP_PKEY_ASN1_METHOD","","",N,N],[4,"EVP_PKEY_CTX","","",N,N],[4,"DH_METHOD","","",N,N],[4,"DSA_METHOD","","",N,N],[4,"RSA_METHOD","","",N,N],[4,"EC_KEY","","",N,N],[4,"X509_CRL","","",N,N],[4,"X509_NAME","","",N,N],[4,"X509_STORE","","",N,N],[4,"X509_STORE_CTX","","",N,N],[4,"CONF","","",N,N],[4,"ENGINE","","",N,N],[4,"COMP_METHOD","","",N,N],[4,"OCSP_RESPONSE","","",N,N],[4,"PKCS12","","",N,N],[4,"SSL_METHOD","","",N,N],[4,"SSL_CIPHER","","",N,N],[4,"X509_NAME_ENTRY","","",N,N],[4,"X509_EXTENSION","","",N,N],[4,"CONF_METHOD","","",N,N],[5,"BIO_set_retry_read","","",N,N],[5,"BIO_set_retry_write","","",N,N],[5,"BIO_clear_retry_flags","","",N,N],[5,"BIO_get_mem_data","","",N,N],[5,"ERR_GET_LIB","","",N,[[["c_ulong"]],["c_int"]]],[5,"ERR_GET_FUNC","","",N,[[["c_ulong"]],["c_int"]]],[5,"ERR_GET_REASON","","",N,[[["c_ulong"]],["c_int"]]],[5,"EVP_get_digestbynid","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_padding","","",N,N],[5,"EVP_PKEY_CTX_get_rsa_padding","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_pss_saltlen","","",N,N],[5,"EVP_PKEY_CTX_set_rsa_mgf1_md","","",N,N],[5,"SSL_CTX_set_mode","","",N,N],[5,"SSL_CTX_get_options","","",N,N],[5,"SSL_CTX_set_options","","",N,N],[5,"SSL_CTX_clear_options","","",N,N],[5,"SSL_CTX_set_tmp_dh","","",N,N],[5,"SSL_CTX_set_tmp_ecdh","","",N,N],[5,"SSL_set_tmp_dh","","",N,N],[5,"SSL_set_tmp_ecdh","","",N,N],[5,"SSL_CTX_add_extra_chain_cert","","",N,N],[5,"SSL_CTX_get_extra_chain_certs","","",N,N],[5,"SSL_CTX_set_session_cache_mode","","",N,N],[5,"SSL_CTX_set_read_ahead","","",N,N],[5,"SSL_session_reused","","",N,N],[5,"SSL_set_tlsext_host_name","","",N,N],[5,"SSL_set_tlsext_status_type","","",N,N],[5,"SSL_get_tlsext_status_ocsp_resp","","",N,N],[5,"SSL_set_tlsext_status_ocsp_resp","","",N,N],[5,"SSL_CTX_set_tlsext_servername_callback","","",N,N],[5,"SSL_CTX_set_tlsext_servername_arg","","",N,N],[5,"SSL_CTX_set_tlsext_status_cb","","",N,N],[5,"SSL_CTX_set_tlsext_status_arg","","",N,N],[5,"init","","",N,[[]]],[5,"AES_set_encrypt_key","","",N,N],[5,"AES_set_decrypt_key","","",N,N],[5,"AES_ige_encrypt","","",N,N],[5,"ASN1_OBJECT_free","","",N,N],[5,"ASN1_STRING_type_new","","",N,N],[5,"ASN1_STRING_data","","",N,N],[5,"ASN1_BIT_STRING_free","","",N,N],[5,"ASN1_STRING_free","","",N,N],[5,"ASN1_STRING_length","","",N,N],[5,"ASN1_GENERALIZEDTIME_free","","",N,N],[5,"ASN1_GENERALIZEDTIME_print","","",N,N],[5,"ASN1_TIME_free","","",N,N],[5,"ASN1_TIME_print","","",N,N],[5,"ASN1_INTEGER_free","","",N,N],[5,"ASN1_INTEGER_get","","",N,N],[5,"ASN1_INTEGER_set","","",N,N],[5,"BN_to_ASN1_INTEGER","","",N,N],[5,"ASN1_INTEGER_to_BN","","",N,N],[5,"ASN1_STRING_to_UTF8","","",N,N],[5,"BIO_set_flags","","",N,N],[5,"BIO_clear_flags","","",N,N],[5,"BIO_s_file","","",N,N],[5,"BIO_new","","",N,N],[5,"BIO_new_fp","","",N,N],[5,"BIO_write","","",N,N],[5,"BIO_read","","",N,N],[5,"BIO_ctrl","","",N,N],[5,"BIO_free_all","","",N,N],[5,"BIO_s_mem","","",N,N],[5,"BIO_new_mem_buf","","",N,N],[5,"BIO_new_socket","","",N,N],[5,"BN_CTX_new","","",N,N],[5,"BN_CTX_free","","",N,N],[5,"BN_rand","","",N,N],[5,"BN_pseudo_rand","","",N,N],[5,"BN_rand_range","","",N,N],[5,"BN_pseudo_rand_range","","",N,N],[5,"BN_new","","",N,N],[5,"BN_num_bits","","",N,N],[5,"BN_clear_free","","",N,N],[5,"BN_bin2bn","","",N,N],[5,"BN_bn2bin","","",N,N],[5,"BN_sub","","",N,N],[5,"BN_add","","",N,N],[5,"BN_mul","","",N,N],[5,"BN_sqr","","",N,N],[5,"BN_set_negative","","",N,N],[5,"BN_div","","",N,N],[5,"BN_nnmod","","",N,N],[5,"BN_mod_add","","",N,N],[5,"BN_mod_sub","","",N,N],[5,"BN_mod_mul","","",N,N],[5,"BN_mod_sqr","","",N,N],[5,"BN_mod_word","","",N,N],[5,"BN_div_word","","",N,N],[5,"BN_mul_word","","",N,N],[5,"BN_add_word","","",N,N],[5,"BN_sub_word","","",N,N],[5,"BN_set_word","","",N,N],[5,"BN_cmp","","",N,N],[5,"BN_free","","",N,N],[5,"BN_is_bit_set","","",N,N],[5,"BN_lshift","","",N,N],[5,"BN_lshift1","","",N,N],[5,"BN_exp","","",N,N],[5,"BN_mod_exp","","",N,N],[5,"BN_mask_bits","","",N,N],[5,"BN_rshift","","",N,N],[5,"BN_rshift1","","",N,N],[5,"BN_bn2hex","","",N,N],[5,"BN_bn2dec","","",N,N],[5,"BN_hex2bn","","",N,N],[5,"BN_dec2bn","","",N,N],[5,"BN_gcd","","",N,N],[5,"BN_mod_inverse","","",N,N],[5,"BN_clear","","",N,N],[5,"BN_dup","","",N,N],[5,"BN_ucmp","","",N,N],[5,"BN_set_bit","","",N,N],[5,"BN_clear_bit","","",N,N],[5,"BN_generate_prime_ex","","",N,N],[5,"BN_is_prime_ex","","",N,N],[5,"BN_is_prime_fasttest_ex","","",N,N],[5,"get_rfc2409_prime_768","","",N,N],[5,"get_rfc2409_prime_1024","","",N,N],[5,"get_rfc3526_prime_1536","","",N,N],[5,"get_rfc3526_prime_2048","","",N,N],[5,"get_rfc3526_prime_3072","","",N,N],[5,"get_rfc3526_prime_4096","","",N,N],[5,"get_rfc3526_prime_6144","","",N,N],[5,"get_rfc3526_prime_8192","","",N,N],[5,"CMS_ContentInfo_free","","",N,N],[5,"i2d_CMS_ContentInfo","","",N,N],[5,"SMIME_read_CMS","","",N,N],[5,"CMS_sign","","",N,N],[5,"CMS_decrypt","","",N,N],[5,"NCONF_new","","",N,N],[5,"NCONF_default","","",N,N],[5,"NCONF_free","","",N,N],[5,"SSLeay","","",N,N],[5,"SSLeay_version","","",N,N],[5,"CRYPTO_num_locks","","",N,N],[5,"CRYPTO_set_locking_callback","","",N,N],[5,"CRYPTO_set_id_callback","","",N,N],[5,"CRYPTO_add_lock","","",N,N],[5,"CRYPTO_malloc","","",N,N],[5,"CRYPTO_free","","",N,N],[5,"FIPS_mode","","",N,N],[5,"FIPS_mode_set","","",N,N],[5,"CRYPTO_memcmp","","",N,N],[5,"DH_new","","",N,N],[5,"DH_free","","",N,N],[5,"d2i_DHparams","","",N,N],[5,"i2d_DHparams","","",N,N],[5,"DSA_new","","",N,N],[5,"DSA_free","","",N,N],[5,"DSA_size","","",N,N],[5,"DSA_sign","","",N,N],[5,"DSA_verify","","",N,N],[5,"d2i_DSAPublicKey","","",N,N],[5,"d2i_DSAPrivateKey","","",N,N],[5,"DSA_generate_parameters_ex","","",N,N],[5,"DSA_generate_key","","",N,N],[5,"i2d_DSAPublicKey","","",N,N],[5,"i2d_DSAPrivateKey","","",N,N],[5,"EC_GF2m_simple_method","","",N,N],[5,"EC_GROUP_new","","",N,N],[5,"EC_GROUP_free","","",N,N],[5,"EC_GROUP_get_order","","",N,N],[5,"EC_GROUP_set_asn1_flag","","",N,N],[5,"EC_GROUP_get_curve_GFp","","",N,N],[5,"EC_GROUP_get_curve_GF2m","","",N,N],[5,"EC_GROUP_get_degree","","",N,N],[5,"EC_GROUP_new_curve_GFp","","",N,N],[5,"EC_GROUP_new_curve_GF2m","","",N,N],[5,"EC_GROUP_new_by_curve_name","","",N,N],[5,"EC_POINT_new","","",N,N],[5,"EC_POINT_free","","",N,N],[5,"EC_POINT_get_affine_coordinates_GFp","","",N,N],[5,"EC_POINT_get_affine_coordinates_GF2m","","",N,N],[5,"EC_POINT_point2oct","","",N,N],[5,"EC_POINT_oct2point","","",N,N],[5,"EC_POINT_add","","",N,N],[5,"EC_POINT_invert","","",N,N],[5,"EC_POINT_cmp","","",N,N],[5,"EC_POINT_mul","","",N,N],[5,"EC_KEY_new","","",N,N],[5,"EC_KEY_new_by_curve_name","","",N,N],[5,"EC_KEY_free","","",N,N],[5,"EC_KEY_dup","","",N,N],[5,"EC_KEY_up_ref","","",N,N],[5,"EC_KEY_get0_group","","",N,N],[5,"EC_KEY_set_group","","",N,N],[5,"EC_KEY_get0_private_key","","",N,N],[5,"EC_KEY_set_private_key","","",N,N],[5,"EC_KEY_get0_public_key","","",N,N],[5,"EC_KEY_set_public_key","","",N,N],[5,"EC_KEY_generate_key","","",N,N],[5,"EC_KEY_check_key","","",N,N],[5,"EC_KEY_set_public_key_affine_coordinates","","",N,N],[5,"ECDSA_SIG_new","","",N,N],[5,"ECDSA_SIG_free","","",N,N],[5,"ECDSA_do_sign","","",N,N],[5,"ECDSA_do_verify","","",N,N],[5,"ERR_put_error","","",N,N],[5,"ERR_set_error_data","","",N,N],[5,"ERR_get_error","","",N,N],[5,"ERR_get_error_line_data","","",N,N],[5,"ERR_peek_last_error","","",N,N],[5,"ERR_clear_error","","",N,N],[5,"ERR_lib_error_string","","",N,N],[5,"ERR_func_error_string","","",N,N],[5,"ERR_reason_error_string","","",N,N],[5,"ERR_load_strings","","",N,N],[5,"ERR_load_crypto_strings","","",N,N],[5,"ERR_get_next_error_library","","",N,N],[5,"EVP_MD_size","","",N,N],[5,"EVP_MD_CTX_create","","",N,N],[5,"EVP_MD_CTX_destroy","","",N,N],[5,"EVP_DigestInit_ex","","",N,N],[5,"EVP_DigestUpdate","","",N,N],[5,"EVP_DigestFinal_ex","","",N,N],[5,"EVP_DigestInit","","",N,N],[5,"EVP_DigestFinal","","",N,N],[5,"EVP_BytesToKey","","",N,N],[5,"EVP_CipherInit","","",N,N],[5,"EVP_CipherInit_ex","","",N,N],[5,"EVP_CipherUpdate","","",N,N],[5,"EVP_CipherFinal","","",N,N],[5,"EVP_DigestSignInit","","",N,N],[5,"EVP_DigestSignFinal","","",N,N],[5,"EVP_DigestVerifyInit","","",N,N],[5,"EVP_DigestVerifyFinal","","",N,N],[5,"EVP_CIPHER_CTX_new","","",N,N],[5,"EVP_CIPHER_CTX_free","","",N,N],[5,"EVP_MD_CTX_copy_ex","","",N,N],[5,"EVP_CIPHER_CTX_set_key_length","","",N,N],[5,"EVP_CIPHER_CTX_set_padding","","",N,N],[5,"EVP_CIPHER_CTX_ctrl","","",N,N],[5,"EVP_md5","","",N,N],[5,"EVP_sha1","","",N,N],[5,"EVP_sha224","","",N,N],[5,"EVP_sha256","","",N,N],[5,"EVP_sha384","","",N,N],[5,"EVP_sha512","","",N,N],[5,"EVP_ripemd160","","",N,N],[5,"EVP_des_ecb","","",N,N],[5,"EVP_des_ede3","","",N,N],[5,"EVP_des_ede3_cbc","","",N,N],[5,"EVP_des_cbc","","",N,N],[5,"EVP_rc4","","",N,N],[5,"EVP_bf_ecb","","",N,N],[5,"EVP_bf_cbc","","",N,N],[5,"EVP_bf_cfb64","","",N,N],[5,"EVP_bf_ofb","","",N,N],[5,"EVP_aes_128_ecb","","",N,N],[5,"EVP_aes_128_cbc","","",N,N],[5,"EVP_aes_128_cfb1","","",N,N],[5,"EVP_aes_128_cfb8","","",N,N],[5,"EVP_aes_128_cfb128","","",N,N],[5,"EVP_aes_128_ctr","","",N,N],[5,"EVP_aes_128_ccm","","",N,N],[5,"EVP_aes_128_gcm","","",N,N],[5,"EVP_aes_128_xts","","",N,N],[5,"EVP_aes_256_ecb","","",N,N],[5,"EVP_aes_256_cbc","","",N,N],[5,"EVP_aes_256_cfb1","","",N,N],[5,"EVP_aes_256_cfb8","","",N,N],[5,"EVP_aes_256_cfb128","","",N,N],[5,"EVP_aes_256_ctr","","",N,N],[5,"EVP_aes_256_ccm","","",N,N],[5,"EVP_aes_256_gcm","","",N,N],[5,"EVP_aes_256_xts","","",N,N],[5,"OPENSSL_add_all_algorithms_noconf","","",N,N],[5,"EVP_get_digestbyname","","",N,N],[5,"EVP_get_cipherbyname","","",N,N],[5,"EVP_PKEY_id","","",N,N],[5,"EVP_PKEY_bits","","",N,N],[5,"EVP_PKEY_assign","","",N,N],[5,"EVP_PKEY_set1_RSA","","",N,N],[5,"EVP_PKEY_get1_RSA","","",N,N],[5,"EVP_PKEY_get1_DSA","","",N,N],[5,"EVP_PKEY_get1_DH","","",N,N],[5,"EVP_PKEY_get1_EC_KEY","","",N,N],[5,"EVP_PKEY_new","","",N,N],[5,"EVP_PKEY_free","","",N,N],[5,"d2i_AutoPrivateKey","","",N,N],[5,"EVP_PKEY_cmp","","",N,N],[5,"EVP_PKEY_copy_parameters","","",N,N],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",N,N],[5,"PKCS5_PBKDF2_HMAC","","",N,N],[5,"EVP_PKEY_CTX_new","","",N,N],[5,"EVP_PKEY_CTX_new_id","","",N,N],[5,"EVP_PKEY_CTX_free","","",N,N],[5,"EVP_PKEY_CTX_ctrl","","",N,N],[5,"EVP_PKEY_new_mac_key","","",N,N],[5,"EVP_PKEY_derive_init","","",N,N],[5,"EVP_PKEY_derive_set_peer","","",N,N],[5,"EVP_PKEY_derive","","",N,N],[5,"EVP_PKEY_keygen_init","","",N,N],[5,"EVP_PKEY_keygen","","",N,N],[5,"HMAC_CTX_init","","",N,N],[5,"HMAC_CTX_cleanup","","",N,N],[5,"HMAC_Init_ex","","",N,N],[5,"HMAC_Update","","",N,N],[5,"HMAC_Final","","",N,N],[5,"HMAC_CTX_copy","","",N,N],[5,"OBJ_nid2ln","","",N,N],[5,"OBJ_nid2sn","","",N,N],[5,"OBJ_obj2nid","","",N,N],[5,"OBJ_obj2txt","","",N,N],[5,"OBJ_find_sigid_algs","","",N,N],[5,"OCSP_cert_to_id","","",N,N],[5,"OCSP_request_add0_id","","",N,N],[5,"OCSP_resp_find_status","","",N,N],[5,"OCSP_check_validity","","",N,N],[5,"OCSP_response_status","","",N,N],[5,"OCSP_response_get1_basic","","",N,N],[5,"OCSP_response_create","","",N,N],[5,"OCSP_BASICRESP_new","","",N,N],[5,"OCSP_BASICRESP_free","","",N,N],[5,"OCSP_RESPONSE_new","","",N,N],[5,"OCSP_RESPONSE_free","","",N,N],[5,"i2d_OCSP_RESPONSE","","",N,N],[5,"d2i_OCSP_RESPONSE","","",N,N],[5,"OCSP_ONEREQ_free","","",N,N],[5,"OCSP_CERTID_free","","",N,N],[5,"OCSP_REQUEST_new","","",N,N],[5,"OCSP_REQUEST_free","","",N,N],[5,"i2d_OCSP_REQUEST","","",N,N],[5,"d2i_OCSP_REQUEST","","",N,N],[5,"OCSP_basic_verify","","",N,N],[5,"PEM_read_bio_X509","","",N,N],[5,"PEM_write_bio_X509","","",N,N],[5,"PEM_read_bio_X509_REQ","","",N,N],[5,"PEM_write_bio_X509_REQ","","",N,N],[5,"PEM_read_bio_RSAPrivateKey","","",N,N],[5,"PEM_write_bio_RSAPrivateKey","","",N,N],[5,"PEM_read_bio_RSAPublicKey","","",N,N],[5,"PEM_write_bio_RSAPublicKey","","",N,N],[5,"PEM_read_bio_RSA_PUBKEY","","",N,N],[5,"PEM_write_bio_RSA_PUBKEY","","",N,N],[5,"PEM_read_bio_DSAPrivateKey","","",N,N],[5,"PEM_write_bio_DSAPrivateKey","","",N,N],[5,"PEM_read_bio_DSA_PUBKEY","","",N,N],[5,"PEM_write_bio_DSA_PUBKEY","","",N,N],[5,"PEM_read_bio_ECPrivateKey","","",N,N],[5,"PEM_write_bio_ECPrivateKey","","",N,N],[5,"PEM_read_bio_DHparams","","",N,N],[5,"PEM_write_bio_DHparams","","",N,N],[5,"PEM_read_bio_PrivateKey","","",N,N],[5,"PEM_write_bio_PrivateKey","","",N,N],[5,"PEM_read_bio_PUBKEY","","",N,N],[5,"PEM_write_bio_PUBKEY","","",N,N],[5,"PEM_write_bio_PKCS8PrivateKey","","",N,N],[5,"d2i_PKCS8PrivateKey_bio","","",N,N],[5,"PKCS12_free","","",N,N],[5,"i2d_PKCS12","","",N,N],[5,"d2i_PKCS12","","",N,N],[5,"PKCS12_parse","","",N,N],[5,"PKCS12_create","","",N,N],[5,"i2d_PKCS12_bio","","",N,N],[5,"RAND_bytes","","",N,N],[5,"RAND_status","","",N,N],[5,"RSA_new","","",N,N],[5,"RSA_size","","",N,N],[5,"RSA_generate_key","","",N,N],[5,"RSA_generate_key_ex","","",N,N],[5,"RSA_public_encrypt","","",N,N],[5,"RSA_private_encrypt","","",N,N],[5,"RSA_public_decrypt","","",N,N],[5,"RSA_private_decrypt","","",N,N],[5,"RSA_free","","",N,N],[5,"RSA_up_ref","","",N,N],[5,"i2d_RSAPublicKey","","",N,N],[5,"d2i_RSAPublicKey","","",N,N],[5,"i2d_RSAPrivateKey","","",N,N],[5,"d2i_RSAPrivateKey","","",N,N],[5,"RSA_sign","","",N,N],[5,"RSA_verify","","",N,N],[5,"RSA_padding_check_PKCS1_type_2","","",N,N],[5,"SHA1_Init","","",N,N],[5,"SHA1_Update","","",N,N],[5,"SHA1_Final","","",N,N],[5,"SHA1","","",N,N],[5,"SHA224_Init","","",N,N],[5,"SHA224_Update","","",N,N],[5,"SHA224_Final","","",N,N],[5,"SHA224","","",N,N],[5,"SHA256_Init","","",N,N],[5,"SHA256_Update","","",N,N],[5,"SHA256_Final","","",N,N],[5,"SHA256","","",N,N],[5,"SHA384_Init","","",N,N],[5,"SHA384_Update","","",N,N],[5,"SHA384_Final","","",N,N],[5,"SHA384","","",N,N],[5,"SHA512_Init","","",N,N],[5,"SHA512_Update","","",N,N],[5,"SHA512_Final","","",N,N],[5,"SHA512","","",N,N],[5,"SSL_CTX_set_tlsext_use_srtp","","",N,N],[5,"SSL_set_tlsext_use_srtp","","",N,N],[5,"SSL_get_srtp_profiles","","",N,N],[5,"SSL_get_selected_srtp_profile","","",N,N],[5,"SSL_CTX_sess_set_new_cb","","",N,N],[5,"SSL_CTX_sess_set_remove_cb","","",N,N],[5,"SSL_CTX_sess_set_get_cb","","",N,N],[5,"SSL_CTX_set_cookie_generate_cb","","",N,N],[5,"SSL_CTX_set_cookie_verify_cb","","",N,N],[5,"SSL_CTX_set_next_protos_advertised_cb","","",N,N],[5,"SSL_CTX_set_next_proto_select_cb","","",N,N],[5,"SSL_get0_next_proto_negotiated","","",N,N],[5,"SSL_select_next_proto","","",N,N],[5,"SSL_CTX_set_psk_client_callback","","",N,N],[5,"SSL_CTX_set_psk_server_callback","","",N,N],[5,"SSL_get_finished","","",N,N],[5,"SSL_get_peer_finished","","",N,N],[5,"SSL_CTX_set_cipher_list","","",N,N],[5,"SSL_CTX_new","","",N,N],[5,"SSL_CTX_free","","",N,N],[5,"SSL_CTX_get_cert_store","","",N,N],[5,"SSL_get_current_cipher","","",N,N],[5,"SSL_CIPHER_get_bits","","",N,N],[5,"SSL_CIPHER_get_version","","",N,N],[5,"SSL_CIPHER_get_name","","",N,N],[5,"SSL_pending","","",N,N],[5,"SSL_set_bio","","",N,N],[5,"SSL_get_rbio","","",N,N],[5,"SSL_get_wbio","","",N,N],[5,"SSL_set_verify","","",N,N],[5,"SSL_CTX_use_PrivateKey","","",N,N],[5,"SSL_CTX_use_certificate","","",N,N],[5,"SSL_CTX_use_PrivateKey_file","","",N,N],[5,"SSL_CTX_use_certificate_file","","",N,N],[5,"SSL_CTX_use_certificate_chain_file","","",N,N],[5,"SSL_load_client_CA_file","","",N,N],[5,"SSL_load_error_strings","","",N,N],[5,"SSL_state_string","","",N,N],[5,"SSL_state_string_long","","",N,N],[5,"SSL_SESSION_get_id","","",N,N],[5,"SSL_SESSION_free","","",N,N],[5,"i2d_SSL_SESSION","","",N,N],[5,"SSL_set_session","","",N,N],[5,"d2i_SSL_SESSION","","",N,N],[5,"SSL_get_peer_certificate","","",N,N],[5,"SSL_get_peer_cert_chain","","",N,N],[5,"SSL_CTX_set_verify","","",N,N],[5,"SSL_CTX_set_verify_depth","","",N,N],[5,"SSL_CTX_check_private_key","","",N,N],[5,"SSL_CTX_set_session_id_context","","",N,N],[5,"SSL_new","","",N,N],[5,"SSL_free","","",N,N],[5,"SSL_accept","","",N,N],[5,"SSL_connect","","",N,N],[5,"SSL_read","","",N,N],[5,"SSL_write","","",N,N],[5,"SSL_ctrl","","",N,N],[5,"SSL_CTX_ctrl","","",N,N],[5,"SSL_CTX_callback_ctrl","","",N,N],[5,"SSLv3_method","","",N,N],[5,"SSLv23_method","","",N,N],[5,"TLSv1_method","","",N,N],[5,"TLSv1_1_method","","",N,N],[5,"TLSv1_2_method","","",N,N],[5,"DTLSv1_method","","",N,N],[5,"SSL_get_error","","",N,N],[5,"SSL_get_version","","",N,N],[5,"SSL_do_handshake","","",N,N],[5,"SSL_shutdown","","",N,N],[5,"SSL_CTX_set_client_CA_list","","",N,N],[5,"SSL_CTX_set_default_verify_paths","","",N,N],[5,"SSL_CTX_load_verify_locations","","",N,N],[5,"SSL_get_ssl_method","","",N,N],[5,"SSL_set_connect_state","","",N,N],[5,"SSL_set_accept_state","","",N,N],[5,"SSL_library_init","","",N,N],[5,"SSL_CIPHER_description","","",N,N],[5,"SSL_get_certificate","","",N,N],[5,"SSL_get_privatekey","","",N,N],[5,"SSL_set_shutdown","","",N,N],[5,"SSL_get_shutdown","","",N,N],[5,"SSL_version","","",N,N],[5,"SSL_get_session","","",N,N],[5,"SSL_get_SSL_CTX","","",N,N],[5,"SSL_set_SSL_CTX","","",N,N],[5,"SSL_get_verify_result","","",N,N],[5,"SSL_get_ex_new_index","","",N,N],[5,"SSL_set_ex_data","","",N,N],[5,"SSL_get_ex_data","","",N,N],[5,"SSL_CTX_get_ex_new_index","","",N,N],[5,"SSL_CTX_set_ex_data","","",N,N],[5,"SSL_CTX_get_ex_data","","",N,N],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",N,N],[5,"SSL_CTX_set_tmp_dh_callback","","",N,N],[5,"SSL_set_tmp_dh_callback","","",N,N],[5,"SSL_CTX_set_tmp_ecdh_callback","","",N,N],[5,"SSL_set_tmp_ecdh_callback","","",N,N],[5,"SSL_get_current_compression","","",N,N],[5,"SSL_COMP_get_name","","",N,N],[5,"sk_num","","",N,N],[5,"sk_value","","",N,N],[5,"sk_new_null","","",N,N],[5,"sk_free","","",N,N],[5,"sk_pop_free","","",N,N],[5,"sk_push","","",N,N],[5,"sk_pop","","",N,N],[5,"SSL_get_servername","","",N,N],[5,"SSL_export_keying_material","","",N,N],[5,"X509_verify_cert_error_string","","",N,N],[5,"X509_sign","","",N,N],[5,"X509_digest","","",N,N],[5,"X509_REQ_sign","","",N,N],[5,"i2d_X509_bio","","",N,N],[5,"i2d_X509_REQ_bio","","",N,N],[5,"i2d_PrivateKey_bio","","",N,N],[5,"i2d_PUBKEY_bio","","",N,N],[5,"i2d_PUBKEY","","",N,N],[5,"d2i_PUBKEY","","",N,N],[5,"d2i_RSA_PUBKEY","","",N,N],[5,"i2d_RSA_PUBKEY","","",N,N],[5,"d2i_DSA_PUBKEY","","",N,N],[5,"i2d_DSA_PUBKEY","","",N,N],[5,"i2d_PrivateKey","","",N,N],[5,"d2i_ECPrivateKey","","",N,N],[5,"i2d_ECPrivateKey","","",N,N],[5,"X509_gmtime_adj","","",N,N],[5,"X509_to_X509_REQ","","",N,N],[5,"X509_ALGOR_free","","",N,N],[5,"X509_REQ_new","","",N,N],[5,"X509_REQ_free","","",N,N],[5,"d2i_X509_REQ","","",N,N],[5,"i2d_X509_REQ","","",N,N],[5,"X509_EXTENSION_free","","",N,N],[5,"X509_NAME_ENTRY_free","","",N,N],[5,"X509_NAME_new","","",N,N],[5,"X509_NAME_free","","",N,N],[5,"X509_new","","",N,N],[5,"X509_free","","",N,N],[5,"i2d_X509","","",N,N],[5,"d2i_X509","","",N,N],[5,"X509_get_pubkey","","",N,N],[5,"X509_set_version","","",N,N],[5,"X509_set_serialNumber","","",N,N],[5,"X509_get_serialNumber","","",N,N],[5,"X509_set_issuer_name","","",N,N],[5,"X509_get_issuer_name","","",N,N],[5,"X509_set_subject_name","","",N,N],[5,"X509_get_subject_name","","",N,N],[5,"X509_set_notBefore","","",N,N],[5,"X509_set_notAfter","","",N,N],[5,"X509_REQ_set_version","","",N,N],[5,"X509_REQ_set_subject_name","","",N,N],[5,"X509_REQ_set_pubkey","","",N,N],[5,"X509_REQ_get_pubkey","","",N,N],[5,"X509_REQ_get_extensions","","",N,N],[5,"X509_REQ_add_extensions","","",N,N],[5,"X509_set_pubkey","","",N,N],[5,"X509_NAME_entry_count","","",N,N],[5,"X509_NAME_get_index_by_NID","","",N,N],[5,"X509_NAME_get_entry","","",N,N],[5,"X509_NAME_add_entry_by_NID","","",N,N],[5,"X509_NAME_ENTRY_get_object","","",N,N],[5,"X509_NAME_ENTRY_get_data","","",N,N],[5,"X509_NAME_add_entry_by_txt","","",N,N],[5,"X509_add_ext","","",N,N],[5,"X509_get_ext_d2i","","",N,N],[5,"X509_verify_cert","","",N,N],[5,"X509_STORE_new","","",N,N],[5,"X509_STORE_free","","",N,N],[5,"X509_STORE_CTX_new","","",N,N],[5,"X509_STORE_CTX_free","","",N,N],[5,"X509_STORE_CTX_init","","",N,N],[5,"X509_STORE_CTX_cleanup","","",N,N],[5,"X509_STORE_add_cert","","",N,N],[5,"X509_STORE_set_default_paths","","",N,N],[5,"X509_STORE_CTX_get_ex_data","","",N,N],[5,"X509_STORE_CTX_get_error","","",N,N],[5,"X509_STORE_CTX_set_error","","",N,N],[5,"X509_STORE_CTX_get_error_depth","","",N,N],[5,"X509_STORE_CTX_get_current_cert","","",N,N],[5,"X509_STORE_CTX_get_chain","","",N,N],[5,"GENERAL_NAME_free","","",N,N],[5,"X509V3_EXT_nconf_nid","","",N,N],[5,"X509V3_EXT_nconf","","",N,N],[5,"X509_check_issued","","",N,N],[5,"X509V3_set_nconf","","",N,N],[5,"X509V3_set_ctx","","",N,N],[5,"X509_get1_ocsp","","",N,N],[11,"clone","","",37,[[["self"]],["point_conversion_form_t"]]],[6,"bio_info_cb","","",N,N],[6,"BN_ULONG","","",N,N],[6,"CRYPTO_EX_new","","",N,N],[6,"CRYPTO_EX_dup","","",N,N],[6,"CRYPTO_EX_free","","",N,N],[6,"pem_password_cb","","",N,N],[6,"SHA_LONG","","",N,N],[6,"SHA_LONG64","","",N,N],[6,"tls_session_ticket_ext_cb_fn","","",N,N],[6,"tls_session_secret_cb_fn","","",N,N],[6,"GEN_SESSION_CB","","",N,N],[6,"PasswordCallback","","",N,N],[17,"AES_ENCRYPT","","",N,N],[17,"AES_DECRYPT","","",N,N],[17,"AES_MAXNR","","",N,N],[17,"AES_BLOCK_SIZE","","",N,N],[17,"V_ASN1_UTCTIME","","",N,N],[17,"V_ASN1_GENERALIZEDTIME","","",N,N],[17,"MBSTRING_FLAG","","",N,N],[17,"MBSTRING_UTF8","","",N,N],[17,"MBSTRING_ASC","","",N,N],[17,"MBSTRING_BMP","","",N,N],[17,"MBSTRING_UNIV","","",N,N],[17,"BIO_TYPE_NONE","","",N,N],[17,"BIO_CTRL_EOF","","",N,N],[17,"BIO_CTRL_INFO","","",N,N],[17,"BIO_CTRL_FLUSH","","",N,N],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",N,N],[17,"BIO_FLAGS_READ","","",N,N],[17,"BIO_FLAGS_WRITE","","",N,N],[17,"BIO_FLAGS_IO_SPECIAL","","",N,N],[17,"BIO_FLAGS_RWS","","",N,N],[17,"BIO_FLAGS_SHOULD_RETRY","","",N,N],[17,"CMS_TEXT","","",N,N],[17,"CMS_NOCERTS","","",N,N],[17,"CMS_NO_CONTENT_VERIFY","","",N,N],[17,"CMS_NO_ATTR_VERIFY","","",N,N],[17,"CMS_NOSIGS","","",N,N],[17,"CMS_NOINTERN","","",N,N],[17,"CMS_NO_SIGNER_CERT_VERIFY","","",N,N],[17,"CMS_NOVERIFY","","",N,N],[17,"CMS_DETACHED","","",N,N],[17,"CMS_BINARY","","",N,N],[17,"CMS_NOATTR","","",N,N],[17,"CMS_NOSMIMECAP","","",N,N],[17,"CMS_NOOLDMIMETYPE","","",N,N],[17,"CMS_CRLFEOL","","",N,N],[17,"CMS_STREAM","","",N,N],[17,"CMS_NOCRL","","",N,N],[17,"CMS_PARTIAL","","",N,N],[17,"CMS_REUSE_DIGEST","","",N,N],[17,"CMS_USE_KEYID","","",N,N],[17,"CMS_DEBUG_DECRYPT","","",N,N],[17,"CRYPTO_LOCK_X509","","",N,N],[17,"CRYPTO_LOCK_SSL_CTX","","",N,N],[17,"CRYPTO_LOCK_SSL_SESSION","","",N,N],[17,"SSLEAY_VERSION","","",N,N],[17,"SSLEAY_CFLAGS","","",N,N],[17,"SSLEAY_BUILT_ON","","",N,N],[17,"SSLEAY_PLATFORM","","",N,N],[17,"SSLEAY_DIR","","",N,N],[17,"CRYPTO_LOCK","","",N,N],[17,"DTLS1_COOKIE_LENGTH","","",N,N],[17,"OPENSSL_EC_NAMED_CURVE","","",N,N],[17,"ERR_TXT_MALLOCED","","",N,N],[17,"ERR_TXT_STRING","","",N,N],[17,"ERR_LIB_PEM","","",N,N],[17,"EVP_MAX_MD_SIZE","","",N,N],[17,"PKCS5_SALT_LEN","","",N,N],[17,"PKCS12_DEFAULT_ITER","","",N,N],[17,"EVP_PKEY_RSA","","",N,N],[17,"EVP_PKEY_DSA","","",N,N],[17,"EVP_PKEY_DH","","",N,N],[17,"EVP_PKEY_EC","","",N,N],[17,"EVP_PKEY_HMAC","","",N,N],[17,"EVP_PKEY_CMAC","","",N,N],[17,"EVP_CTRL_GCM_SET_IVLEN","","",N,N],[17,"EVP_CTRL_GCM_GET_TAG","","",N,N],[17,"EVP_CTRL_GCM_SET_TAG","","",N,N],[17,"EVP_PKEY_OP_KEYGEN","","",N,N],[17,"EVP_PKEY_OP_SIGN","","",N,N],[17,"EVP_PKEY_OP_VERIFY","","",N,N],[17,"EVP_PKEY_OP_VERIFYRECOVER","","",N,N],[17,"EVP_PKEY_OP_SIGNCTX","","",N,N],[17,"EVP_PKEY_OP_VERIFYCTX","","",N,N],[17,"EVP_PKEY_OP_ENCRYPT","","",N,N],[17,"EVP_PKEY_OP_DECRYPT","","",N,N],[17,"EVP_PKEY_OP_TYPE_SIG","","",N,N],[17,"EVP_PKEY_OP_TYPE_CRYPT","","",N,N],[17,"EVP_PKEY_CTRL_SET_MAC_KEY","","",N,N],[17,"EVP_PKEY_CTRL_CIPHER","","",N,N],[17,"EVP_PKEY_ALG_CTRL","","",N,N],[17,"NID_undef","","",N,N],[17,"NID_itu_t","","",N,N],[17,"NID_ccitt","","",N,N],[17,"NID_iso","","",N,N],[17,"NID_joint_iso_itu_t","","",N,N],[17,"NID_joint_iso_ccitt","","",N,N],[17,"NID_member_body","","",N,N],[17,"NID_identified_organization","","",N,N],[17,"NID_hmac_md5","","",N,N],[17,"NID_hmac_sha1","","",N,N],[17,"NID_certicom_arc","","",N,N],[17,"NID_international_organizations","","",N,N],[17,"NID_wap","","",N,N],[17,"NID_wap_wsg","","",N,N],[17,"NID_selected_attribute_types","","",N,N],[17,"NID_clearance","","",N,N],[17,"NID_ISO_US","","",N,N],[17,"NID_X9_57","","",N,N],[17,"NID_X9cm","","",N,N],[17,"NID_dsa","","",N,N],[17,"NID_dsaWithSHA1","","",N,N],[17,"NID_ansi_X9_62","","",N,N],[17,"NID_X9_62_prime_field","","",N,N],[17,"NID_X9_62_characteristic_two_field","","",N,N],[17,"NID_X9_62_id_characteristic_two_basis","","",N,N],[17,"NID_X9_62_onBasis","","",N,N],[17,"NID_X9_62_tpBasis","","",N,N],[17,"NID_X9_62_ppBasis","","",N,N],[17,"NID_X9_62_id_ecPublicKey","","",N,N],[17,"NID_X9_62_c2pnb163v1","","",N,N],[17,"NID_X9_62_c2pnb163v2","","",N,N],[17,"NID_X9_62_c2pnb163v3","","",N,N],[17,"NID_X9_62_c2pnb176v1","","",N,N],[17,"NID_X9_62_c2tnb191v1","","",N,N],[17,"NID_X9_62_c2tnb191v2","","",N,N],[17,"NID_X9_62_c2tnb191v3","","",N,N],[17,"NID_X9_62_c2onb191v4","","",N,N],[17,"NID_X9_62_c2onb191v5","","",N,N],[17,"NID_X9_62_c2pnb208w1","","",N,N],[17,"NID_X9_62_c2tnb239v1","","",N,N],[17,"NID_X9_62_c2tnb239v2","","",N,N],[17,"NID_X9_62_c2tnb239v3","","",N,N],[17,"NID_X9_62_c2onb239v4","","",N,N],[17,"NID_X9_62_c2onb239v5","","",N,N],[17,"NID_X9_62_c2pnb272w1","","",N,N],[17,"NID_X9_62_c2pnb304w1","","",N,N],[17,"NID_X9_62_c2tnb359v1","","",N,N],[17,"NID_X9_62_c2pnb368w1","","",N,N],[17,"NID_X9_62_c2tnb431r1","","",N,N],[17,"NID_X9_62_prime192v1","","",N,N],[17,"NID_X9_62_prime192v2","","",N,N],[17,"NID_X9_62_prime192v3","","",N,N],[17,"NID_X9_62_prime239v1","","",N,N],[17,"NID_X9_62_prime239v2","","",N,N],[17,"NID_X9_62_prime239v3","","",N,N],[17,"NID_X9_62_prime256v1","","",N,N],[17,"NID_ecdsa_with_SHA1","","",N,N],[17,"NID_ecdsa_with_Recommended","","",N,N],[17,"NID_ecdsa_with_Specified","","",N,N],[17,"NID_ecdsa_with_SHA224","","",N,N],[17,"NID_ecdsa_with_SHA256","","",N,N],[17,"NID_ecdsa_with_SHA384","","",N,N],[17,"NID_ecdsa_with_SHA512","","",N,N],[17,"NID_secp112r1","","",N,N],[17,"NID_secp112r2","","",N,N],[17,"NID_secp128r1","","",N,N],[17,"NID_secp128r2","","",N,N],[17,"NID_secp160k1","","",N,N],[17,"NID_secp160r1","","",N,N],[17,"NID_secp160r2","","",N,N],[17,"NID_secp192k1","","",N,N],[17,"NID_secp224k1","","",N,N],[17,"NID_secp224r1","","",N,N],[17,"NID_secp256k1","","",N,N],[17,"NID_secp384r1","","",N,N],[17,"NID_secp521r1","","",N,N],[17,"NID_sect113r1","","",N,N],[17,"NID_sect113r2","","",N,N],[17,"NID_sect131r1","","",N,N],[17,"NID_sect131r2","","",N,N],[17,"NID_sect163k1","","",N,N],[17,"NID_sect163r1","","",N,N],[17,"NID_sect163r2","","",N,N],[17,"NID_sect193r1","","",N,N],[17,"NID_sect193r2","","",N,N],[17,"NID_sect233k1","","",N,N],[17,"NID_sect233r1","","",N,N],[17,"NID_sect239k1","","",N,N],[17,"NID_sect283k1","","",N,N],[17,"NID_sect283r1","","",N,N],[17,"NID_sect409k1","","",N,N],[17,"NID_sect409r1","","",N,N],[17,"NID_sect571k1","","",N,N],[17,"NID_sect571r1","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls1","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls3","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls4","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls5","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls6","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls7","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls8","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls9","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls10","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls11","","",N,N],[17,"NID_wap_wsg_idm_ecid_wtls12","","",N,N],[17,"NID_cast5_cbc","","",N,N],[17,"NID_cast5_ecb","","",N,N],[17,"NID_cast5_cfb64","","",N,N],[17,"NID_cast5_ofb64","","",N,N],[17,"NID_pbeWithMD5AndCast5_CBC","","",N,N],[17,"NID_id_PasswordBasedMAC","","",N,N],[17,"NID_id_DHBasedMac","","",N,N],[17,"NID_rsadsi","","",N,N],[17,"NID_pkcs","","",N,N],[17,"NID_pkcs1","","",N,N],[17,"NID_rsaEncryption","","",N,N],[17,"NID_md2WithRSAEncryption","","",N,N],[17,"NID_md4WithRSAEncryption","","",N,N],[17,"NID_md5WithRSAEncryption","","",N,N],[17,"NID_sha1WithRSAEncryption","","",N,N],[17,"NID_rsaesOaep","","",N,N],[17,"NID_mgf1","","",N,N],[17,"NID_rsassaPss","","",N,N],[17,"NID_sha256WithRSAEncryption","","",N,N],[17,"NID_sha384WithRSAEncryption","","",N,N],[17,"NID_sha512WithRSAEncryption","","",N,N],[17,"NID_sha224WithRSAEncryption","","",N,N],[17,"NID_pkcs3","","",N,N],[17,"NID_dhKeyAgreement","","",N,N],[17,"NID_pkcs5","","",N,N],[17,"NID_pbeWithMD2AndDES_CBC","","",N,N],[17,"NID_pbeWithMD5AndDES_CBC","","",N,N],[17,"NID_pbeWithMD2AndRC2_CBC","","",N,N],[17,"NID_pbeWithMD5AndRC2_CBC","","",N,N],[17,"NID_pbeWithSHA1AndDES_CBC","","",N,N],[17,"NID_pbeWithSHA1AndRC2_CBC","","",N,N],[17,"NID_id_pbkdf2","","",N,N],[17,"NID_pbes2","","",N,N],[17,"NID_pbmac1","","",N,N],[17,"NID_pkcs7","","",N,N],[17,"NID_pkcs7_data","","",N,N],[17,"NID_pkcs7_signed","","",N,N],[17,"NID_pkcs7_enveloped","","",N,N],[17,"NID_pkcs7_signedAndEnveloped","","",N,N],[17,"NID_pkcs7_digest","","",N,N],[17,"NID_pkcs7_encrypted","","",N,N],[17,"NID_pkcs9","","",N,N],[17,"NID_pkcs9_emailAddress","","",N,N],[17,"NID_pkcs9_unstructuredName","","",N,N],[17,"NID_pkcs9_contentType","","",N,N],[17,"NID_pkcs9_messageDigest","","",N,N],[17,"NID_pkcs9_signingTime","","",N,N],[17,"NID_pkcs9_countersignature","","",N,N],[17,"NID_pkcs9_challengePassword","","",N,N],[17,"NID_pkcs9_unstructuredAddress","","",N,N],[17,"NID_pkcs9_extCertAttributes","","",N,N],[17,"NID_ext_req","","",N,N],[17,"NID_SMIMECapabilities","","",N,N],[17,"NID_SMIME","","",N,N],[17,"NID_id_smime_mod","","",N,N],[17,"NID_id_smime_ct","","",N,N],[17,"NID_id_smime_aa","","",N,N],[17,"NID_id_smime_alg","","",N,N],[17,"NID_id_smime_cd","","",N,N],[17,"NID_id_smime_spq","","",N,N],[17,"NID_id_smime_cti","","",N,N],[17,"NID_id_smime_mod_cms","","",N,N],[17,"NID_id_smime_mod_ess","","",N,N],[17,"NID_id_smime_mod_oid","","",N,N],[17,"NID_id_smime_mod_msg_v3","","",N,N],[17,"NID_id_smime_mod_ets_eSignature_88","","",N,N],[17,"NID_id_smime_mod_ets_eSignature_97","","",N,N],[17,"NID_id_smime_mod_ets_eSigPolicy_88","","",N,N],[17,"NID_id_smime_mod_ets_eSigPolicy_97","","",N,N],[17,"NID_id_smime_ct_receipt","","",N,N],[17,"NID_id_smime_ct_authData","","",N,N],[17,"NID_id_smime_ct_publishCert","","",N,N],[17,"NID_id_smime_ct_TSTInfo","","",N,N],[17,"NID_id_smime_ct_TDTInfo","","",N,N],[17,"NID_id_smime_ct_contentInfo","","",N,N],[17,"NID_id_smime_ct_DVCSRequestData","","",N,N],[17,"NID_id_smime_ct_DVCSResponseData","","",N,N],[17,"NID_id_smime_ct_compressedData","","",N,N],[17,"NID_id_ct_asciiTextWithCRLF","","",N,N],[17,"NID_id_smime_aa_receiptRequest","","",N,N],[17,"NID_id_smime_aa_securityLabel","","",N,N],[17,"NID_id_smime_aa_mlExpandHistory","","",N,N],[17,"NID_id_smime_aa_contentHint","","",N,N],[17,"NID_id_smime_aa_msgSigDigest","","",N,N],[17,"NID_id_smime_aa_encapContentType","","",N,N],[17,"NID_id_smime_aa_contentIdentifier","","",N,N],[17,"NID_id_smime_aa_macValue","","",N,N],[17,"NID_id_smime_aa_equivalentLabels","","",N,N],[17,"NID_id_smime_aa_contentReference","","",N,N],[17,"NID_id_smime_aa_encrypKeyPref","","",N,N],[17,"NID_id_smime_aa_signingCertificate","","",N,N],[17,"NID_id_smime_aa_smimeEncryptCerts","","",N,N],[17,"NID_id_smime_aa_timeStampToken","","",N,N],[17,"NID_id_smime_aa_ets_sigPolicyId","","",N,N],[17,"NID_id_smime_aa_ets_commitmentType","","",N,N],[17,"NID_id_smime_aa_ets_signerLocation","","",N,N],[17,"NID_id_smime_aa_ets_signerAttr","","",N,N],[17,"NID_id_smime_aa_ets_otherSigCert","","",N,N],[17,"NID_id_smime_aa_ets_contentTimestamp","","",N,N],[17,"NID_id_smime_aa_ets_CertificateRefs","","",N,N],[17,"NID_id_smime_aa_ets_RevocationRefs","","",N,N],[17,"NID_id_smime_aa_ets_certValues","","",N,N],[17,"NID_id_smime_aa_ets_revocationValues","","",N,N],[17,"NID_id_smime_aa_ets_escTimeStamp","","",N,N],[17,"NID_id_smime_aa_ets_certCRLTimestamp","","",N,N],[17,"NID_id_smime_aa_ets_archiveTimeStamp","","",N,N],[17,"NID_id_smime_aa_signatureType","","",N,N],[17,"NID_id_smime_aa_dvcs_dvc","","",N,N],[17,"NID_id_smime_alg_ESDHwith3DES","","",N,N],[17,"NID_id_smime_alg_ESDHwithRC2","","",N,N],[17,"NID_id_smime_alg_3DESwrap","","",N,N],[17,"NID_id_smime_alg_RC2wrap","","",N,N],[17,"NID_id_smime_alg_ESDH","","",N,N],[17,"NID_id_smime_alg_CMS3DESwrap","","",N,N],[17,"NID_id_smime_alg_CMSRC2wrap","","",N,N],[17,"NID_id_alg_PWRI_KEK","","",N,N],[17,"NID_id_smime_cd_ldap","","",N,N],[17,"NID_id_smime_spq_ets_sqt_uri","","",N,N],[17,"NID_id_smime_spq_ets_sqt_unotice","","",N,N],[17,"NID_id_smime_cti_ets_proofOfOrigin","","",N,N],[17,"NID_id_smime_cti_ets_proofOfReceipt","","",N,N],[17,"NID_id_smime_cti_ets_proofOfDelivery","","",N,N],[17,"NID_id_smime_cti_ets_proofOfSender","","",N,N],[17,"NID_id_smime_cti_ets_proofOfApproval","","",N,N],[17,"NID_id_smime_cti_ets_proofOfCreation","","",N,N],[17,"NID_friendlyName","","",N,N],[17,"NID_localKeyID","","",N,N],[17,"NID_ms_csp_name","","",N,N],[17,"NID_LocalKeySet","","",N,N],[17,"NID_x509Certificate","","",N,N],[17,"NID_sdsiCertificate","","",N,N],[17,"NID_x509Crl","","",N,N],[17,"NID_pbe_WithSHA1And128BitRC4","","",N,N],[17,"NID_pbe_WithSHA1And40BitRC4","","",N,N],[17,"NID_pbe_WithSHA1And3_Key_TripleDES_CBC","","",N,N],[17,"NID_pbe_WithSHA1And2_Key_TripleDES_CBC","","",N,N],[17,"NID_pbe_WithSHA1And128BitRC2_CBC","","",N,N],[17,"NID_pbe_WithSHA1And40BitRC2_CBC","","",N,N],[17,"NID_keyBag","","",N,N],[17,"NID_pkcs8ShroudedKeyBag","","",N,N],[17,"NID_certBag","","",N,N],[17,"NID_crlBag","","",N,N],[17,"NID_secretBag","","",N,N],[17,"NID_safeContentsBag","","",N,N],[17,"NID_md2","","",N,N],[17,"NID_md4","","",N,N],[17,"NID_md5","","",N,N],[17,"NID_md5_sha1","","",N,N],[17,"NID_hmacWithMD5","","",N,N],[17,"NID_hmacWithSHA1","","",N,N],[17,"NID_hmacWithSHA224","","",N,N],[17,"NID_hmacWithSHA256","","",N,N],[17,"NID_hmacWithSHA384","","",N,N],[17,"NID_hmacWithSHA512","","",N,N],[17,"NID_rc2_cbc","","",N,N],[17,"NID_rc2_ecb","","",N,N],[17,"NID_rc2_cfb64","","",N,N],[17,"NID_rc2_ofb64","","",N,N],[17,"NID_rc2_40_cbc","","",N,N],[17,"NID_rc2_64_cbc","","",N,N],[17,"NID_rc4","","",N,N],[17,"NID_rc4_40","","",N,N],[17,"NID_des_ede3_cbc","","",N,N],[17,"NID_rc5_cbc","","",N,N],[17,"NID_rc5_ecb","","",N,N],[17,"NID_rc5_cfb64","","",N,N],[17,"NID_rc5_ofb64","","",N,N],[17,"NID_ms_ext_req","","",N,N],[17,"NID_ms_code_ind","","",N,N],[17,"NID_ms_code_com","","",N,N],[17,"NID_ms_ctl_sign","","",N,N],[17,"NID_ms_sgc","","",N,N],[17,"NID_ms_efs","","",N,N],[17,"NID_ms_smartcard_login","","",N,N],[17,"NID_ms_upn","","",N,N],[17,"NID_idea_cbc","","",N,N],[17,"NID_idea_ecb","","",N,N],[17,"NID_idea_cfb64","","",N,N],[17,"NID_idea_ofb64","","",N,N],[17,"NID_bf_cbc","","",N,N],[17,"NID_bf_ecb","","",N,N],[17,"NID_bf_cfb64","","",N,N],[17,"NID_bf_ofb64","","",N,N],[17,"NID_id_pkix","","",N,N],[17,"NID_id_pkix_mod","","",N,N],[17,"NID_id_pe","","",N,N],[17,"NID_id_qt","","",N,N],[17,"NID_id_kp","","",N,N],[17,"NID_id_it","","",N,N],[17,"NID_id_pkip","","",N,N],[17,"NID_id_alg","","",N,N],[17,"NID_id_cmc","","",N,N],[17,"NID_id_on","","",N,N],[17,"NID_id_pda","","",N,N],[17,"NID_id_aca","","",N,N],[17,"NID_id_qcs","","",N,N],[17,"NID_id_cct","","",N,N],[17,"NID_id_ppl","","",N,N],[17,"NID_id_ad","","",N,N],[17,"NID_id_pkix1_explicit_88","","",N,N],[17,"NID_id_pkix1_implicit_88","","",N,N],[17,"NID_id_pkix1_explicit_93","","",N,N],[17,"NID_id_pkix1_implicit_93","","",N,N],[17,"NID_id_mod_crmf","","",N,N],[17,"NID_id_mod_cmc","","",N,N],[17,"NID_id_mod_kea_profile_88","","",N,N],[17,"NID_id_mod_kea_profile_93","","",N,N],[17,"NID_id_mod_cmp","","",N,N],[17,"NID_id_mod_qualified_cert_88","","",N,N],[17,"NID_id_mod_qualified_cert_93","","",N,N],[17,"NID_id_mod_attribute_cert","","",N,N],[17,"NID_id_mod_timestamp_protocol","","",N,N],[17,"NID_id_mod_ocsp","","",N,N],[17,"NID_id_mod_dvcs","","",N,N],[17,"NID_id_mod_cmp2000","","",N,N],[17,"NID_info_access","","",N,N],[17,"NID_biometricInfo","","",N,N],[17,"NID_qcStatements","","",N,N],[17,"NID_ac_auditEntity","","",N,N],[17,"NID_ac_targeting","","",N,N],[17,"NID_aaControls","","",N,N],[17,"NID_sbgp_ipAddrBlock","","",N,N],[17,"NID_sbgp_autonomousSysNum","","",N,N],[17,"NID_sbgp_routerIdentifier","","",N,N],[17,"NID_ac_proxying","","",N,N],[17,"NID_sinfo_access","","",N,N],[17,"NID_proxyCertInfo","","",N,N],[17,"NID_id_qt_cps","","",N,N],[17,"NID_id_qt_unotice","","",N,N],[17,"NID_textNotice","","",N,N],[17,"NID_server_auth","","",N,N],[17,"NID_client_auth","","",N,N],[17,"NID_code_sign","","",N,N],[17,"NID_email_protect","","",N,N],[17,"NID_ipsecEndSystem","","",N,N],[17,"NID_ipsecTunnel","","",N,N],[17,"NID_ipsecUser","","",N,N],[17,"NID_time_stamp","","",N,N],[17,"NID_OCSP_sign","","",N,N],[17,"NID_dvcs","","",N,N],[17,"NID_id_it_caProtEncCert","","",N,N],[17,"NID_id_it_signKeyPairTypes","","",N,N],[17,"NID_id_it_encKeyPairTypes","","",N,N],[17,"NID_id_it_preferredSymmAlg","","",N,N],[17,"NID_id_it_caKeyUpdateInfo","","",N,N],[17,"NID_id_it_currentCRL","","",N,N],[17,"NID_id_it_unsupportedOIDs","","",N,N],[17,"NID_id_it_subscriptionRequest","","",N,N],[17,"NID_id_it_subscriptionResponse","","",N,N],[17,"NID_id_it_keyPairParamReq","","",N,N],[17,"NID_id_it_keyPairParamRep","","",N,N],[17,"NID_id_it_revPassphrase","","",N,N],[17,"NID_id_it_implicitConfirm","","",N,N],[17,"NID_id_it_confirmWaitTime","","",N,N],[17,"NID_id_it_origPKIMessage","","",N,N],[17,"NID_id_it_suppLangTags","","",N,N],[17,"NID_id_regCtrl","","",N,N],[17,"NID_id_regInfo","","",N,N],[17,"NID_id_regCtrl_regToken","","",N,N],[17,"NID_id_regCtrl_authenticator","","",N,N],[17,"NID_id_regCtrl_pkiPublicationInfo","","",N,N],[17,"NID_id_regCtrl_pkiArchiveOptions","","",N,N],[17,"NID_id_regCtrl_oldCertID","","",N,N],[17,"NID_id_regCtrl_protocolEncrKey","","",N,N],[17,"NID_id_regInfo_utf8Pairs","","",N,N],[17,"NID_id_regInfo_certReq","","",N,N],[17,"NID_id_alg_des40","","",N,N],[17,"NID_id_alg_noSignature","","",N,N],[17,"NID_id_alg_dh_sig_hmac_sha1","","",N,N],[17,"NID_id_alg_dh_pop","","",N,N],[17,"NID_id_cmc_statusInfo","","",N,N],[17,"NID_id_cmc_identification","","",N,N],[17,"NID_id_cmc_identityProof","","",N,N],[17,"NID_id_cmc_dataReturn","","",N,N],[17,"NID_id_cmc_transactionId","","",N,N],[17,"NID_id_cmc_senderNonce","","",N,N],[17,"NID_id_cmc_recipientNonce","","",N,N],[17,"NID_id_cmc_addExtensions","","",N,N],[17,"NID_id_cmc_encryptedPOP","","",N,N],[17,"NID_id_cmc_decryptedPOP","","",N,N],[17,"NID_id_cmc_lraPOPWitness","","",N,N],[17,"NID_id_cmc_getCert","","",N,N],[17,"NID_id_cmc_getCRL","","",N,N],[17,"NID_id_cmc_revokeRequest","","",N,N],[17,"NID_id_cmc_regInfo","","",N,N],[17,"NID_id_cmc_responseInfo","","",N,N],[17,"NID_id_cmc_queryPending","","",N,N],[17,"NID_id_cmc_popLinkRandom","","",N,N],[17,"NID_id_cmc_popLinkWitness","","",N,N],[17,"NID_id_cmc_confirmCertAcceptance","","",N,N],[17,"NID_id_on_personalData","","",N,N],[17,"NID_id_on_permanentIdentifier","","",N,N],[17,"NID_id_pda_dateOfBirth","","",N,N],[17,"NID_id_pda_placeOfBirth","","",N,N],[17,"NID_id_pda_gender","","",N,N],[17,"NID_id_pda_countryOfCitizenship","","",N,N],[17,"NID_id_pda_countryOfResidence","","",N,N],[17,"NID_id_aca_authenticationInfo","","",N,N],[17,"NID_id_aca_accessIdentity","","",N,N],[17,"NID_id_aca_chargingIdentity","","",N,N],[17,"NID_id_aca_group","","",N,N],[17,"NID_id_aca_role","","",N,N],[17,"NID_id_aca_encAttrs","","",N,N],[17,"NID_id_qcs_pkixQCSyntax_v1","","",N,N],[17,"NID_id_cct_crs","","",N,N],[17,"NID_id_cct_PKIData","","",N,N],[17,"NID_id_cct_PKIResponse","","",N,N],[17,"NID_id_ppl_anyLanguage","","",N,N],[17,"NID_id_ppl_inheritAll","","",N,N],[17,"NID_Independent","","",N,N],[17,"NID_ad_OCSP","","",N,N],[17,"NID_ad_ca_issuers","","",N,N],[17,"NID_ad_timeStamping","","",N,N],[17,"NID_ad_dvcs","","",N,N],[17,"NID_caRepository","","",N,N],[17,"NID_id_pkix_OCSP_basic","","",N,N],[17,"NID_id_pkix_OCSP_Nonce","","",N,N],[17,"NID_id_pkix_OCSP_CrlID","","",N,N],[17,"NID_id_pkix_OCSP_acceptableResponses","","",N,N],[17,"NID_id_pkix_OCSP_noCheck","","",N,N],[17,"NID_id_pkix_OCSP_archiveCutoff","","",N,N],[17,"NID_id_pkix_OCSP_serviceLocator","","",N,N],[17,"NID_id_pkix_OCSP_extendedStatus","","",N,N],[17,"NID_id_pkix_OCSP_valid","","",N,N],[17,"NID_id_pkix_OCSP_path","","",N,N],[17,"NID_id_pkix_OCSP_trustRoot","","",N,N],[17,"NID_algorithm","","",N,N],[17,"NID_md5WithRSA","","",N,N],[17,"NID_des_ecb","","",N,N],[17,"NID_des_cbc","","",N,N],[17,"NID_des_ofb64","","",N,N],[17,"NID_des_cfb64","","",N,N],[17,"NID_rsaSignature","","",N,N],[17,"NID_dsa_2","","",N,N],[17,"NID_dsaWithSHA","","",N,N],[17,"NID_shaWithRSAEncryption","","",N,N],[17,"NID_des_ede_ecb","","",N,N],[17,"NID_des_ede3_ecb","","",N,N],[17,"NID_des_ede_cbc","","",N,N],[17,"NID_des_ede_cfb64","","",N,N],[17,"NID_des_ede3_cfb64","","",N,N],[17,"NID_des_ede_ofb64","","",N,N],[17,"NID_des_ede3_ofb64","","",N,N],[17,"NID_desx_cbc","","",N,N],[17,"NID_sha","","",N,N],[17,"NID_sha1","","",N,N],[17,"NID_dsaWithSHA1_2","","",N,N],[17,"NID_sha1WithRSA","","",N,N],[17,"NID_ripemd160","","",N,N],[17,"NID_ripemd160WithRSA","","",N,N],[17,"NID_sxnet","","",N,N],[17,"NID_X500","","",N,N],[17,"NID_X509","","",N,N],[17,"NID_commonName","","",N,N],[17,"NID_surname","","",N,N],[17,"NID_serialNumber","","",N,N],[17,"NID_countryName","","",N,N],[17,"NID_localityName","","",N,N],[17,"NID_stateOrProvinceName","","",N,N],[17,"NID_streetAddress","","",N,N],[17,"NID_organizationName","","",N,N],[17,"NID_organizationalUnitName","","",N,N],[17,"NID_title","","",N,N],[17,"NID_description","","",N,N],[17,"NID_searchGuide","","",N,N],[17,"NID_businessCategory","","",N,N],[17,"NID_postalAddress","","",N,N],[17,"NID_postalCode","","",N,N],[17,"NID_postOfficeBox","","",N,N],[17,"NID_physicalDeliveryOfficeName","","",N,N],[17,"NID_telephoneNumber","","",N,N],[17,"NID_telexNumber","","",N,N],[17,"NID_teletexTerminalIdentifier","","",N,N],[17,"NID_facsimileTelephoneNumber","","",N,N],[17,"NID_x121Address","","",N,N],[17,"NID_internationaliSDNNumber","","",N,N],[17,"NID_registeredAddress","","",N,N],[17,"NID_destinationIndicator","","",N,N],[17,"NID_preferredDeliveryMethod","","",N,N],[17,"NID_presentationAddress","","",N,N],[17,"NID_supportedApplicationContext","","",N,N],[17,"NID_member","","",N,N],[17,"NID_owner","","",N,N],[17,"NID_roleOccupant","","",N,N],[17,"NID_seeAlso","","",N,N],[17,"NID_userPassword","","",N,N],[17,"NID_userCertificate","","",N,N],[17,"NID_cACertificate","","",N,N],[17,"NID_authorityRevocationList","","",N,N],[17,"NID_certificateRevocationList","","",N,N],[17,"NID_crossCertificatePair","","",N,N],[17,"NID_name","","",N,N],[17,"NID_givenName","","",N,N],[17,"NID_initials","","",N,N],[17,"NID_generationQualifier","","",N,N],[17,"NID_x500UniqueIdentifier","","",N,N],[17,"NID_dnQualifier","","",N,N],[17,"NID_enhancedSearchGuide","","",N,N],[17,"NID_protocolInformation","","",N,N],[17,"NID_distinguishedName","","",N,N],[17,"NID_uniqueMember","","",N,N],[17,"NID_houseIdentifier","","",N,N],[17,"NID_supportedAlgorithms","","",N,N],[17,"NID_deltaRevocationList","","",N,N],[17,"NID_dmdName","","",N,N],[17,"NID_pseudonym","","",N,N],[17,"NID_role","","",N,N],[17,"NID_X500algorithms","","",N,N],[17,"NID_rsa","","",N,N],[17,"NID_mdc2WithRSA","","",N,N],[17,"NID_mdc2","","",N,N],[17,"NID_id_ce","","",N,N],[17,"NID_subject_directory_attributes","","",N,N],[17,"NID_subject_key_identifier","","",N,N],[17,"NID_key_usage","","",N,N],[17,"NID_private_key_usage_period","","",N,N],[17,"NID_subject_alt_name","","",N,N],[17,"NID_issuer_alt_name","","",N,N],[17,"NID_basic_constraints","","",N,N],[17,"NID_crl_number","","",N,N],[17,"NID_crl_reason","","",N,N],[17,"NID_invalidity_date","","",N,N],[17,"NID_delta_crl","","",N,N],[17,"NID_issuing_distribution_point","","",N,N],[17,"NID_certificate_issuer","","",N,N],[17,"NID_name_constraints","","",N,N],[17,"NID_crl_distribution_points","","",N,N],[17,"NID_certificate_policies","","",N,N],[17,"NID_any_policy","","",N,N],[17,"NID_policy_mappings","","",N,N],[17,"NID_authority_key_identifier","","",N,N],[17,"NID_policy_constraints","","",N,N],[17,"NID_ext_key_usage","","",N,N],[17,"NID_freshest_crl","","",N,N],[17,"NID_inhibit_any_policy","","",N,N],[17,"NID_target_information","","",N,N],[17,"NID_no_rev_avail","","",N,N],[17,"NID_anyExtendedKeyUsage","","",N,N],[17,"NID_netscape","","",N,N],[17,"NID_netscape_cert_extension","","",N,N],[17,"NID_netscape_data_type","","",N,N],[17,"NID_netscape_cert_type","","",N,N],[17,"NID_netscape_base_url","","",N,N],[17,"NID_netscape_revocation_url","","",N,N],[17,"NID_netscape_ca_revocation_url","","",N,N],[17,"NID_netscape_renewal_url","","",N,N],[17,"NID_netscape_ca_policy_url","","",N,N],[17,"NID_netscape_ssl_server_name","","",N,N],[17,"NID_netscape_comment","","",N,N],[17,"NID_netscape_cert_sequence","","",N,N],[17,"NID_ns_sgc","","",N,N],[17,"NID_org","","",N,N],[17,"NID_dod","","",N,N],[17,"NID_iana","","",N,N],[17,"NID_Directory","","",N,N],[17,"NID_Management","","",N,N],[17,"NID_Experimental","","",N,N],[17,"NID_Private","","",N,N],[17,"NID_Security","","",N,N],[17,"NID_SNMPv2","","",N,N],[17,"NID_Mail","","",N,N],[17,"NID_Enterprises","","",N,N],[17,"NID_dcObject","","",N,N],[17,"NID_mime_mhs","","",N,N],[17,"NID_mime_mhs_headings","","",N,N],[17,"NID_mime_mhs_bodies","","",N,N],[17,"NID_id_hex_partial_message","","",N,N],[17,"NID_id_hex_multipart_message","","",N,N],[17,"NID_zlib_compression","","",N,N],[17,"NID_aes_128_ecb","","",N,N],[17,"NID_aes_128_cbc","","",N,N],[17,"NID_aes_128_ofb128","","",N,N],[17,"NID_aes_128_cfb128","","",N,N],[17,"NID_id_aes128_wrap","","",N,N],[17,"NID_aes_128_gcm","","",N,N],[17,"NID_aes_128_ccm","","",N,N],[17,"NID_id_aes128_wrap_pad","","",N,N],[17,"NID_aes_192_ecb","","",N,N],[17,"NID_aes_192_cbc","","",N,N],[17,"NID_aes_192_ofb128","","",N,N],[17,"NID_aes_192_cfb128","","",N,N],[17,"NID_id_aes192_wrap","","",N,N],[17,"NID_aes_192_gcm","","",N,N],[17,"NID_aes_192_ccm","","",N,N],[17,"NID_id_aes192_wrap_pad","","",N,N],[17,"NID_aes_256_ecb","","",N,N],[17,"NID_aes_256_cbc","","",N,N],[17,"NID_aes_256_ofb128","","",N,N],[17,"NID_aes_256_cfb128","","",N,N],[17,"NID_id_aes256_wrap","","",N,N],[17,"NID_aes_256_gcm","","",N,N],[17,"NID_aes_256_ccm","","",N,N],[17,"NID_id_aes256_wrap_pad","","",N,N],[17,"NID_aes_128_cfb1","","",N,N],[17,"NID_aes_192_cfb1","","",N,N],[17,"NID_aes_256_cfb1","","",N,N],[17,"NID_aes_128_cfb8","","",N,N],[17,"NID_aes_192_cfb8","","",N,N],[17,"NID_aes_256_cfb8","","",N,N],[17,"NID_aes_128_ctr","","",N,N],[17,"NID_aes_192_ctr","","",N,N],[17,"NID_aes_256_ctr","","",N,N],[17,"NID_aes_128_xts","","",N,N],[17,"NID_aes_256_xts","","",N,N],[17,"NID_des_cfb1","","",N,N],[17,"NID_des_cfb8","","",N,N],[17,"NID_des_ede3_cfb1","","",N,N],[17,"NID_des_ede3_cfb8","","",N,N],[17,"NID_sha256","","",N,N],[17,"NID_sha384","","",N,N],[17,"NID_sha512","","",N,N],[17,"NID_sha224","","",N,N],[17,"NID_dsa_with_SHA224","","",N,N],[17,"NID_dsa_with_SHA256","","",N,N],[17,"NID_hold_instruction_code","","",N,N],[17,"NID_hold_instruction_none","","",N,N],[17,"NID_hold_instruction_call_issuer","","",N,N],[17,"NID_hold_instruction_reject","","",N,N],[17,"NID_data","","",N,N],[17,"NID_pss","","",N,N],[17,"NID_ucl","","",N,N],[17,"NID_pilot","","",N,N],[17,"NID_pilotAttributeType","","",N,N],[17,"NID_pilotAttributeSyntax","","",N,N],[17,"NID_pilotObjectClass","","",N,N],[17,"NID_pilotGroups","","",N,N],[17,"NID_iA5StringSyntax","","",N,N],[17,"NID_caseIgnoreIA5StringSyntax","","",N,N],[17,"NID_pilotObject","","",N,N],[17,"NID_pilotPerson","","",N,N],[17,"NID_account","","",N,N],[17,"NID_document","","",N,N],[17,"NID_room","","",N,N],[17,"NID_documentSeries","","",N,N],[17,"NID_Domain","","",N,N],[17,"NID_rFC822localPart","","",N,N],[17,"NID_dNSDomain","","",N,N],[17,"NID_domainRelatedObject","","",N,N],[17,"NID_friendlyCountry","","",N,N],[17,"NID_simpleSecurityObject","","",N,N],[17,"NID_pilotOrganization","","",N,N],[17,"NID_pilotDSA","","",N,N],[17,"NID_qualityLabelledData","","",N,N],[17,"NID_userId","","",N,N],[17,"NID_textEncodedORAddress","","",N,N],[17,"NID_rfc822Mailbox","","",N,N],[17,"NID_info","","",N,N],[17,"NID_favouriteDrink","","",N,N],[17,"NID_roomNumber","","",N,N],[17,"NID_photo","","",N,N],[17,"NID_userClass","","",N,N],[17,"NID_host","","",N,N],[17,"NID_manager","","",N,N],[17,"NID_documentIdentifier","","",N,N],[17,"NID_documentTitle","","",N,N],[17,"NID_documentVersion","","",N,N],[17,"NID_documentAuthor","","",N,N],[17,"NID_documentLocation","","",N,N],[17,"NID_homeTelephoneNumber","","",N,N],[17,"NID_secretary","","",N,N],[17,"NID_otherMailbox","","",N,N],[17,"NID_lastModifiedTime","","",N,N],[17,"NID_lastModifiedBy","","",N,N],[17,"NID_domainComponent","","",N,N],[17,"NID_aRecord","","",N,N],[17,"NID_pilotAttributeType27","","",N,N],[17,"NID_mXRecord","","",N,N],[17,"NID_nSRecord","","",N,N],[17,"NID_sOARecord","","",N,N],[17,"NID_cNAMERecord","","",N,N],[17,"NID_associatedDomain","","",N,N],[17,"NID_associatedName","","",N,N],[17,"NID_homePostalAddress","","",N,N],[17,"NID_personalTitle","","",N,N],[17,"NID_mobileTelephoneNumber","","",N,N],[17,"NID_pagerTelephoneNumber","","",N,N],[17,"NID_friendlyCountryName","","",N,N],[17,"NID_organizationalStatus","","",N,N],[17,"NID_janetMailbox","","",N,N],[17,"NID_mailPreferenceOption","","",N,N],[17,"NID_buildingName","","",N,N],[17,"NID_dSAQuality","","",N,N],[17,"NID_singleLevelQuality","","",N,N],[17,"NID_subtreeMinimumQuality","","",N,N],[17,"NID_subtreeMaximumQuality","","",N,N],[17,"NID_personalSignature","","",N,N],[17,"NID_dITRedirect","","",N,N],[17,"NID_audio","","",N,N],[17,"NID_documentPublisher","","",N,N],[17,"NID_id_set","","",N,N],[17,"NID_set_ctype","","",N,N],[17,"NID_set_msgExt","","",N,N],[17,"NID_set_attr","","",N,N],[17,"NID_set_policy","","",N,N],[17,"NID_set_certExt","","",N,N],[17,"NID_set_brand","","",N,N],[17,"NID_setct_PANData","","",N,N],[17,"NID_setct_PANToken","","",N,N],[17,"NID_setct_PANOnly","","",N,N],[17,"NID_setct_OIData","","",N,N],[17,"NID_setct_PI","","",N,N],[17,"NID_setct_PIData","","",N,N],[17,"NID_setct_PIDataUnsigned","","",N,N],[17,"NID_setct_HODInput","","",N,N],[17,"NID_setct_AuthResBaggage","","",N,N],[17,"NID_setct_AuthRevReqBaggage","","",N,N],[17,"NID_setct_AuthRevResBaggage","","",N,N],[17,"NID_setct_CapTokenSeq","","",N,N],[17,"NID_setct_PInitResData","","",N,N],[17,"NID_setct_PI_TBS","","",N,N],[17,"NID_setct_PResData","","",N,N],[17,"NID_setct_AuthReqTBS","","",N,N],[17,"NID_setct_AuthResTBS","","",N,N],[17,"NID_setct_AuthResTBSX","","",N,N],[17,"NID_setct_AuthTokenTBS","","",N,N],[17,"NID_setct_CapTokenData","","",N,N],[17,"NID_setct_CapTokenTBS","","",N,N],[17,"NID_setct_AcqCardCodeMsg","","",N,N],[17,"NID_setct_AuthRevReqTBS","","",N,N],[17,"NID_setct_AuthRevResData","","",N,N],[17,"NID_setct_AuthRevResTBS","","",N,N],[17,"NID_setct_CapReqTBS","","",N,N],[17,"NID_setct_CapReqTBSX","","",N,N],[17,"NID_setct_CapResData","","",N,N],[17,"NID_setct_CapRevReqTBS","","",N,N],[17,"NID_setct_CapRevReqTBSX","","",N,N],[17,"NID_setct_CapRevResData","","",N,N],[17,"NID_setct_CredReqTBS","","",N,N],[17,"NID_setct_CredReqTBSX","","",N,N],[17,"NID_setct_CredResData","","",N,N],[17,"NID_setct_CredRevReqTBS","","",N,N],[17,"NID_setct_CredRevReqTBSX","","",N,N],[17,"NID_setct_CredRevResData","","",N,N],[17,"NID_setct_PCertReqData","","",N,N],[17,"NID_setct_PCertResTBS","","",N,N],[17,"NID_setct_BatchAdminReqData","","",N,N],[17,"NID_setct_BatchAdminResData","","",N,N],[17,"NID_setct_CardCInitResTBS","","",N,N],[17,"NID_setct_MeAqCInitResTBS","","",N,N],[17,"NID_setct_RegFormResTBS","","",N,N],[17,"NID_setct_CertReqData","","",N,N],[17,"NID_setct_CertReqTBS","","",N,N],[17,"NID_setct_CertResData","","",N,N],[17,"NID_setct_CertInqReqTBS","","",N,N],[17,"NID_setct_ErrorTBS","","",N,N],[17,"NID_setct_PIDualSignedTBE","","",N,N],[17,"NID_setct_PIUnsignedTBE","","",N,N],[17,"NID_setct_AuthReqTBE","","",N,N],[17,"NID_setct_AuthResTBE","","",N,N],[17,"NID_setct_AuthResTBEX","","",N,N],[17,"NID_setct_AuthTokenTBE","","",N,N],[17,"NID_setct_CapTokenTBE","","",N,N],[17,"NID_setct_CapTokenTBEX","","",N,N],[17,"NID_setct_AcqCardCodeMsgTBE","","",N,N],[17,"NID_setct_AuthRevReqTBE","","",N,N],[17,"NID_setct_AuthRevResTBE","","",N,N],[17,"NID_setct_AuthRevResTBEB","","",N,N],[17,"NID_setct_CapReqTBE","","",N,N],[17,"NID_setct_CapReqTBEX","","",N,N],[17,"NID_setct_CapResTBE","","",N,N],[17,"NID_setct_CapRevReqTBE","","",N,N],[17,"NID_setct_CapRevReqTBEX","","",N,N],[17,"NID_setct_CapRevResTBE","","",N,N],[17,"NID_setct_CredReqTBE","","",N,N],[17,"NID_setct_CredReqTBEX","","",N,N],[17,"NID_setct_CredResTBE","","",N,N],[17,"NID_setct_CredRevReqTBE","","",N,N],[17,"NID_setct_CredRevReqTBEX","","",N,N],[17,"NID_setct_CredRevResTBE","","",N,N],[17,"NID_setct_BatchAdminReqTBE","","",N,N],[17,"NID_setct_BatchAdminResTBE","","",N,N],[17,"NID_setct_RegFormReqTBE","","",N,N],[17,"NID_setct_CertReqTBE","","",N,N],[17,"NID_setct_CertReqTBEX","","",N,N],[17,"NID_setct_CertResTBE","","",N,N],[17,"NID_setct_CRLNotificationTBS","","",N,N],[17,"NID_setct_CRLNotificationResTBS","","",N,N],[17,"NID_setct_BCIDistributionTBS","","",N,N],[17,"NID_setext_genCrypt","","",N,N],[17,"NID_setext_miAuth","","",N,N],[17,"NID_setext_pinSecure","","",N,N],[17,"NID_setext_pinAny","","",N,N],[17,"NID_setext_track2","","",N,N],[17,"NID_setext_cv","","",N,N],[17,"NID_set_policy_root","","",N,N],[17,"NID_setCext_hashedRoot","","",N,N],[17,"NID_setCext_certType","","",N,N],[17,"NID_setCext_merchData","","",N,N],[17,"NID_setCext_cCertRequired","","",N,N],[17,"NID_setCext_tunneling","","",N,N],[17,"NID_setCext_setExt","","",N,N],[17,"NID_setCext_setQualf","","",N,N],[17,"NID_setCext_PGWYcapabilities","","",N,N],[17,"NID_setCext_TokenIdentifier","","",N,N],[17,"NID_setCext_Track2Data","","",N,N],[17,"NID_setCext_TokenType","","",N,N],[17,"NID_setCext_IssuerCapabilities","","",N,N],[17,"NID_setAttr_Cert","","",N,N],[17,"NID_setAttr_PGWYcap","","",N,N],[17,"NID_setAttr_TokenType","","",N,N],[17,"NID_setAttr_IssCap","","",N,N],[17,"NID_set_rootKeyThumb","","",N,N],[17,"NID_set_addPolicy","","",N,N],[17,"NID_setAttr_Token_EMV","","",N,N],[17,"NID_setAttr_Token_B0Prime","","",N,N],[17,"NID_setAttr_IssCap_CVM","","",N,N],[17,"NID_setAttr_IssCap_T2","","",N,N],[17,"NID_setAttr_IssCap_Sig","","",N,N],[17,"NID_setAttr_GenCryptgrm","","",N,N],[17,"NID_setAttr_T2Enc","","",N,N],[17,"NID_setAttr_T2cleartxt","","",N,N],[17,"NID_setAttr_TokICCsig","","",N,N],[17,"NID_setAttr_SecDevSig","","",N,N],[17,"NID_set_brand_IATA_ATA","","",N,N],[17,"NID_set_brand_Diners","","",N,N],[17,"NID_set_brand_AmericanExpress","","",N,N],[17,"NID_set_brand_JCB","","",N,N],[17,"NID_set_brand_Visa","","",N,N],[17,"NID_set_brand_MasterCard","","",N,N],[17,"NID_set_brand_Novus","","",N,N],[17,"NID_des_cdmf","","",N,N],[17,"NID_rsaOAEPEncryptionSET","","",N,N],[17,"NID_ipsec3","","",N,N],[17,"NID_ipsec4","","",N,N],[17,"NID_whirlpool","","",N,N],[17,"NID_cryptopro","","",N,N],[17,"NID_cryptocom","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_2001","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_94","","",N,N],[17,"NID_id_GostR3411_94","","",N,N],[17,"NID_id_HMACGostR3411_94","","",N,N],[17,"NID_id_GostR3410_2001","","",N,N],[17,"NID_id_GostR3410_94","","",N,N],[17,"NID_id_Gost28147_89","","",N,N],[17,"NID_gost89_cnt","","",N,N],[17,"NID_id_Gost28147_89_MAC","","",N,N],[17,"NID_id_GostR3411_94_prf","","",N,N],[17,"NID_id_GostR3410_2001DH","","",N,N],[17,"NID_id_GostR3410_94DH","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_KeyMeshing","","",N,N],[17,"NID_id_Gost28147_89_None_KeyMeshing","","",N,N],[17,"NID_id_GostR3411_94_TestParamSet","","",N,N],[17,"NID_id_GostR3411_94_CryptoProParamSet","","",N,N],[17,"NID_id_Gost28147_89_TestParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_D_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet","","",N,N],[17,"NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_TestParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_D_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchA_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchB_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_CryptoPro_XchC_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_TestParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_A_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_B_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_C_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet","","",N,N],[17,"NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet","","",N,N],[17,"NID_id_GostR3410_94_a","","",N,N],[17,"NID_id_GostR3410_94_aBis","","",N,N],[17,"NID_id_GostR3410_94_b","","",N,N],[17,"NID_id_GostR3410_94_bBis","","",N,N],[17,"NID_id_Gost28147_89_cc","","",N,N],[17,"NID_id_GostR3410_94_cc","","",N,N],[17,"NID_id_GostR3410_2001_cc","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_94_cc","","",N,N],[17,"NID_id_GostR3411_94_with_GostR3410_2001_cc","","",N,N],[17,"NID_id_GostR3410_2001_ParamSet_cc","","",N,N],[17,"NID_camellia_128_cbc","","",N,N],[17,"NID_camellia_192_cbc","","",N,N],[17,"NID_camellia_256_cbc","","",N,N],[17,"NID_id_camellia128_wrap","","",N,N],[17,"NID_id_camellia192_wrap","","",N,N],[17,"NID_id_camellia256_wrap","","",N,N],[17,"NID_camellia_128_ecb","","",N,N],[17,"NID_camellia_128_ofb128","","",N,N],[17,"NID_camellia_128_cfb128","","",N,N],[17,"NID_camellia_192_ecb","","",N,N],[17,"NID_camellia_192_ofb128","","",N,N],[17,"NID_camellia_192_cfb128","","",N,N],[17,"NID_camellia_256_ecb","","",N,N],[17,"NID_camellia_256_ofb128","","",N,N],[17,"NID_camellia_256_cfb128","","",N,N],[17,"NID_camellia_128_cfb1","","",N,N],[17,"NID_camellia_192_cfb1","","",N,N],[17,"NID_camellia_256_cfb1","","",N,N],[17,"NID_camellia_128_cfb8","","",N,N],[17,"NID_camellia_192_cfb8","","",N,N],[17,"NID_camellia_256_cfb8","","",N,N],[17,"NID_kisa","","",N,N],[17,"NID_seed_ecb","","",N,N],[17,"NID_seed_cbc","","",N,N],[17,"NID_seed_cfb128","","",N,N],[17,"NID_seed_ofb128","","",N,N],[17,"NID_hmac","","",N,N],[17,"NID_cmac","","",N,N],[17,"NID_rc4_hmac_md5","","",N,N],[17,"NID_aes_128_cbc_hmac_sha1","","",N,N],[17,"NID_aes_192_cbc_hmac_sha1","","",N,N],[17,"NID_aes_256_cbc_hmac_sha1","","",N,N],[17,"OCSP_REVOKED_STATUS_NOSTATUS","","",N,N],[17,"OCSP_REVOKED_STATUS_UNSPECIFIED","","",N,N],[17,"OCSP_REVOKED_STATUS_KEYCOMPROMISE","","",N,N],[17,"OCSP_REVOKED_STATUS_CACOMPROMISE","","",N,N],[17,"OCSP_REVOKED_STATUS_AFFILIATIONCHANGED","","",N,N],[17,"OCSP_REVOKED_STATUS_SUPERSEDED","","",N,N],[17,"OCSP_REVOKED_STATUS_CESSATIONOFOPERATION","","",N,N],[17,"OCSP_REVOKED_STATUS_CERTIFICATEHOLD","","",N,N],[17,"OCSP_REVOKED_STATUS_REMOVEFROMCRL","","",N,N],[17,"OCSP_NOCERTS","","",N,N],[17,"OCSP_NOINTERN","","",N,N],[17,"OCSP_NOSIGS","","",N,N],[17,"OCSP_NOCHAIN","","",N,N],[17,"OCSP_NOVERIFY","","",N,N],[17,"OCSP_NOEXPLICIT","","",N,N],[17,"OCSP_NOCASIGN","","",N,N],[17,"OCSP_NODELEGATED","","",N,N],[17,"OCSP_NOCHECKS","","",N,N],[17,"OCSP_TRUSTOTHER","","",N,N],[17,"OCSP_RESPID_KEY","","",N,N],[17,"OCSP_NOTIME","","",N,N],[17,"OCSP_RESPONSE_STATUS_SUCCESSFUL","","",N,N],[17,"OCSP_RESPONSE_STATUS_MALFORMEDREQUEST","","",N,N],[17,"OCSP_RESPONSE_STATUS_INTERNALERROR","","",N,N],[17,"OCSP_RESPONSE_STATUS_TRYLATER","","",N,N],[17,"OCSP_RESPONSE_STATUS_SIGREQUIRED","","",N,N],[17,"OCSP_RESPONSE_STATUS_UNAUTHORIZED","","",N,N],[17,"V_OCSP_CERTSTATUS_GOOD","","",N,N],[17,"V_OCSP_CERTSTATUS_REVOKED","","",N,N],[17,"V_OCSP_CERTSTATUS_UNKNOWN","","",N,N],[17,"PEM_R_NO_START_LINE","","",N,N],[17,"RSA_F4","","",N,N],[17,"EVP_PKEY_CTRL_RSA_PADDING","","",N,N],[17,"EVP_PKEY_CTRL_RSA_PSS_SALTLEN","","",N,N],[17,"EVP_PKEY_CTRL_RSA_MGF1_MD","","",N,N],[17,"EVP_PKEY_CTRL_GET_RSA_PADDING","","",N,N],[17,"RSA_PKCS1_PADDING","","",N,N],[17,"RSA_SSLV23_PADDING","","",N,N],[17,"RSA_NO_PADDING","","",N,N],[17,"RSA_PKCS1_OAEP_PADDING","","",N,N],[17,"RSA_X931_PADDING","","",N,N],[17,"RSA_PKCS1_PSS_PADDING","","",N,N],[17,"SHA_LBLOCK","","",N,N],[17,"SRTP_AES128_CM_SHA1_80","","",N,N],[17,"SRTP_AES128_CM_SHA1_32","","",N,N],[17,"SRTP_AES128_F8_SHA1_80","","",N,N],[17,"SRTP_AES128_F8_SHA1_32","","",N,N],[17,"SRTP_NULL_SHA1_80","","",N,N],[17,"SRTP_NULL_SHA1_32","","",N,N],[17,"SSL_MAX_KRB5_PRINCIPAL_LENGTH","","",N,N],[17,"SSL_MAX_SSL_SESSION_ID_LENGTH","","",N,N],[17,"SSL_MAX_SID_CTX_LENGTH","","",N,N],[17,"SSL_MAX_KEY_ARG_LENGTH","","",N,N],[17,"SSL_MAX_MASTER_KEY_LENGTH","","",N,N],[17,"SSL_SENT_SHUTDOWN","","",N,N],[17,"SSL_RECEIVED_SHUTDOWN","","",N,N],[17,"SSL_FILETYPE_PEM","","",N,N],[17,"SSL_FILETYPE_ASN1","","",N,N],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",N,N],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",N,N],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",N,N],[17,"SSL_OP_NO_QUERY_MTU","","",N,N],[17,"SSL_OP_COOKIE_EXCHANGE","","",N,N],[17,"SSL_OP_NO_TICKET","","",N,N],[17,"SSL_OP_CISCO_ANYCONNECT","","",N,N],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",N,N],[17,"SSL_OP_NO_COMPRESSION","","",N,N],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",N,N],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",N,N],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",N,N],[17,"SSL_OP_NO_SSLv3","","",N,N],[17,"SSL_OP_NO_TLSv1_1","","",N,N],[17,"SSL_OP_NO_TLSv1_2","","",N,N],[17,"SSL_OP_NO_TLSv1","","",N,N],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",N,N],[17,"SSL_OP_ALL","","",N,N],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",N,N],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",N,N],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",N,N],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",N,N],[17,"SSL_OP_TLS_D5_BUG","","",N,N],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",N,N],[17,"SSL_OP_SINGLE_ECDH_USE","","",N,N],[17,"SSL_OP_SINGLE_DH_USE","","",N,N],[17,"SSL_OP_NO_SSLv2","","",N,N],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","",N,N],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",N,N],[17,"SSL_MODE_AUTO_RETRY","","",N,N],[17,"SSL_MODE_NO_AUTO_CHAIN","","",N,N],[17,"SSL_MODE_RELEASE_BUFFERS","","",N,N],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",N,N],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",N,N],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","",N,N],[17,"SSL_SESS_CACHE_OFF","","",N,N],[17,"SSL_SESS_CACHE_CLIENT","","",N,N],[17,"SSL_SESS_CACHE_SERVER","","",N,N],[17,"SSL_SESS_CACHE_BOTH","","",N,N],[17,"SSL_SESS_CACHE_NO_AUTO_CLEAR","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL_LOOKUP","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL_STORE","","",N,N],[17,"SSL_SESS_CACHE_NO_INTERNAL","","",N,N],[17,"OPENSSL_NPN_UNSUPPORTED","","",N,N],[17,"OPENSSL_NPN_NEGOTIATED","","",N,N],[17,"OPENSSL_NPN_NO_OVERLAP","","",N,N],[17,"SSL_AD_ILLEGAL_PARAMETER","","",N,N],[17,"SSL_AD_DECODE_ERROR","","",N,N],[17,"SSL_AD_UNRECOGNIZED_NAME","","",N,N],[17,"SSL_ERROR_NONE","","",N,N],[17,"SSL_ERROR_SSL","","",N,N],[17,"SSL_ERROR_SYSCALL","","",N,N],[17,"SSL_ERROR_WANT_ACCEPT","","",N,N],[17,"SSL_ERROR_WANT_CONNECT","","",N,N],[17,"SSL_ERROR_WANT_READ","","",N,N],[17,"SSL_ERROR_WANT_WRITE","","",N,N],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",N,N],[17,"SSL_ERROR_ZERO_RETURN","","",N,N],[17,"SSL_VERIFY_NONE","","",N,N],[17,"SSL_VERIFY_PEER","","",N,N],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",N,N],[17,"SSL_CTRL_SET_TMP_DH","","",N,N],[17,"SSL_CTRL_SET_TMP_ECDH","","",N,N],[17,"SSL_CTRL_GET_SESSION_REUSED","","",N,N],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",N,N],[17,"SSL_CTRL_OPTIONS","","",N,N],[17,"SSL_CTRL_MODE","","",N,N],[17,"SSL_CTRL_SET_READ_AHEAD","","",N,N],[17,"SSL_CTRL_SET_SESS_CACHE_MODE","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE","","",N,N],[17,"SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP","","",N,N],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP","","",N,N],[17,"SSL_CTRL_CLEAR_OPTIONS","","",N,N],[17,"SSL_CTRL_GET_EXTRA_CHAIN_CERTS","","",N,N],[17,"SSL3_VERSION","","",N,N],[17,"SSL3_AD_ILLEGAL_PARAMETER","","",N,N],[17,"TLS1_VERSION","","",N,N],[17,"TLS1_1_VERSION","","",N,N],[17,"TLS1_2_VERSION","","",N,N],[17,"TLS1_AD_DECODE_ERROR","","",N,N],[17,"TLS1_AD_UNRECOGNIZED_NAME","","",N,N],[17,"TLSEXT_NAMETYPE_host_name","","",N,N],[17,"TLSEXT_STATUSTYPE_ocsp","","",N,N],[17,"SSL_TLSEXT_ERR_OK","","",N,N],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",N,N],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",N,N],[17,"SSL_TLSEXT_ERR_NOACK","","",N,N],[17,"X509_FILETYPE_PEM","","",N,N],[17,"X509_FILETYPE_ASN1","","",N,N],[17,"X509_FILETYPE_DEFAULT","","",N,N],[17,"X509_V_OK","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",N,N],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",N,N],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",N,N],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",N,N],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",N,N],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",N,N],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",N,N],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",N,N],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",N,N],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",N,N],[17,"X509_V_ERR_OUT_OF_MEM","","",N,N],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",N,N],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",N,N],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",N,N],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",N,N],[17,"X509_V_ERR_CERT_REVOKED","","",N,N],[17,"X509_V_ERR_INVALID_CA","","",N,N],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",N,N],[17,"X509_V_ERR_INVALID_PURPOSE","","",N,N],[17,"X509_V_ERR_CERT_UNTRUSTED","","",N,N],[17,"X509_V_ERR_CERT_REJECTED","","",N,N],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",N,N],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",N,N],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",N,N],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",N,N],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",N,N],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",N,N],[17,"X509_V_ERR_INVALID_NON_CA","","",N,N],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",N,N],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",N,N],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",N,N],[17,"X509_V_ERR_INVALID_EXTENSION","","",N,N],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",N,N],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",N,N],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",N,N],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",N,N],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",N,N],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",N,N],[17,"X509_V_ERR_SUBTREE_MINMAX","","",N,N],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",N,N],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",N,N],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",N,N],[17,"GEN_OTHERNAME","","",N,N],[17,"GEN_EMAIL","","",N,N],[17,"GEN_DNS","","",N,N],[17,"GEN_X400","","",N,N],[17,"GEN_DIRNAME","","",N,N],[17,"GEN_EDIPARTY","","",N,N],[17,"GEN_URI","","",N,N],[17,"GEN_IPADD","","",N,N],[17,"GEN_RID","","",N,N]],"paths":[[3,"ASN1_ENCODING"],[3,"stack_st_ASN1_OBJECT"],[3,"BIO_METHOD"],[3,"stack_st_void"],[3,"ECDSA_SIG"],[3,"ERR_STRING_DATA"],[3,"BIO"],[3,"BIGNUM"],[3,"EVP_CIPHER"],[3,"EVP_PKEY"],[3,"DH"],[3,"DSA"],[3,"RSA"],[3,"X509"],[3,"X509_ALGOR"],[3,"SSL"],[3,"SSL_CTX"],[3,"CRYPTO_EX_DATA"],[3,"stack_st_OPENSSL_STRING"],[3,"SHA_CTX"],[3,"SHA256_CTX"],[3,"SHA512_CTX"],[3,"SSL_SESSION"],[3,"stack_st_SSL_CIPHER"],[3,"SRTP_PROTECTION_PROFILE"],[3,"stack_st_SRTP_PROTECTION_PROFILE"],[3,"_STACK"],[3,"X509_VAL"],[3,"stack_st_X509_NAME"],[3,"stack_st_X509_EXTENSION"],[3,"stack_st_X509_ATTRIBUTE"],[3,"X509_REQ_INFO"],[3,"X509_REQ"],[3,"X509_CINF"],[3,"stack_st_X509"],[3,"GENERAL_NAME"],[3,"stack_st_GENERAL_NAME"],[4,"point_conversion_form_t"]]};
searchIndex["percent_encoding"]={"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",N,N],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",N,N],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",N,N],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",N,N],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",N,N],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",N,N],[3,"PercentDecode","","The return type of `percent_decode()`.",N,N],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",N,[[["u8"]],["str"]]],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",N,N],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",N,[[["str"],["e"]],["percentencode"]]],[5,"percent_decode","","Percent-decode the given bytes.",N,N],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",N,N],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,[[["self"],["u8"]],["bool"]]],[11,"clone","","",1,[[["self"]],["simple_encode_set"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"contains","","",1,[[["self"],["u8"]],["bool"]]],[11,"clone","","",2,[[["self"]],["query_encode_set"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"contains","","",2,[[["self"],["u8"]],["bool"]]],[11,"clone","","",3,[[["self"]],["default_encode_set"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"contains","","",3,[[["self"],["u8"]],["bool"]]],[11,"clone","","",4,[[["self"]],["path_segment_encode_set"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"contains","","",4,[[["self"],["u8"]],["bool"]]],[11,"clone","","",5,[[["self"]],["userinfo_encode_set"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"contains","","",5,[[["self"],["u8"]],["bool"]]],[11,"clone","","",6,[[["self"]],["percentencode"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["str"]]]],[11,"size_hint","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["percentdecode"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"next","","",7,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",7,N],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,[[["self"]],["option",["vec"]]]],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,[[["self"]],["result",["cow","utf8error"]]]],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,[[["self"]],["cow",["str"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[11,"from","","",3,[[["span"]],["span"]]],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",4,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",5,[[["self"]],["intoiter"]]],[11,"clone","","",5,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",5,[[],["tokenstream"]]],[11,"empty","","",5,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",5,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"from_str","","",5,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",5,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",3,[[],["span"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"Span"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"isaac","","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[0,"chacha","rand","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",N,N],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",N,N],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,N],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",N,N],[10,"reseed","","Reseed the given RNG.",1,N],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",N,N],[0,"os","rand","Interfaces to the operating system provided random number generators.",N,N],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",N,N],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",N,N],[8,"Rng","rand","A random number generator.",N,N],[10,"next_u32","","Return the next random u32.",2,[[["self"]],["u32"]]],[11,"next_u64","","Return the next random u64.",2,[[["self"]],["u64"]]],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f32"]]],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f64"]]],[11,"fill_bytes","","Fill `dest` with random data.",2,N],[11,"gen","","Return a random value of a `Rand` type.",2,[[["self"]],["t"]]],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,[[["self"]],["generator"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,[[["self"],["t"],["t"]],["t"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,[[["self"]],["asciigenerator"]]],[11,"choose","","Return a random element from `values`.",2,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,N],[11,"shuffle","","Shuffle a mutable slice in place.",2,N],[8,"Rand","","A type that can be randomly generated using an `Rng`.",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,[[["r"]],["self"]]],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",N,N],[10,"reseed","","Reseed an RNG with the given seed.",4,N],[10,"from_seed","","Create a new RNG with the given seed.",4,[[["seed"]],["self"]]],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[3,"XorShiftRng","","An Xorshift[1] random number generator.",N,N],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",N,N],[12,"0","","",5,N],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",N,N],[12,"0","","",6,N],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",N,N],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",N,[[],["xorshiftrng"]]],[3,"ThreadRng","","The thread-local RNG.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",N,[[],["threadrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Sampling from random distributions.",N,N],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[0,"range","","Generating numbers between two others.",N,N],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",N,N],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",N,N],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,[[["self"],["self"]],["range"]]],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,[[["range"],["r"]],["self"]]],[0,"gamma","rand::distributions","The Gamma and derived distributions.",N,N],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[0,"normal","rand::distributions","The normal and derived distributions.",N,N],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",N,N],[12,"0","","",8,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[0,"exponential","rand::distributions","The exponential distribution.",N,N],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",N,N],[12,"0","","",9,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",11,[[["self"],["r"]],["support"]]],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",12,N],[12,"item","","The actual item which is being weighted",12,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[11,"new","rand::os","Create a new `OsRng`.",13,[[],["result",["osrng","error"]]]],[11,"reseed","rand::reseeding","",14,N],[11,"clone","rand::distributions::exponential","",15,[[["self"]],["exp"]]],[11,"clone","rand::distributions","",12,[[["self"]],["weighted"]]],[11,"clone","","",16,[[["self"]],["randsample"]]],[11,"clone","rand::distributions::gamma","",17,[[["self"]],["chisquared"]]],[11,"clone","rand::reseeding","",14,[[["self"]],["reseedwithdefault"]]],[11,"clone","rand::chacha","",18,[[["self"]],["chacharng"]]],[11,"clone","rand::distributions::exponential","",9,[[["self"]],["exp1"]]],[11,"clone","rand::distributions::normal","",8,[[["self"]],["standardnormal"]]],[11,"clone","rand::distributions::range","",19,[[["self"]],["range"]]],[11,"clone","rand","",20,[[["self"]],["threadrng"]]],[11,"clone","rand::distributions::gamma","",21,[[["self"]],["studentt"]]],[11,"clone","rand","",22,[[["self"]],["xorshiftrng"]]],[11,"clone","rand::isaac","",23,[[["self"]],["isaac64rng"]]],[11,"clone","rand::distributions::gamma","",24,[[["self"]],["fisherf"]]],[11,"clone","rand::isaac","",25,[[["self"]],["isaacrng"]]],[11,"clone","rand","",26,[[["self"]],["stdrng"]]],[11,"clone","rand::distributions::gamma","",27,[[["self"]],["gamma"]]],[11,"clone","rand::distributions::normal","",28,[[["self"]],["normal"]]],[11,"clone","","",29,[[["self"]],["lognormal"]]],[11,"fmt","rand::read","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::os","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::range","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::chacha","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_u32","rand::read","",30,[[["self"]],["u32"]]],[11,"next_u64","","",30,[[["self"]],["u64"]]],[11,"fill_bytes","","",30,N],[11,"next_u32","rand::os","",13,[[["self"]],["u32"]]],[11,"next_u64","","",13,[[["self"]],["u64"]]],[11,"fill_bytes","","",13,N],[11,"next_u32","rand::chacha","",18,[[["self"]],["u32"]]],[11,"next_u32","rand::reseeding","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,N],[11,"next_u32","rand","",26,[[["self"]],["u32"]]],[11,"next_u64","","",26,[[["self"]],["u64"]]],[11,"next_u32","","",22,[[["self"]],["u32"]]],[11,"next_u32","rand::isaac","",25,[[["self"]],["u32"]]],[11,"next_u32","rand","",20,[[["self"]],["u32"]]],[11,"next_u64","","",20,[[["self"]],["u64"]]],[11,"fill_bytes","","",20,N],[11,"next_u32","rand::isaac","",23,[[["self"]],["u32"]]],[11,"next_u64","","",23,[[["self"]],["u64"]]],[11,"default","rand::reseeding","",14,[[],["reseedwithdefault"]]],[11,"ind_sample","rand::distributions::gamma","",24,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::range","",19,[[["self"],["r"]],["sup"]]],[11,"ind_sample","rand::distributions::exponential","",15,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::gamma","",27,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",21,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",17,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::normal","",28,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions","",33,[[["self"],["r"]],["t"]]],[11,"ind_sample","rand::distributions::normal","",29,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions","",16,[[["self"],["r"]],["sup"]]],[11,"rand","rand","",22,[[["r"]],["xorshiftrng"]]],[11,"rand","rand::distributions::normal","",8,[[["r"]],["standardnormal"]]],[11,"rand","rand","",5,[[["r"]],["open01",["f32"]]]],[11,"rand","","",6,[[["r"]],["closed01",["f32"]]]],[11,"rand","rand::chacha","",18,[[["r"]],["chacharng"]]],[11,"rand","rand","",6,[[["r"]],["closed01",["f64"]]]],[11,"rand","","",5,[[["r"]],["open01",["f64"]]]],[11,"rand","rand::isaac","",25,[[["r"]],["isaacrng"]]],[11,"rand","","",23,[[["r"]],["isaac64rng"]]],[11,"rand","rand::distributions::exponential","",9,[[["r"]],["exp1"]]],[11,"reseed","rand::isaac","",23,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",23,N],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",22,N],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",22,N],[11,"reseed","rand::chacha","",18,N],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",18,N],[11,"reseed","rand::reseeding","",0,N],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,N],[11,"reseed","rand::isaac","",25,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",25,N],[11,"reseed","rand","",26,N],[11,"from_seed","","",26,N],[11,"sample","rand::distributions::gamma","",27,[[["self"],["r"]],["f64"]]],[11,"sample","","",24,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::normal","",29,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::gamma","",17,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::exponential","",15,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions","",16,[[["self"],["r"]],["sup"]]],[11,"sample","rand::distributions::gamma","",21,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions","",33,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::range","",19,[[["self"],["r"]],["sup"]]],[11,"sample","rand::distributions::normal","",28,[[["self"],["r"]],["f64"]]],[11,"next","rand","",31,[[["self"]],["option",["char"]]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",25,[[],["isaacrng"]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",23,[[],["isaac64rng"]]],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",18,[[],["chacharng"]]],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",18,N],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,[[["r"],["u64"],["rsdr"]],["reseedingrng"]]],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,N],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",30,[[["r"]],["readrng"]]],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",22,[[],["xorshiftrng"]]],[11,"new","","Create a randomly seeded instance of `StdRng`.",26,[[],["result",["stdrng","error"]]]],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",19,[[["x"],["x"]],["range"]]],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",27,[[["f64"],["f64"]],["gamma"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",17,[[["f64"]],["chisquared"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",24,[[["f64"],["f64"]],["fisherf"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",21,[[["f64"]],["studentt"]]],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",28,[[["f64"],["f64"]],["normal"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",29,[[["f64"],["f64"]],["lognormal"]]],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",15,[[["f64"]],["exp"]]],[11,"new","rand::distributions","",16,[[],["randsample"]]],[11,"new","","Create a new `WeightedChoice`.",33,N]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"ReseedWithDefault"],[3,"Exp"],[3,"RandSample"],[3,"ChiSquared"],[3,"ChaChaRng"],[3,"Range"],[3,"ThreadRng"],[3,"StudentT"],[3,"XorShiftRng"],[3,"Isaac64Rng"],[3,"FisherF"],[3,"IsaacRng"],[3,"StdRng"],[3,"Gamma"],[3,"Normal"],[3,"LogNormal"],[3,"ReadRng"],[3,"AsciiGenerator"],[3,"Generator"],[3,"WeightedChoice"]]};
searchIndex["regex"]={"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","regex","",1,[[["self"]],["error"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",4,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",5,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",6,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",7,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","","",8,[[["self"]],["match"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["match"]],["bool"]]],[11,"ne","","",8,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"as_bytes","","Returns the matched text.",8,N],[11,"clone","","",9,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",9,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,N],[11,"shortest_match","","Returns the end location of a match in the text given.",9,N],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",9,N],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",9,N],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",9,N],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",9,N],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search at the given offset and populates the capture locations given.",9,N],[11,"as_str","","Returns the original string of this regex.",9,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",9,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",9,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",9,[[["self"]],["capturelocations"]]],[11,"next","","",10,[[["self"]],["option",["match"]]]],[11,"next","","",11,[[["self"]],["option",["captures"]]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"next","","",14,[[["self"]],["option",["option"]]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["capturelocations"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",15,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",15,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",16,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",16,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",16,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",16,N],[11,"len","","Returns the number of captured groups.",16,[[["self"]],["usize"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"index","","",16,N],[11,"index","","",16,N],[11,"next","","",17,[[["self"]],["option",["option"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",18,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",18,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"clone","regex","",19,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",19,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",19,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",19,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",19,[[["self"]],["usize"]]],[11,"clone","","",20,[[["self"]],["setmatches"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",20,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",20,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",20,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",20,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",20,N],[11,"next","","",21,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",21,N],[11,"next_back","","",21,[[["self"]],["option",["usize"]]]],[11,"clone","","",22,[[["self"]],["setmatchesiter"]]],[11,"next","","",22,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",22,N],[11,"next_back","","",22,[[["self"]],["option",["usize"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","regex::bytes","",23,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",23,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",23,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",23,N],[11,"len","","Returns the total number of regular expressions in this set.",23,[[["self"]],["usize"]]],[11,"clone","","",24,[[["self"]],["setmatches"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",24,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",24,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",24,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",24,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",24,N],[11,"next","","",25,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",25,N],[11,"next_back","","",25,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["setmatchesiter"]]],[11,"next","","",26,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",26,N],[11,"next_back","","",26,[[["self"]],["option",["usize"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","regex","",27,[[["self"]],["match"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["match"]],["bool"]]],[11,"ne","","",27,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"as_str","","Returns the matched text.",27,[[["self"]],["str"]]],[11,"clone","","",28,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",28,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",28,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",28,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",28,[[["self"],["str"]],["option",["match"]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",28,[[["self"],["str"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",28,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",28,[[["self"],["str"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",28,[[["self"],["str"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",28,[[["self"],["str"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",28,[[["self"],["str"],["usize"],["r"]],["cow",["str"]]]],[11,"shortest_match","","Returns the end location of a match in the text given.",28,[[["self"],["str"]],["option",["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["match"]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",28,[[["self"],["capturelocations"],["str"]],["option",["match"]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",28,[[["self"],["capturelocations"],["str"],["usize"]],["option",["match"]]]],[11,"as_str","","Returns the original string of this regex.",28,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",28,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",28,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",28,[[["self"]],["capturelocations"]]],[11,"next","","",29,[[["self"]],["option",["option"]]]],[11,"size_hint","","",29,N],[11,"next","","",30,[[["self"]],["option",["str"]]]],[11,"next","","",31,[[["self"]],["option",["str"]]]],[11,"clone","","",32,[[["self"]],["capturelocations"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",32,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",32,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",33,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",33,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",33,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",33,[[["self"],["str"],["string"]]]],[11,"len","","Returns the number of captured groups.",33,[[["self"]],["usize"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"index","","",33,[[["self"],["usize"]],["str"]]],[11,"index","","",33,[[["self"],["str"]],["str"]]],[11,"next","","",34,[[["self"]],["option",["option"]]]],[11,"next","","",35,[[["self"]],["option",["captures"]]]],[11,"next","","",36,[[["self"]],["option",["match"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",37,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",37,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",0,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",0,[[["self"]],["option",["cow"]]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",38,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"clone","","",42,[[["self"]],["parserbuilder"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"default","","",42,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"clone","","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",46,[[["self"]],["str"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",1,[[["self"],["span"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"drop","","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"clone","","",58,[[["self"]],["literals"]]],[11,"eq","","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"cmp","","",59,[[["self"],["literal"]],["ordering"]]],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",59,N],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"clone","","",61,[[["self"]],["translatorbuilder"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"default","","",61,[[],["translatorbuilder"]]],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"clone","","",64,[[["self"]],["error"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",64,[[["self"]],["str"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"next","","",67,[[["self"]],["option",["classunicoderange"]]]],[11,"clone","","",68,[[["self"]],["classunicoderange"]]],[11,"default","","",68,[[],["classunicoderange"]]],[11,"eq","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",68,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"cmp","","",68,[[["self"],["classunicoderange"]],["ordering"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Unicode scalar value range for a character class.",68,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",68,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",68,[[["self"]],["char"]]],[11,"clone","","",69,[[["self"]],["classbytes"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",69,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",69,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",69,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",69,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",69,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,[[["self"]]]],[11,"negate","","Negate this byte class.",69,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,[[["self"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"next","","",70,[[["self"]],["option",["classbytesrange"]]]],[11,"clone","","",71,[[["self"]],["classbytesrange"]]],[11,"default","","",71,[[],["classbytesrange"]]],[11,"eq","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"partial_cmp","","",71,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"cmp","","",71,[[["self"],["classbytesrange"]],["ordering"]]],[11,"new","","Create a new byte range for a character class.",71,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",71,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",71,[[["self"]],["u8"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"drop","","",65,[[["self"]]]],[11,"clone","regex_syntax","",72,[[["self"]],["parserbuilder"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"default","","",72,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",72,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",72,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",72,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",73,[[["self"]],["parser"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",73,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["semver"]={"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",N,N],[12,"major","","The major version, to be incremented on incompatible changes.",0,N],[12,"minor","","The minor version, to be incremented when functionality is added in a backwards-compatible manner.",0,N],[12,"patch","","The patch version, to be incremented when backwards-compatible bug fixes are made.",0,N],[12,"pre","","The pre-release version identifier, if one exists.",0,N],[12,"build","","The build metadata, ignored when determining version precedence.",0,N],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version numbers. Matching operations can then be done with the `VersionReq` against a particular version to see if it satisfies some or all of the constraints.",N,N],[4,"Identifier","","An identifier in the pre-release or build metadata.",N,N],[13,"Numeric","","An identifier that's solely numbers.",1,N],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,N],[4,"SemVerError","","An error type for this crate",N,N],[13,"ParseError","","An error ocurred while parsing.",2,N],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each enumeration is one of the possible errors that can occur.",N,N],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,N],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,N],[13,"InvalidSigil","","The sigil you have written is not correct.",3,N],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,N],[13,"InvalidIdentifier","","There was an error parsing an identifier.",3,N],[13,"MajorVersionRequired","","At least a major version is required.",3,N],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,N],[13,"DeprecatedVersionRequirement","","This form of requirement is deprecated.",3,N],[11,"clone","","",1,[[["self"]],["identifier"]]],[11,"eq","","",1,[[["self"],["identifier"]],["bool"]]],[11,"ne","","",1,[[["self"],["identifier"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["identifier"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["identifier"]],["bool"]]],[11,"le","","",1,[[["self"],["identifier"]],["bool"]]],[11,"gt","","",1,[[["self"],["identifier"]],["bool"]]],[11,"ge","","",1,[[["self"],["identifier"]],["bool"]]],[11,"cmp","","",1,[[["self"],["identifier"]],["ordering"]]],[11,"hash","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["identifier"]],["identifier"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"clone","","",0,[[["self"]],["version"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["version"]],["version"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"clone","","",2,[[["self"]],["semvererror"]]],[11,"eq","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"ne","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",2,[[["self"],["semvererror"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"le","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"gt","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"ge","","",2,[[["self"],["semvererror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"new","","Contructs the simple case without pre or build.",0,[[["u64"],["u64"],["u64"]],["version"]]],[11,"parse","","Parse a string into a semver object.",0,[[["str"]],["result",["version","semvererror"]]]],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,[[["self"]]]],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,[[["self"]]]],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,[[["self"]]]],[11,"is_prerelease","","Checks to see if the current Version is in pre-release status",0,[[["self"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result",["version","semvererror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["version"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["version"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["version"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"from","","",0,N],[11,"clone","","",4,[[["self"]],["versionreq"]]],[11,"eq","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"ne","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["versionreq"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"le","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"gt","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"ge","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"cmp","","",4,[[["self"],["versionreq"]],["ordering"]]],[11,"hash","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["versionreq"]],["versionreq"]]],[11,"serialize","","",4,[[["self"],["s"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"clone","","",3,[[["self"]],["reqparseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["reqparseerror"]],["bool"]]],[11,"ne","","",3,[[["self"],["reqparseerror"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"from","","",3,[[["string"]],["reqparseerror"]]],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other words, any version will match against it.",4,[[],["versionreq"]]],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It takes a string like `\"^1.2.3\"` and turns it into a `VersionReq` that matches that particular constraint.",4,[[["str"]],["result",["versionreq","reqparseerror"]]]],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,[[["version"]],["versionreq"]]],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,[[["self"],["version"]],["bool"]]],[11,"from_str","","",4,[[["str"]],["result",["versionreq","reqparseerror"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Version"],[4,"Identifier"],[4,"SemVerError"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex["semver_parser"]={"doc":"","items":[[0,"version","semver_parser","",N,N],[3,"Version","semver_parser::version","",N,N],[12,"major","","",0,N],[12,"minor","","",0,N],[12,"patch","","",0,N],[12,"pre","","",0,N],[12,"build","","",0,N],[4,"Identifier","","",N,N],[13,"Numeric","","An identifier that's solely numbers.",1,N],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,N],[5,"parse","","",N,[[["str"]],["result",["version","string"]]]],[11,"clone","","",0,[[["self"]],["version"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["version"]],["bool"]]],[11,"ne","","",0,[[["self"],["version"]],["bool"]]],[11,"clone","","",1,[[["self"]],["identifier"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["identifier"]],["bool"]]],[11,"ne","","",1,[[["self"],["identifier"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"range","semver_parser","",N,N],[3,"VersionReq","semver_parser::range","",N,N],[12,"predicates","","",2,N],[3,"Predicate","","",N,N],[12,"op","","",3,N],[12,"major","","",3,N],[12,"minor","","",3,N],[12,"patch","","",3,N],[12,"pre","","",3,N],[4,"WildcardVersion","","",N,N],[13,"Major","","",4,N],[13,"Minor","","",4,N],[13,"Patch","","",4,N],[4,"Op","","",N,N],[13,"Ex","","",5,N],[13,"Gt","","",5,N],[13,"GtEq","","",5,N],[13,"Lt","","",5,N],[13,"LtEq","","",5,N],[13,"Tilde","","",5,N],[13,"Compatible","","",5,N],[13,"Wildcard","","",5,N],[5,"parse_predicate","","",N,[[["str"]],["result",["predicate","string"]]]],[5,"parse","","",N,[[["str"]],["result",["versionreq","string"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["wildcardversion"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["op"]],["bool"]]],[11,"ne","","",5,[[["self"],["op"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",5,[[["str"]],["result",["op","string"]]]],[11,"eq","","",3,[[["self"],["predicate"]],["bool"]]],[11,"ne","","",3,[[["self"],["predicate"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Version"],[4,"Identifier"],[3,"VersionReq"],[3,"Predicate"],[4,"WildcardVersion"],[4,"Op"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["strsim"]={"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",N,N],[13,"DifferentLengthArgs","","",0,N],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",N,[[["str"],["str"]],["hammingresult"]]],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",N,[[["str"],["str"]],["f64"]]],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",N,[[["str"],["str"]],["f64"]]],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",N,[[["str"],["str"]],["usize"]]],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",N,[[["str"],["str"]],["usize"]]],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",N,[[["str"],["str"]],["usize"]]],[6,"HammingResult","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["strsimerror"]],["bool"]]]],"paths":[[4,"StrSimError"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprAsync","","An async block: `async { ... }`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",N,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTryBlock","","A try block: `try { ... }`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"lifetimes","","",42,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",56,N],[12,"lt_token","","",56,N],[12,"args","","",56,N],[12,"gt_token","","",56,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",57,N],[12,"eq_token","","",57,N],[12,"ty","","",57,N],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",N,N],[12,"ident","","",58,N],[12,"colon_token","","",58,N],[12,"bounds","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"Let","","A `let` guard: `let Some(x) = opt`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Async","","An async block: `async { ... }`.",68,N],[13,"TryBlock","","A try block: `try { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["error"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"spans","","",87,N],[3,"Abstract","","`abstract`",N,N],[12,"span","","",88,N],[3,"As","","`as`",N,N],[12,"span","","",89,N],[3,"Async","","`async`",N,N],[12,"span","","",90,N],[3,"Auto","","`auto`",N,N],[12,"span","","",91,N],[3,"Become","","`become`",N,N],[12,"span","","",92,N],[3,"Box","","`box`",N,N],[12,"span","","",93,N],[3,"Break","","`break`",N,N],[12,"span","","",94,N],[3,"CapSelf","","`Self`",N,N],[12,"span","","",95,N],[3,"Const","","`const`",N,N],[12,"span","","",96,N],[3,"Continue","","`continue`",N,N],[12,"span","","",97,N],[3,"Crate","","`crate`",N,N],[12,"span","","",98,N],[3,"Default","","`default`",N,N],[12,"span","","",99,N],[3,"Do","","`do`",N,N],[12,"span","","",100,N],[3,"Dyn","","`dyn`",N,N],[12,"span","","",101,N],[3,"Else","","`else`",N,N],[12,"span","","",102,N],[3,"Enum","","`enum`",N,N],[12,"span","","",103,N],[3,"Existential","","`existential`",N,N],[12,"span","","",104,N],[3,"Extern","","`extern`",N,N],[12,"span","","",105,N],[3,"Final","","`final`",N,N],[12,"span","","",106,N],[3,"Fn","","`fn`",N,N],[12,"span","","",107,N],[3,"For","","`for`",N,N],[12,"span","","",108,N],[3,"If","","`if`",N,N],[12,"span","","",109,N],[3,"Impl","","`impl`",N,N],[12,"span","","",110,N],[3,"In","","`in`",N,N],[12,"span","","",111,N],[3,"Let","","`let`",N,N],[12,"span","","",112,N],[3,"Loop","","`loop`",N,N],[12,"span","","",113,N],[3,"Macro","","`macro`",N,N],[12,"span","","",114,N],[3,"Match","","`match`",N,N],[12,"span","","",115,N],[3,"Mod","","`mod`",N,N],[12,"span","","",116,N],[3,"Move","","`move`",N,N],[12,"span","","",117,N],[3,"Mut","","`mut`",N,N],[12,"span","","",118,N],[3,"Override","","`override`",N,N],[12,"span","","",119,N],[3,"Priv","","`priv`",N,N],[12,"span","","",120,N],[3,"Pub","","`pub`",N,N],[12,"span","","",121,N],[3,"Ref","","`ref`",N,N],[12,"span","","",122,N],[3,"Return","","`return`",N,N],[12,"span","","",123,N],[3,"Self_","","`self`",N,N],[12,"span","","",124,N],[3,"Static","","`static`",N,N],[12,"span","","",125,N],[3,"Struct","","`struct`",N,N],[12,"span","","",126,N],[3,"Super","","`super`",N,N],[12,"span","","",127,N],[3,"Trait","","`trait`",N,N],[12,"span","","",128,N],[3,"Try","","`try`",N,N],[12,"span","","",129,N],[3,"Type","","`type`",N,N],[12,"span","","",130,N],[3,"Typeof","","`typeof`",N,N],[12,"span","","",131,N],[3,"Union","","`union`",N,N],[12,"span","","",132,N],[3,"Unsafe","","`unsafe`",N,N],[12,"span","","",133,N],[3,"Unsized","","`unsized`",N,N],[12,"span","","",134,N],[3,"Use","","`use`",N,N],[12,"span","","",135,N],[3,"Virtual","","`virtual`",N,N],[12,"span","","",136,N],[3,"Where","","`where`",N,N],[12,"span","","",137,N],[3,"While","","`while`",N,N],[12,"span","","",138,N],[3,"Yield","","`yield`",N,N],[12,"span","","",139,N],[3,"Add","","`+`",N,N],[12,"spans","","",140,N],[3,"AddEq","","`+=`",N,N],[12,"spans","","",141,N],[3,"And","","`&`",N,N],[12,"spans","","",142,N],[3,"AndAnd","","`&&`",N,N],[12,"spans","","",143,N],[3,"AndEq","","`&=`",N,N],[12,"spans","","",144,N],[3,"At","","`@`",N,N],[12,"spans","","",145,N],[3,"Bang","","`!`",N,N],[12,"spans","","",146,N],[3,"Caret","","`^`",N,N],[12,"spans","","",147,N],[3,"CaretEq","","`^=`",N,N],[12,"spans","","",148,N],[3,"Colon","","`:`",N,N],[12,"spans","","",149,N],[3,"Colon2","","`::`",N,N],[12,"spans","","",150,N],[3,"Comma","","`,`",N,N],[12,"spans","","",151,N],[3,"Div","","`/`",N,N],[12,"spans","","",152,N],[3,"DivEq","","`/=`",N,N],[12,"spans","","",153,N],[3,"Dollar","","`$`",N,N],[12,"spans","","",154,N],[3,"Dot","","`.`",N,N],[12,"spans","","",155,N],[3,"Dot2","","`..`",N,N],[12,"spans","","",156,N],[3,"Dot3","","`...`",N,N],[12,"spans","","",157,N],[3,"DotDotEq","","`..=`",N,N],[12,"spans","","",158,N],[3,"Eq","","`=`",N,N],[12,"spans","","",159,N],[3,"EqEq","","`==`",N,N],[12,"spans","","",160,N],[3,"Ge","","`>=`",N,N],[12,"spans","","",161,N],[3,"Gt","","`>`",N,N],[12,"spans","","",162,N],[3,"Le","","`<=`",N,N],[12,"spans","","",163,N],[3,"Lt","","`<`",N,N],[12,"spans","","",164,N],[3,"MulEq","","`*=`",N,N],[12,"spans","","",165,N],[3,"Ne","","`!=`",N,N],[12,"spans","","",166,N],[3,"Or","","`|`",N,N],[12,"spans","","",167,N],[3,"OrEq","","`|=`",N,N],[12,"spans","","",168,N],[3,"OrOr","","`||`",N,N],[12,"spans","","",169,N],[3,"Pound","","`#`",N,N],[12,"spans","","",170,N],[3,"Question","","`?`",N,N],[12,"spans","","",171,N],[3,"RArrow","","`->`",N,N],[12,"spans","","",172,N],[3,"LArrow","","`<-`",N,N],[12,"spans","","",173,N],[3,"Rem","","`%`",N,N],[12,"spans","","",174,N],[3,"RemEq","","`%=`",N,N],[12,"spans","","",175,N],[3,"FatArrow","","`=>`",N,N],[12,"spans","","",176,N],[3,"Semi","","`;`",N,N],[12,"spans","","",177,N],[3,"Shl","","`<<`",N,N],[12,"spans","","",178,N],[3,"ShlEq","","`<<=`",N,N],[12,"spans","","",179,N],[3,"Shr","","`>>`",N,N],[12,"spans","","",180,N],[3,"ShrEq","","`>>=`",N,N],[12,"spans","","",181,N],[3,"Star","","`*`",N,N],[12,"spans","","",182,N],[3,"Sub","","`-`",N,N],[12,"spans","","",183,N],[3,"SubEq","","`-=`",N,N],[12,"spans","","",184,N],[3,"Tilde","","`~`",N,N],[12,"spans","","",185,N],[3,"Brace","","`{...}`",N,N],[12,"span","","",186,N],[3,"Bracket","","`[...]`",N,N],[12,"span","","",187,N],[3,"Paren","","`(...)`",N,N],[12,"span","","",188,N],[3,"Group","","None-delimited group",N,N],[12,"span","","",189,N],[8,"Token","","Marker trait for types that represent single tokens.",N,N],[11,"peek","syn","",31,[[["cursor"]],["bool"]]],[11,"display","","",31,[[],["str"]]],[11,"peek","","",76,[[["cursor"]],["bool"]]],[11,"display","","",76,[[],["str"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"peek","","",32,[[["cursor"]],["bool"]]],[11,"display","","",32,[[],["str"]]],[11,"clone","syn::token","",87,[[["self"]],["underscore"]]],[11,"default","","",87,[[],["self"]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"parse","","",87,[[["parsestream"]],["result"]]],[11,"peek","","",87,[[["cursor"]],["bool"]]],[11,"display","","",87,[[],["str"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"clone","","",88,[[["self"]],["abstract"]]],[11,"default","","",88,[[],["self"]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"parse","","",88,[[["parsestream"]],["result"]]],[11,"peek","","",88,[[["cursor"]],["bool"]]],[11,"display","","",88,[[],["str"]]],[11,"clone","","",89,[[["self"]],["as"]]],[11,"default","","",89,[[],["self"]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"parse","","",89,[[["parsestream"]],["result"]]],[11,"peek","","",89,[[["cursor"]],["bool"]]],[11,"display","","",89,[[],["str"]]],[11,"clone","","",90,[[["self"]],["async"]]],[11,"default","","",90,[[],["self"]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"parse","","",90,[[["parsestream"]],["result"]]],[11,"peek","","",90,[[["cursor"]],["bool"]]],[11,"display","","",90,[[],["str"]]],[11,"clone","","",91,[[["self"]],["auto"]]],[11,"default","","",91,[[],["self"]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"parse","","",91,[[["parsestream"]],["result"]]],[11,"peek","","",91,[[["cursor"]],["bool"]]],[11,"display","","",91,[[],["str"]]],[11,"clone","","",92,[[["self"]],["become"]]],[11,"default","","",92,[[],["self"]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"parse","","",92,[[["parsestream"]],["result"]]],[11,"peek","","",92,[[["cursor"]],["bool"]]],[11,"display","","",92,[[],["str"]]],[11,"clone","","",93,[[["self"]],["box"]]],[11,"default","","",93,[[],["self"]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"parse","","",93,[[["parsestream"]],["result"]]],[11,"peek","","",93,[[["cursor"]],["bool"]]],[11,"display","","",93,[[],["str"]]],[11,"clone","","",94,[[["self"]],["break"]]],[11,"default","","",94,[[],["self"]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"parse","","",94,[[["parsestream"]],["result"]]],[11,"peek","","",94,[[["cursor"]],["bool"]]],[11,"display","","",94,[[],["str"]]],[11,"clone","","",95,[[["self"]],["capself"]]],[11,"default","","",95,[[],["self"]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"parse","","",95,[[["parsestream"]],["result"]]],[11,"peek","","",95,[[["cursor"]],["bool"]]],[11,"display","","",95,[[],["str"]]],[11,"clone","","",96,[[["self"]],["const"]]],[11,"default","","",96,[[],["self"]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"parse","","",96,[[["parsestream"]],["result"]]],[11,"peek","","",96,[[["cursor"]],["bool"]]],[11,"display","","",96,[[],["str"]]],[11,"clone","","",97,[[["self"]],["continue"]]],[11,"default","","",97,[[],["self"]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"parse","","",97,[[["parsestream"]],["result"]]],[11,"peek","","",97,[[["cursor"]],["bool"]]],[11,"display","","",97,[[],["str"]]],[11,"clone","","",98,[[["self"]],["crate"]]],[11,"default","","",98,[[],["self"]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"parse","","",98,[[["parsestream"]],["result"]]],[11,"peek","","",98,[[["cursor"]],["bool"]]],[11,"display","","",98,[[],["str"]]],[11,"clone","","",99,[[["self"]],["default"]]],[11,"default","","",99,[[],["self"]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"parse","","",99,[[["parsestream"]],["result"]]],[11,"peek","","",99,[[["cursor"]],["bool"]]],[11,"display","","",99,[[],["str"]]],[11,"clone","","",100,[[["self"]],["do"]]],[11,"default","","",100,[[],["self"]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"parse","","",100,[[["parsestream"]],["result"]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"clone","","",101,[[["self"]],["dyn"]]],[11,"default","","",101,[[],["self"]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"parse","","",101,[[["parsestream"]],["result"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"clone","","",102,[[["self"]],["else"]]],[11,"default","","",102,[[],["self"]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"parse","","",102,[[["parsestream"]],["result"]]],[11,"peek","","",102,[[["cursor"]],["bool"]]],[11,"display","","",102,[[],["str"]]],[11,"clone","","",103,[[["self"]],["enum"]]],[11,"default","","",103,[[],["self"]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"parse","","",103,[[["parsestream"]],["result"]]],[11,"peek","","",103,[[["cursor"]],["bool"]]],[11,"display","","",103,[[],["str"]]],[11,"clone","","",104,[[["self"]],["existential"]]],[11,"default","","",104,[[],["self"]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"parse","","",104,[[["parsestream"]],["result"]]],[11,"peek","","",104,[[["cursor"]],["bool"]]],[11,"display","","",104,[[],["str"]]],[11,"clone","","",105,[[["self"]],["extern"]]],[11,"default","","",105,[[],["self"]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"parse","","",105,[[["parsestream"]],["result"]]],[11,"peek","","",105,[[["cursor"]],["bool"]]],[11,"display","","",105,[[],["str"]]],[11,"clone","","",106,[[["self"]],["final"]]],[11,"default","","",106,[[],["self"]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"parse","","",106,[[["parsestream"]],["result"]]],[11,"peek","","",106,[[["cursor"]],["bool"]]],[11,"display","","",106,[[],["str"]]],[11,"clone","","",107,[[["self"]],["fn"]]],[11,"default","","",107,[[],["self"]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"parse","","",107,[[["parsestream"]],["result"]]],[11,"peek","","",107,[[["cursor"]],["bool"]]],[11,"display","","",107,[[],["str"]]],[11,"clone","","",108,[[["self"]],["for"]]],[11,"default","","",108,[[],["self"]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"parse","","",108,[[["parsestream"]],["result"]]],[11,"peek","","",108,[[["cursor"]],["bool"]]],[11,"display","","",108,[[],["str"]]],[11,"clone","","",109,[[["self"]],["if"]]],[11,"default","","",109,[[],["self"]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"parse","","",109,[[["parsestream"]],["result"]]],[11,"peek","","",109,[[["cursor"]],["bool"]]],[11,"display","","",109,[[],["str"]]],[11,"clone","","",110,[[["self"]],["impl"]]],[11,"default","","",110,[[],["self"]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"parse","","",110,[[["parsestream"]],["result"]]],[11,"peek","","",110,[[["cursor"]],["bool"]]],[11,"display","","",110,[[],["str"]]],[11,"clone","","",111,[[["self"]],["in"]]],[11,"default","","",111,[[],["self"]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"parse","","",111,[[["parsestream"]],["result"]]],[11,"peek","","",111,[[["cursor"]],["bool"]]],[11,"display","","",111,[[],["str"]]],[11,"clone","","",112,[[["self"]],["let"]]],[11,"default","","",112,[[],["self"]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"parse","","",112,[[["parsestream"]],["result"]]],[11,"peek","","",112,[[["cursor"]],["bool"]]],[11,"display","","",112,[[],["str"]]],[11,"clone","","",113,[[["self"]],["loop"]]],[11,"default","","",113,[[],["self"]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"parse","","",113,[[["parsestream"]],["result"]]],[11,"peek","","",113,[[["cursor"]],["bool"]]],[11,"display","","",113,[[],["str"]]],[11,"clone","","",114,[[["self"]],["macro"]]],[11,"default","","",114,[[],["self"]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"parse","","",114,[[["parsestream"]],["result"]]],[11,"peek","","",114,[[["cursor"]],["bool"]]],[11,"display","","",114,[[],["str"]]],[11,"clone","","",115,[[["self"]],["match"]]],[11,"default","","",115,[[],["self"]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"parse","","",115,[[["parsestream"]],["result"]]],[11,"peek","","",115,[[["cursor"]],["bool"]]],[11,"display","","",115,[[],["str"]]],[11,"clone","","",116,[[["self"]],["mod"]]],[11,"default","","",116,[[],["self"]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"parse","","",116,[[["parsestream"]],["result"]]],[11,"peek","","",116,[[["cursor"]],["bool"]]],[11,"display","","",116,[[],["str"]]],[11,"clone","","",117,[[["self"]],["move"]]],[11,"default","","",117,[[],["self"]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"parse","","",117,[[["parsestream"]],["result"]]],[11,"peek","","",117,[[["cursor"]],["bool"]]],[11,"display","","",117,[[],["str"]]],[11,"clone","","",118,[[["self"]],["mut"]]],[11,"default","","",118,[[],["self"]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"parse","","",118,[[["parsestream"]],["result"]]],[11,"peek","","",118,[[["cursor"]],["bool"]]],[11,"display","","",118,[[],["str"]]],[11,"clone","","",119,[[["self"]],["override"]]],[11,"default","","",119,[[],["self"]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"parse","","",119,[[["parsestream"]],["result"]]],[11,"peek","","",119,[[["cursor"]],["bool"]]],[11,"display","","",119,[[],["str"]]],[11,"clone","","",120,[[["self"]],["priv"]]],[11,"default","","",120,[[],["self"]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"parse","","",120,[[["parsestream"]],["result"]]],[11,"peek","","",120,[[["cursor"]],["bool"]]],[11,"display","","",120,[[],["str"]]],[11,"clone","","",121,[[["self"]],["pub"]]],[11,"default","","",121,[[],["self"]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["parsestream"]],["result"]]],[11,"peek","","",121,[[["cursor"]],["bool"]]],[11,"display","","",121,[[],["str"]]],[11,"clone","","",122,[[["self"]],["ref"]]],[11,"default","","",122,[[],["self"]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"parse","","",122,[[["parsestream"]],["result"]]],[11,"peek","","",122,[[["cursor"]],["bool"]]],[11,"display","","",122,[[],["str"]]],[11,"clone","","",123,[[["self"]],["return"]]],[11,"default","","",123,[[],["self"]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"parse","","",123,[[["parsestream"]],["result"]]],[11,"peek","","",123,[[["cursor"]],["bool"]]],[11,"display","","",123,[[],["str"]]],[11,"clone","","",124,[[["self"]],["self_"]]],[11,"default","","",124,[[],["self"]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"parse","","",124,[[["parsestream"]],["result"]]],[11,"peek","","",124,[[["cursor"]],["bool"]]],[11,"display","","",124,[[],["str"]]],[11,"clone","","",125,[[["self"]],["static"]]],[11,"default","","",125,[[],["self"]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["parsestream"]],["result"]]],[11,"peek","","",125,[[["cursor"]],["bool"]]],[11,"display","","",125,[[],["str"]]],[11,"clone","","",126,[[["self"]],["struct"]]],[11,"default","","",126,[[],["self"]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"parse","","",126,[[["parsestream"]],["result"]]],[11,"peek","","",126,[[["cursor"]],["bool"]]],[11,"display","","",126,[[],["str"]]],[11,"clone","","",127,[[["self"]],["super"]]],[11,"default","","",127,[[],["self"]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"parse","","",127,[[["parsestream"]],["result"]]],[11,"peek","","",127,[[["cursor"]],["bool"]]],[11,"display","","",127,[[],["str"]]],[11,"clone","","",128,[[["self"]],["trait"]]],[11,"default","","",128,[[],["self"]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"parse","","",128,[[["parsestream"]],["result"]]],[11,"peek","","",128,[[["cursor"]],["bool"]]],[11,"display","","",128,[[],["str"]]],[11,"clone","","",129,[[["self"]],["try"]]],[11,"default","","",129,[[],["self"]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"parse","","",129,[[["parsestream"]],["result"]]],[11,"peek","","",129,[[["cursor"]],["bool"]]],[11,"display","","",129,[[],["str"]]],[11,"clone","","",130,[[["self"]],["type"]]],[11,"default","","",130,[[],["self"]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"parse","","",130,[[["parsestream"]],["result"]]],[11,"peek","","",130,[[["cursor"]],["bool"]]],[11,"display","","",130,[[],["str"]]],[11,"clone","","",131,[[["self"]],["typeof"]]],[11,"default","","",131,[[],["self"]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"parse","","",131,[[["parsestream"]],["result"]]],[11,"peek","","",131,[[["cursor"]],["bool"]]],[11,"display","","",131,[[],["str"]]],[11,"clone","","",132,[[["self"]],["union"]]],[11,"default","","",132,[[],["self"]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"parse","","",132,[[["parsestream"]],["result"]]],[11,"peek","","",132,[[["cursor"]],["bool"]]],[11,"display","","",132,[[],["str"]]],[11,"clone","","",133,[[["self"]],["unsafe"]]],[11,"default","","",133,[[],["self"]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"parse","","",133,[[["parsestream"]],["result"]]],[11,"peek","","",133,[[["cursor"]],["bool"]]],[11,"display","","",133,[[],["str"]]],[11,"clone","","",134,[[["self"]],["unsized"]]],[11,"default","","",134,[[],["self"]]],[11,"to_tokens","","",134,[[["self"],["tokenstream"]]]],[11,"parse","","",134,[[["parsestream"]],["result"]]],[11,"peek","","",134,[[["cursor"]],["bool"]]],[11,"display","","",134,[[],["str"]]],[11,"clone","","",135,[[["self"]],["use"]]],[11,"default","","",135,[[],["self"]]],[11,"to_tokens","","",135,[[["self"],["tokenstream"]]]],[11,"parse","","",135,[[["parsestream"]],["result"]]],[11,"peek","","",135,[[["cursor"]],["bool"]]],[11,"display","","",135,[[],["str"]]],[11,"clone","","",136,[[["self"]],["virtual"]]],[11,"default","","",136,[[],["self"]]],[11,"to_tokens","","",136,[[["self"],["tokenstream"]]]],[11,"parse","","",136,[[["parsestream"]],["result"]]],[11,"peek","","",136,[[["cursor"]],["bool"]]],[11,"display","","",136,[[],["str"]]],[11,"clone","","",137,[[["self"]],["where"]]],[11,"default","","",137,[[],["self"]]],[11,"to_tokens","","",137,[[["self"],["tokenstream"]]]],[11,"parse","","",137,[[["parsestream"]],["result"]]],[11,"peek","","",137,[[["cursor"]],["bool"]]],[11,"display","","",137,[[],["str"]]],[11,"clone","","",138,[[["self"]],["while"]]],[11,"default","","",138,[[],["self"]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"parse","","",138,[[["parsestream"]],["result"]]],[11,"peek","","",138,[[["cursor"]],["bool"]]],[11,"display","","",138,[[],["str"]]],[11,"clone","","",139,[[["self"]],["yield"]]],[11,"default","","",139,[[],["self"]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"parse","","",139,[[["parsestream"]],["result"]]],[11,"peek","","",139,[[["cursor"]],["bool"]]],[11,"display","","",139,[[],["str"]]],[11,"clone","","",140,[[["self"]],["add"]]],[11,"default","","",140,[[],["self"]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"parse","","",140,[[["parsestream"]],["result"]]],[11,"peek","","",140,[[["cursor"]],["bool"]]],[11,"display","","",140,[[],["str"]]],[11,"clone","","",141,[[["self"]],["addeq"]]],[11,"default","","",141,[[],["self"]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"parse","","",141,[[["parsestream"]],["result"]]],[11,"peek","","",141,[[["cursor"]],["bool"]]],[11,"display","","",141,[[],["str"]]],[11,"clone","","",142,[[["self"]],["and"]]],[11,"default","","",142,[[],["self"]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"parse","","",142,[[["parsestream"]],["result"]]],[11,"peek","","",142,[[["cursor"]],["bool"]]],[11,"display","","",142,[[],["str"]]],[11,"clone","","",143,[[["self"]],["andand"]]],[11,"default","","",143,[[],["self"]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"parse","","",143,[[["parsestream"]],["result"]]],[11,"peek","","",143,[[["cursor"]],["bool"]]],[11,"display","","",143,[[],["str"]]],[11,"clone","","",144,[[["self"]],["andeq"]]],[11,"default","","",144,[[],["self"]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"parse","","",144,[[["parsestream"]],["result"]]],[11,"peek","","",144,[[["cursor"]],["bool"]]],[11,"display","","",144,[[],["str"]]],[11,"clone","","",145,[[["self"]],["at"]]],[11,"default","","",145,[[],["self"]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"parse","","",145,[[["parsestream"]],["result"]]],[11,"peek","","",145,[[["cursor"]],["bool"]]],[11,"display","","",145,[[],["str"]]],[11,"clone","","",146,[[["self"]],["bang"]]],[11,"default","","",146,[[],["self"]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"parse","","",146,[[["parsestream"]],["result"]]],[11,"peek","","",146,[[["cursor"]],["bool"]]],[11,"display","","",146,[[],["str"]]],[11,"clone","","",147,[[["self"]],["caret"]]],[11,"default","","",147,[[],["self"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"parse","","",147,[[["parsestream"]],["result"]]],[11,"peek","","",147,[[["cursor"]],["bool"]]],[11,"display","","",147,[[],["str"]]],[11,"clone","","",148,[[["self"]],["careteq"]]],[11,"default","","",148,[[],["self"]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"parse","","",148,[[["parsestream"]],["result"]]],[11,"peek","","",148,[[["cursor"]],["bool"]]],[11,"display","","",148,[[],["str"]]],[11,"clone","","",149,[[["self"]],["colon"]]],[11,"default","","",149,[[],["self"]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"parse","","",149,[[["parsestream"]],["result"]]],[11,"peek","","",149,[[["cursor"]],["bool"]]],[11,"display","","",149,[[],["str"]]],[11,"clone","","",150,[[["self"]],["colon2"]]],[11,"default","","",150,[[],["self"]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"parse","","",150,[[["parsestream"]],["result"]]],[11,"peek","","",150,[[["cursor"]],["bool"]]],[11,"display","","",150,[[],["str"]]],[11,"clone","","",151,[[["self"]],["comma"]]],[11,"default","","",151,[[],["self"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"parse","","",151,[[["parsestream"]],["result"]]],[11,"peek","","",151,[[["cursor"]],["bool"]]],[11,"display","","",151,[[],["str"]]],[11,"clone","","",152,[[["self"]],["div"]]],[11,"default","","",152,[[],["self"]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"parse","","",152,[[["parsestream"]],["result"]]],[11,"peek","","",152,[[["cursor"]],["bool"]]],[11,"display","","",152,[[],["str"]]],[11,"clone","","",153,[[["self"]],["diveq"]]],[11,"default","","",153,[[],["self"]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"parse","","",153,[[["parsestream"]],["result"]]],[11,"peek","","",153,[[["cursor"]],["bool"]]],[11,"display","","",153,[[],["str"]]],[11,"clone","","",154,[[["self"]],["dollar"]]],[11,"default","","",154,[[],["self"]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"parse","","",154,[[["parsestream"]],["result"]]],[11,"peek","","",154,[[["cursor"]],["bool"]]],[11,"display","","",154,[[],["str"]]],[11,"clone","","",155,[[["self"]],["dot"]]],[11,"default","","",155,[[],["self"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"parse","","",155,[[["parsestream"]],["result"]]],[11,"peek","","",155,[[["cursor"]],["bool"]]],[11,"display","","",155,[[],["str"]]],[11,"clone","","",156,[[["self"]],["dot2"]]],[11,"default","","",156,[[],["self"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",156,[[["parsestream"]],["result"]]],[11,"peek","","",156,[[["cursor"]],["bool"]]],[11,"display","","",156,[[],["str"]]],[11,"clone","","",157,[[["self"]],["dot3"]]],[11,"default","","",157,[[],["self"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"parse","","",157,[[["parsestream"]],["result"]]],[11,"peek","","",157,[[["cursor"]],["bool"]]],[11,"display","","",157,[[],["str"]]],[11,"clone","","",158,[[["self"]],["dotdoteq"]]],[11,"default","","",158,[[],["self"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",158,[[["parsestream"]],["result"]]],[11,"peek","","",158,[[["cursor"]],["bool"]]],[11,"display","","",158,[[],["str"]]],[11,"clone","","",159,[[["self"]],["eq"]]],[11,"default","","",159,[[],["self"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["parsestream"]],["result"]]],[11,"peek","","",159,[[["cursor"]],["bool"]]],[11,"display","","",159,[[],["str"]]],[11,"clone","","",160,[[["self"]],["eqeq"]]],[11,"default","","",160,[[],["self"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",160,[[["parsestream"]],["result"]]],[11,"peek","","",160,[[["cursor"]],["bool"]]],[11,"display","","",160,[[],["str"]]],[11,"clone","","",161,[[["self"]],["ge"]]],[11,"default","","",161,[[],["self"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"parse","","",161,[[["parsestream"]],["result"]]],[11,"peek","","",161,[[["cursor"]],["bool"]]],[11,"display","","",161,[[],["str"]]],[11,"clone","","",162,[[["self"]],["gt"]]],[11,"default","","",162,[[],["self"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",162,[[["parsestream"]],["result"]]],[11,"peek","","",162,[[["cursor"]],["bool"]]],[11,"display","","",162,[[],["str"]]],[11,"clone","","",163,[[["self"]],["le"]]],[11,"default","","",163,[[],["self"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["parsestream"]],["result"]]],[11,"peek","","",163,[[["cursor"]],["bool"]]],[11,"display","","",163,[[],["str"]]],[11,"clone","","",164,[[["self"]],["lt"]]],[11,"default","","",164,[[],["self"]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"parse","","",164,[[["parsestream"]],["result"]]],[11,"peek","","",164,[[["cursor"]],["bool"]]],[11,"display","","",164,[[],["str"]]],[11,"clone","","",165,[[["self"]],["muleq"]]],[11,"default","","",165,[[],["self"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"parse","","",165,[[["parsestream"]],["result"]]],[11,"peek","","",165,[[["cursor"]],["bool"]]],[11,"display","","",165,[[],["str"]]],[11,"clone","","",166,[[["self"]],["ne"]]],[11,"default","","",166,[[],["self"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"parse","","",166,[[["parsestream"]],["result"]]],[11,"peek","","",166,[[["cursor"]],["bool"]]],[11,"display","","",166,[[],["str"]]],[11,"clone","","",167,[[["self"]],["or"]]],[11,"default","","",167,[[],["self"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"parse","","",167,[[["parsestream"]],["result"]]],[11,"peek","","",167,[[["cursor"]],["bool"]]],[11,"display","","",167,[[],["str"]]],[11,"clone","","",168,[[["self"]],["oreq"]]],[11,"default","","",168,[[],["self"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",168,[[["parsestream"]],["result"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"clone","","",169,[[["self"]],["oror"]]],[11,"default","","",169,[[],["self"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",169,[[["parsestream"]],["result"]]],[11,"peek","","",169,[[["cursor"]],["bool"]]],[11,"display","","",169,[[],["str"]]],[11,"clone","","",170,[[["self"]],["pound"]]],[11,"default","","",170,[[],["self"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"parse","","",170,[[["parsestream"]],["result"]]],[11,"peek","","",170,[[["cursor"]],["bool"]]],[11,"display","","",170,[[],["str"]]],[11,"clone","","",171,[[["self"]],["question"]]],[11,"default","","",171,[[],["self"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"parse","","",171,[[["parsestream"]],["result"]]],[11,"peek","","",171,[[["cursor"]],["bool"]]],[11,"display","","",171,[[],["str"]]],[11,"clone","","",172,[[["self"]],["rarrow"]]],[11,"default","","",172,[[],["self"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["parsestream"]],["result"]]],[11,"peek","","",172,[[["cursor"]],["bool"]]],[11,"display","","",172,[[],["str"]]],[11,"clone","","",173,[[["self"]],["larrow"]]],[11,"default","","",173,[[],["self"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",173,[[["parsestream"]],["result"]]],[11,"peek","","",173,[[["cursor"]],["bool"]]],[11,"display","","",173,[[],["str"]]],[11,"clone","","",174,[[["self"]],["rem"]]],[11,"default","","",174,[[],["self"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"parse","","",174,[[["parsestream"]],["result"]]],[11,"peek","","",174,[[["cursor"]],["bool"]]],[11,"display","","",174,[[],["str"]]],[11,"clone","","",175,[[["self"]],["remeq"]]],[11,"default","","",175,[[],["self"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"parse","","",175,[[["parsestream"]],["result"]]],[11,"peek","","",175,[[["cursor"]],["bool"]]],[11,"display","","",175,[[],["str"]]],[11,"clone","","",176,[[["self"]],["fatarrow"]]],[11,"default","","",176,[[],["self"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["parsestream"]],["result"]]],[11,"peek","","",176,[[["cursor"]],["bool"]]],[11,"display","","",176,[[],["str"]]],[11,"clone","","",177,[[["self"]],["semi"]]],[11,"default","","",177,[[],["self"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"parse","","",177,[[["parsestream"]],["result"]]],[11,"peek","","",177,[[["cursor"]],["bool"]]],[11,"display","","",177,[[],["str"]]],[11,"clone","","",178,[[["self"]],["shl"]]],[11,"default","","",178,[[],["self"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"parse","","",178,[[["parsestream"]],["result"]]],[11,"peek","","",178,[[["cursor"]],["bool"]]],[11,"display","","",178,[[],["str"]]],[11,"clone","","",179,[[["self"]],["shleq"]]],[11,"default","","",179,[[],["self"]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"parse","","",179,[[["parsestream"]],["result"]]],[11,"peek","","",179,[[["cursor"]],["bool"]]],[11,"display","","",179,[[],["str"]]],[11,"clone","","",180,[[["self"]],["shr"]]],[11,"default","","",180,[[],["self"]]],[11,"to_tokens","","",180,[[["self"],["tokenstream"]]]],[11,"parse","","",180,[[["parsestream"]],["result"]]],[11,"peek","","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"clone","","",181,[[["self"]],["shreq"]]],[11,"default","","",181,[[],["self"]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"parse","","",181,[[["parsestream"]],["result"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"clone","","",182,[[["self"]],["star"]]],[11,"default","","",182,[[],["self"]]],[11,"to_tokens","","",182,[[["self"],["tokenstream"]]]],[11,"parse","","",182,[[["parsestream"]],["result"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"clone","","",183,[[["self"]],["sub"]]],[11,"default","","",183,[[],["self"]]],[11,"to_tokens","","",183,[[["self"],["tokenstream"]]]],[11,"parse","","",183,[[["parsestream"]],["result"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"clone","","",184,[[["self"]],["subeq"]]],[11,"default","","",184,[[],["self"]]],[11,"to_tokens","","",184,[[["self"],["tokenstream"]]]],[11,"parse","","",184,[[["parsestream"]],["result"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"clone","","",185,[[["self"]],["tilde"]]],[11,"default","","",185,[[],["self"]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"parse","","",185,[[["parsestream"]],["result"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"clone","","",186,[[["self"]],["brace"]]],[11,"default","","",186,[[],["self"]]],[11,"surround","","",186,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",187,[[["self"]],["bracket"]]],[11,"default","","",187,[[],["self"]]],[11,"surround","","",187,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",188,[[["self"]],["paren"]]],[11,"default","","",188,[[],["self"]]],[11,"surround","","",188,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",189,[[["self"]],["group"]]],[11,"default","","",189,[[],["self"]]],[11,"surround","","",189,[[["self"],["tokenstream"],["f"]]]],[11,"parse","syn","",196,[[["parsestream"]],["result"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"from","","",196,[[["self_"]],["ident"]]],[11,"from","","",196,[[["capself"]],["ident"]]],[11,"from","","",196,[[["super"]],["ident"]]],[11,"from","","",196,[[["crate"]],["ident"]]],[11,"from","","",196,[[["extern"]],["ident"]]],[11,"from","","",196,[[["underscore"]],["ident"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse","","",67,[[["parsestream"]],["result"]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["itermut",["field"]]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"parse","","",68,[[["parsestream"]],["result"]]],[11,"parse","","",17,[[["parsestream"]],["result"]]],[11,"parse","","",69,[[["parsestream"]],["result"]]],[11,"parse","","",20,[[["parsestream"]],["result"]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprbox"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"clone","","",198,[[["self"]],["exprinplace"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"clone","","",199,[[["self"]],["exprarray"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"clone","","",200,[[["self"]],["exprmethodcall"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"clone","","",201,[[["self"]],["exprtuple"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprtype"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"clone","","",203,[[["self"]],["exprlet"]]],[11,"from","","",68,[[["exprlet"]],["expr"]]],[11,"clone","","",204,[[["self"]],["exprif"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"clone","","",205,[[["self"]],["exprwhile"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"clone","","",206,[[["self"]],["exprforloop"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"clone","","",207,[[["self"]],["exprloop"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"clone","","",208,[[["self"]],["exprmatch"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"clone","","",209,[[["self"]],["exprclosure"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"clone","","",210,[[["self"]],["exprunsafe"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"clone","","",211,[[["self"]],["exprblock"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"clone","","",212,[[["self"]],["exprassign"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"clone","","",213,[[["self"]],["exprassignop"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"clone","","",214,[[["self"]],["exprrange"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"clone","","",215,[[["self"]],["exprreference"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"clone","","",216,[[["self"]],["exprbreak"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"clone","","",217,[[["self"]],["exprcontinue"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"clone","","",218,[[["self"]],["exprreturn"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"clone","","",219,[[["self"]],["exprmacro"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"clone","","",220,[[["self"]],["exprstruct"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"clone","","",221,[[["self"]],["exprrepeat"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"clone","","",222,[[["self"]],["exprgroup"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"clone","","",223,[[["self"]],["exprtry"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"clone","","",224,[[["self"]],["exprasync"]]],[11,"from","","",68,[[["exprasync"]],["expr"]]],[11,"clone","","",225,[[["self"]],["exprtryblock"]]],[11,"from","","",68,[[["exprtryblock"]],["expr"]]],[11,"clone","","",226,[[["self"]],["expryield"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"parse","","",23,[[["parsestream"]],["result"]]],[11,"parse","","",70,[[["parsestream"]],["result"]]],[11,"parse","","",24,[[["parsestream"]],["result"]]],[11,"parse","","",21,[[["parsestream"]],["result"]]],[11,"parse","","",29,[[["parsestream"]],["result"]]],[11,"parse","","",72,[[["parsestream"]],["result"]]],[11,"parse","","",28,[[["parsestream"]],["result"]]],[11,"parse","","",71,[[["parsestream"]],["result"]]],[11,"parse","","",22,[[["parsestream"]],["result"]]],[11,"parse","","",30,[[["parsestream"]],["result"]]],[11,"parse","","",73,[[["parsestream"]],["result"]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",227,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"default","","",23,[[],["generics"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"clone","","",227,[[["self"]],["implgenerics"]]],[11,"clone","","",228,[[["self"]],["typegenerics"]]],[11,"clone","","",229,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",228,[[["self"]],["turbofish"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"parse","","",31,[[["parsestream"]],["result"]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"new","","Panics",31,[[["str"],["span"]],["self"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"parse","","",76,[[["parsestream"]],["result"]]],[11,"parse","","",190,[[["parsestream"]],["result"]]],[11,"parse","","",191,[[["parsestream"]],["result"]]],[11,"parse","","",192,[[["parsestream"]],["result"]]],[11,"parse","","",193,[[["parsestream"]],["result"]]],[11,"parse","","",194,[[["parsestream"]],["result"]]],[11,"parse","","",195,[[["parsestream"]],["result"]]],[11,"parse","","",32,[[["parsestream"]],["result"]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",191,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",192,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",193,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",194,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",195,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",190,[[["self"]],["litstr"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"clone","","",191,[[["self"]],["litbytestr"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"clone","","",192,[[["self"]],["litbyte"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"clone","","",193,[[["self"]],["litchar"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"clone","","",194,[[["self"]],["litint"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"clone","","",195,[[["self"]],["litfloat"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"new","","",190,[[["str"],["span"]],["self"]]],[11,"value","","",190,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",190,[[["self"]],["result",["error"]]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"set_span","","",190,[[["self"],["span"]]]],[11,"new","","",191,N],[11,"value","","",191,[[["self"]],["vec",["u8"]]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"set_span","","",191,[[["self"],["span"]]]],[11,"new","","",192,[[["u8"],["span"]],["self"]]],[11,"value","","",192,[[["self"]],["u8"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"set_span","","",192,[[["self"],["span"]]]],[11,"new","","",193,[[["char"],["span"]],["self"]]],[11,"value","","",193,[[["self"]],["char"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"set_span","","",193,[[["self"],["span"]]]],[11,"new","","",194,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",194,[[["self"]],["u64"]]],[11,"suffix","","",194,[[["self"]],["intsuffix"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"set_span","","",194,[[["self"],["span"]]]],[11,"new","","",195,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",195,[[["self"]],["f64"]]],[11,"suffix","","",195,[[["self"]],["floatsuffix"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"set_span","","",195,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"parse","","",34,[[["parsestream"]],["result"]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"parse","","",38,[[["parsestream"]],["result"]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"parse","","",80,[[["parsestream"]],["result"]]],[11,"parse","","",81,[[["parsestream"]],["result"]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"parse","","",84,[[["parsestream"]],["result"]]],[11,"without_plus","","In some positions, types may not contain the `+` character, to disambiguate them. For example in the expression `1 as T`, T may not contain a `+` character.",84,[[["parsestream"]],["result"]]],[11,"parse","","",52,[[["parsestream"]],["result"]]],[11,"parse","","",41,[[["parsestream"]],["result"]]],[11,"parse","","",50,[[["parsestream"]],["result"]]],[11,"parse","","",51,[[["parsestream"]],["result"]]],[11,"parse","","",42,[[["parsestream"]],["result"]]],[11,"parse","","",47,[[["parsestream"]],["result"]]],[11,"parse","","",45,[[["parsestream"]],["result"]]],[11,"parse","","",54,[[["parsestream"]],["result"]]],[11,"parse","","",46,[[["parsestream"]],["result"]]],[11,"parse","","",49,[[["parsestream"]],["result"]]],[11,"without_plus","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",83,[[["parsestream"],["bool"]],["result"]]],[11,"parse","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",53,[[["parsestream"]],["result"]]],[11,"without_plus","","",53,[[["parsestream"]],["result"]]],[11,"parse","","",53,[[["parsestream"],["bool"]],["result"]]],[11,"parse","","",44,[[["parsestream"]],["result"]]],[11,"parse","","",43,[[["parsestream"]],["result"]]],[11,"parse","","",48,[[["parsestream"]],["result"]]],[11,"parse","","",40,[[["parsestream"]],["result"]]],[11,"parse","","",82,[[["parsestream"]],["result"]]],[11,"parse","","",39,[[["parsestream"]],["result"]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"parse","","",60,[[["parsestream"]],["result"]]],[11,"parse","","",85,[[["parsestream"]],["result"]]],[11,"parse","","",56,[[["parsestream"]],["result"]]],[11,"parse","","",59,[[["parsestream"]],["result"]]],[11,"parse","","",61,[[["parsestream"]],["result"]]],[11,"parse","","",57,[[["parsestream"]],["result"]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its segments.",60,[[["parsestream"]],["result"]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"default","","",86,[[],["self"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",56,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",57,[[["self"]],["binding"]]],[11,"clone","","",58,[[["self"]],["constraint"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",230,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",230,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",230,[[["self"]],["cursor"]]],[11,"clone","","",231,[[["self"]],["cursor"]]],[11,"eq","","",231,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",231,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",231,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",231,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",231,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",231,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",231,[[["self"]],["span"]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign types.",N,N],[8,"IdentExt","syn::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",232,[[["parsestream"]],["result"]]],[11,"parse_any","syn","",196,[[["parsestream"]],["result"]]],[0,"punctuated","","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",233,N],[13,"End","","",233,N],[11,"to_tokens","","",234,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",233,[[["self"],["tokenstream"]]]],[11,"clone","","",234,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",234,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",234,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",234,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",234,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",234,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",234,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",234,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",234,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",234,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",234,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",234,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",234,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",234,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",234,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",234,[[["self"],["usize"],["t"]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",234,[[["parsestream"]],["result"]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, with optional trailing punctuation.",234,N],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by punctuation of type `P`, not accepting trailing punctuation.",234,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, not accepting trailing punctuation.",234,N],[11,"from_iter","","",234,[[["i"]],["self"]]],[11,"extend","","",234,[[["self"],["i"]]]],[11,"from_iter","","",234,[[["i"]],["self"]]],[11,"extend","","",234,[[["self"],["i"]]]],[11,"into_iter","","",234,N],[11,"default","","",234,[[],["self"]]],[11,"next","","",235,[[["self"]],["option"]]],[11,"len","","",235,[[["self"]],["usize"]]],[11,"next","","",236,[[["self"]],["option"]]],[11,"len","","",236,[[["self"]],["usize"]]],[11,"next","","",237,[[["self"]],["option"]]],[11,"len","","",237,[[["self"]],["usize"]]],[11,"next","","",238,[[["self"]],["option"]]],[11,"len","","",238,[[["self"]],["usize"]]],[11,"next","","",239,[[["self"]],["option"]]],[11,"len","","",239,[[["self"]],["usize"]]],[11,"next","","",240,[[["self"]],["option"]]],[11,"len","","",240,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",233,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",233,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",233,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",233,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",233,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",233,N],[11,"index","","",234,N],[11,"index_mut","","",234,N],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",241,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_constraint","","",N,[[["v"],["constraint"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",242,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",242,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",242,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",242,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",242,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",242,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",242,[[["self"],["binop"]]]],[11,"visit_binding","","",242,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",242,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",242,[[["self"],["constparam"]]]],[11,"visit_constraint","","",242,[[["self"],["constraint"]]]],[11,"visit_data","","",242,[[["self"],["data"]]]],[11,"visit_data_enum","","",242,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",242,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",242,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",242,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",242,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",242,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",242,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",242,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",242,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",242,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",242,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",242,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",242,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",242,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",242,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",242,[[["self"],["field"]]]],[11,"visit_fields","","",242,[[["self"],["fields"]]]],[11,"visit_fields_named","","",242,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",242,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",242,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",242,[[["self"],["genericparam"]]]],[11,"visit_generics","","",242,[[["self"],["generics"]]]],[11,"visit_ident","","",242,[[["self"],["ident"]]]],[11,"visit_index","","",242,[[["self"],["index"]]]],[11,"visit_lifetime","","",242,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",242,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",242,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",242,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",242,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",242,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",242,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",242,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",242,[[["self"],["litint"]]]],[11,"visit_lit_str","","",242,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",242,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",242,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",242,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",242,[[["self"],["member"]]]],[11,"visit_meta","","",242,[[["self"],["meta"]]]],[11,"visit_meta_list","","",242,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",242,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",242,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",242,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",242,[[["self"],["path"]]]],[11,"visit_path_arguments","","",242,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",242,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",242,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",242,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",242,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",242,[[["self"],["qself"]]]],[11,"visit_return_type","","",242,[[["self"],["returntype"]]]],[11,"visit_span","","",242,[[["self"],["span"]]]],[11,"visit_trait_bound","","",242,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",242,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",242,[[["self"],["type"]]]],[11,"visit_type_array","","",242,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",242,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",242,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",242,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",242,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",242,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",242,[[["self"],["typenever"]]]],[11,"visit_type_param","","",242,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",242,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",242,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",242,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",242,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",242,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",242,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",242,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",242,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",242,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",242,[[["self"],["unop"]]]],[11,"visit_variant","","",242,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",242,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",242,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",242,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",242,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",242,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",242,[[["self"],["wherepredicate"]]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input tokens.",N,N],[3,"Lookahead1","","Support for checking the next token in a stream to decide how to parse.",N,N],[3,"ParseBuffer","","Cursor position within a buffered token stream.",N,N],[3,"StepCursor","","Cursor state associated with speculative parsing.",N,N],[6,"Result","","The result of a Syn parser.",N,N],[6,"ParseStream","","Input to a Syn parser function.",N,N],[8,"Peek","","Types that can be parsed by looking at just one token.",N,N],[8,"Parse","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",243,[[["parsestream"]],["result"]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",244,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",244,[[["self"],["tokenstream"]],["result"]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",244,[[["self"],["tokenstream"]],["result"]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",244,[[["self"],["str"]],["result"]]],[11,"drop","","",245,[[["self"]]]],[11,"clone","","",246,[[["self"]],["stepcursor"]]],[11,"deref","","",246,N],[11,"error","","Triggers an error at the current position of the parse stream.",246,[[["self"],["t"]],["error"]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the position of our parse stream past it.",245,[[["self"]],["result"]]],[11,"call","","Calls the given parser function to parse a syntax tree node of type `T` from this stream.",245,N],[11,"peek","","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",245,[[["self"],["t"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",245,[[["self"],["t"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",245,[[["self"],["t"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",245,N],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",245,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this stream and building an error message if it is not one of a set of expected tokens.",245,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either the original or the fork does not advance the position of the other.",245,[[["self"]],["self"]]],[11,"error","","Triggers an error at the current position of the parse stream.",245,[[["self"],["t"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream, advancing the position of this stream only if parsing succeeds.",245,[[["self"],["f"]],["result"]]],[11,"cursor","","Provides low-level access to the token representation underlying this parse stream.",245,[[["self"]],["cursor"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"clone","","",247,[[["self"]],["error"]]],[11,"new","","Usually the [`ParseStream::error`] method will be used instead, which automatically uses the correct span from the current position of the parse stream.",247,[[["span"],["t"]],["self"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",247,[[["self"]],["tokenstream"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"description","","",247,[[["self"]],["str"]]],[11,"from","","",247,[[["lexerror"]],["self"]]],[14,"parenthesized","syn","Parse a set of parentheses and expose their content to subsequent parsers.",N,N],[14,"braced","","Parse a set of curly braces and expose their content to subsequent parsers.",N,N],[14,"bracketed","","Parse a set of square brackets and expose their content to subsequent parsers.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[14,"custom_keyword","","Define a type that supports parsing and printing a given identifier as if it were a keyword.",N,N],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a compile error if the tokens fail to parse.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",196,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",196,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",196,N],[11,"clone","","",196,[[["self"]],["ident"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",196,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",196,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",196,N],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",196,[[["self"],["ident"]],["bool"]]],[11,"eq","","",196,[[["self"],["t"]],["bool"]]],[11,"to_tokens","","",196,N],[11,"visit_abi","syn::visit","",242,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",242,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",242,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",242,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",242,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",242,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",242,[[["self"],["binop"]]]],[11,"visit_binding","","",242,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",242,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",242,[[["self"],["constparam"]]]],[11,"visit_constraint","","",242,[[["self"],["constraint"]]]],[11,"visit_data","","",242,[[["self"],["data"]]]],[11,"visit_data_enum","","",242,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",242,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",242,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",242,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",242,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",242,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",242,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",242,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",242,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",242,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",242,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",242,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",242,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",242,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",242,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",242,[[["self"],["field"]]]],[11,"visit_fields","","",242,[[["self"],["fields"]]]],[11,"visit_fields_named","","",242,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",242,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",242,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",242,[[["self"],["genericparam"]]]],[11,"visit_generics","","",242,[[["self"],["generics"]]]],[11,"visit_ident","","",242,[[["self"],["ident"]]]],[11,"visit_index","","",242,[[["self"],["index"]]]],[11,"visit_lifetime","","",242,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",242,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",242,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",242,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",242,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",242,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",242,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",242,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",242,[[["self"],["litint"]]]],[11,"visit_lit_str","","",242,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",242,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",242,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",242,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",242,[[["self"],["member"]]]],[11,"visit_meta","","",242,[[["self"],["meta"]]]],[11,"visit_meta_list","","",242,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",242,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",242,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",242,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",242,[[["self"],["path"]]]],[11,"visit_path_arguments","","",242,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",242,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",242,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",242,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",242,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",242,[[["self"],["qself"]]]],[11,"visit_return_type","","",242,[[["self"],["returntype"]]]],[11,"visit_span","","",242,[[["self"],["span"]]]],[11,"visit_trait_bound","","",242,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",242,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",242,[[["self"],["type"]]]],[11,"visit_type_array","","",242,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",242,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",242,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",242,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",242,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",242,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",242,[[["self"],["typenever"]]]],[11,"visit_type_param","","",242,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",242,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",242,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",242,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",242,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",242,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",242,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",242,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",242,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",242,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",242,[[["self"],["unop"]]]],[11,"visit_variant","","",242,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",242,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",242,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",242,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",242,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",242,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",242,[[["self"],["wherepredicate"]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",248,[[["self"],["t"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse stream.",248,[[["self"]],["error"]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Existential"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprLet"],[3,"ExprIf"],[3,"ExprWhile"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprAsync"],[3,"ExprTryBlock"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[8,"Visit"],[8,"Parse"],[8,"Parser"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Lookahead1"]]};
searchIndex["tabwriter"]={"doc":"This crate provides an implementation of  elastic tabstops.  It is a minimal port of Go's  tabwriter package.  Namely, its main mode of operation is to wrap a `Writer` and implement  elastic tabstops for the text written to the wrapped `Writer`.","items":[[3,"TabWriter","tabwriter","TabWriter wraps an arbitrary writer and aligns tabbed output.",N,N],[3,"IntoInnerError","","An error returned by `into_inner`.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `TabWriter` from an existing `Writer`.",0,[[["w"]],["tabwriter"]]],[11,"minwidth","","Set the minimum width of each column. That is, all columns will have at least the size given here. If a column is smaller than `minwidth`, then it is passed with spaces.",0,[[["self"],["usize"]],["tabwriter"]]],[11,"padding","","Set the padding between columns. All columns will be separated by at least the number of spaces indicated by `padding`. If `padding` is zero, then columns may run up against each other without any separation.",0,[[["self"],["usize"]],["tabwriter"]]],[11,"into_inner","","Unwraps this `TabWriter`, returning the underlying writer.",0,[[["self"]],["result",["intoinnererror"]]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"error","","Returns the error which caused the `into_error()` call to fail.",1,[[["self"]],["error"]]],[11,"into_inner","","Returns the `TabWriter` instance which generated the error.",1,[[["self"]],["w"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]]],"paths":[[3,"TabWriter"],[3,"IntoInnerError"]]};
searchIndex["textwrap"]={"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",N,N],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",N,N],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",N,N],[12,"width","","The width in columns at which the text will be wrapped.",0,N],[12,"initial_indent","","Indentation used for the first line of output.",0,N],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,N],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,N],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,N],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",N,N],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",N,N],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["string"]]],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["vec",["cow"]]]],[5,"wrap_iter","","Lazily wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["intowrapiter",["hyphensplitter"]]]],[5,"indent","","Add prefix to each non-empty line.",N,[[["str"],["str"]],["string"]]],[5,"dedent","","Removes common leading whitespace from each line.",N,[[["str"]],["string"]]],[8,"WordSplitter","","An interface for splitting words.",N,N],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,[[["self"],["str"]],["vec"]]],[11,"clone","","",2,[[["self"]],["nohyphenation"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"split","","",2,[[["self"],["str"]],["vec"]]],[11,"clone","","",3,[[["self"]],["hyphensplitter"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"split","","",3,[[["self"],["str"]],["vec"]]],[11,"clone","","",0,[[["self"]],["wrapper"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,[[["usize"]],["wrapper",["hyphensplitter"]]]],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,[[["usize"],["s"]],["wrapper"]]],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,[[["self"],["str"]],["wrapper"]]],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,[[["self"],["str"]],["wrapper"]]],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,[[["self"],["bool"]],["wrapper"]]],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["string"]]],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["vec",["cow"]]]],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["wrapiter"]]],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["intowrapiter"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["cow"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"next","","",5,[[["self"]],["option",["cow"]]]]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["box"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"default","","",3,[[],["cachedthreadlocal"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",3,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,[[["self"]]]],[11,"into_iter","","",3,[[["self"]],["cachedintoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["toml"]={"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",N,N],[3,"Datetime","toml::value","A parsed TOML datetime value",N,N],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",N,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","Represents a TOML string",0,N],[13,"Integer","","Represents a TOML integer",0,N],[13,"Float","","Represents a TOML float",0,N],[13,"Boolean","","Represents a TOML boolean",0,N],[13,"Datetime","","Represents a TOML datetime",0,N],[13,"Array","","Represents a TOML array",0,N],[13,"Table","","Represents a TOML table",0,N],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[8,"Index","","Types that can be used to index a `toml::Value`",N,N],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,[[["t"]],["result",["value","error"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,[[["self"]],["result",["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",0,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Tests whether this value is an integer.",0,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",0,[[["self"]],["option",["f64"]]]],[11,"is_float","","Tests whether this value is a float.",0,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",0,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",0,[[["self"]],["option",["str"]]]],[11,"is_str","","Tests if this value is a string.",0,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,[[["self"]],["option",["datetime"]]]],[11,"is_datetime","","Tests whether this value is a datetime.",0,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"is_array","","Tests whether this value is an array.",0,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"is_table","","Tests whether this value is a table.",0,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",0,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,[[["self"]],["str"]]],[11,"index","","",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","",0,[[["self"],["i"]],["value"]]],[11,"from","","",0,[[["str"]],["value"]]],[11,"from","","",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["btreemap"]],["value"]]],[11,"from","","",0,[[["hashmap"]],["value"]]],[11,"from","","",0,[[["string"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["datetime"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["value"]]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"into_deserializer","","",0,[[["self"]],["self"]]],[11,"eq","","",1,[[["self"],["datetime"]],["bool"]]],[11,"ne","","",1,[[["self"],["datetime"]],["bool"]]],[11,"clone","","",1,[[["self"]],["datetime"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["datetimeparseerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["datetime","datetimeparseerror"]]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result",["datetime"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[0,"ser","toml","Serializing Rust structures into TOML.",N,N],[3,"Serializer","toml::ser","Serialization implementation for TOML.",N,N],[4,"Error","","Errors that can occur when serializing a type.",N,N],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",3,N],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",3,N],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",3,N],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",3,N],[13,"DateInvalid","","A serialized date was invalid.",3,N],[13,"NumberInvalid","","A serialized number was invalid.",3,N],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",3,N],[13,"Custom","","A custom error which could be generated when serializing a particular type.",3,N],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",N,[[["t"]],["result",["vec","error"]]]],[5,"to_string","","Serialize the given data structure as a String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",N,[[["i"],["s"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"ne","","",3,[[["self"],["error"]],["bool"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",4,[[["string"]],["serializer"]]],[11,"pretty","","Instantiate a \"pretty\" formatter",4,[[["string"]],["serializer"]]],[11,"pretty_string","","Enable or Disable pretty strings",4,[[["self"],["bool"]],["self"]]],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",4,[[["self"],["bool"]],["self"]]],[11,"pretty_array","","Enable or Disable pretty arrays",4,[[["self"],["bool"]],["self"]]],[11,"pretty_array_indent","","Set the indent for pretty arrays",4,[[["self"],["usize"]],["self"]]],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",4,[[["self"],["bool"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"custom","","",3,[[["t"]],["error"]]],[0,"de","toml","Deserializing TOML into Rust structures.",N,N],[3,"Error","toml::de","Errors that can occur when deserializing a type.",N,N],[3,"Deserializer","","Deserialization implementation for TOML.",N,N],[5,"from_slice","","Deserializes a byte slice into a type.",N,N],[5,"from_str","","Deserializes a string into a type.",N,[[["str"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["error"]]],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",6,[[["str"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",6,[[["self"]],["result",["error"]]]],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",6,[[["self"],["bool"]]]],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",5,[[["self"]],["option"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"custom","","",5,[[["t"]],["error"]]],[14,"toml","toml","Construct a [`toml::Value`] from TOML syntax.",N,N]],"paths":[[4,"Value"],[3,"Datetime"],[3,"DatetimeParseError"],[4,"Error"],[3,"Serializer"],[3,"Error"],[3,"Deserializer"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unicode_bidi"]={"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",N,N],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,N],[12,"level","","The paragraph embedding level.",0,N],[3,"InitialInfo","","Initial bidi information of the text.",N,N],[12,"text","","The text",1,N],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,N],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,N],[3,"BidiInfo","","Bidi information of the text.",N,N],[12,"text","","The text",2,N],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,N],[12,"levels","","The directional embedding level of each byte in the text.",2,N],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,N],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",N,N],[13,"AL","","",3,N],[13,"AN","","",3,N],[13,"B","","",3,N],[13,"BN","","",3,N],[13,"CS","","",3,N],[13,"EN","","",3,N],[13,"ES","","",3,N],[13,"ET","","",3,N],[13,"FSI","","",3,N],[13,"L","","",3,N],[13,"LRE","","",3,N],[13,"LRI","","",3,N],[13,"LRO","","",3,N],[13,"NSM","","",3,N],[13,"ON","","",3,N],[13,"PDF","","",3,N],[13,"PDI","","",3,N],[13,"R","","",3,N],[13,"RLE","","",3,N],[13,"RLI","","",3,N],[13,"RLO","","",3,N],[13,"S","","",3,N],[13,"WS","","",3,N],[5,"bidi_class","","Find the `BidiClass` of a single char.",N,[[["char"]],["bidiclass"]]],[0,"deprecated","","This module holds deprecated assets only.",N,N],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",N,N],[0,"format_chars","unicode_bidi","Directional Formatting Characters",N,N],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",N,N],[17,"LRM","","LEFT-TO-RIGHT MARK",N,N],[17,"RLM","","RIGHT-TO-LEFT MARK",N,N],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",N,N],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",N,N],[17,"FSI","","FIRST STRONG ISOLATE",N,N],[17,"PDI","","POP DIRECTIONAL ISOLATE",N,N],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",N,N],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",N,N],[17,"PDF","","POP DIRECTIONAL FORMATTING",N,N],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",N,N],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",N,N],[0,"level","unicode_bidi","Bidi Embedding Level",N,N],[3,"Level","unicode_bidi::level","Embedding Level",N,N],[4,"Error","","Errors that can occur on Level creation or mutation",N,N],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,N],[5,"has_rtl","","If levels has any RTL (odd) level",N,N],[17,"LTR_LEVEL","","",N,N],[17,"RTL_LEVEL","","",N,N],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",N,N],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",N,N],[11,"clone","","",5,[[["self"]],["level"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",5,[[["self"],["level"]],["ordering"]]],[11,"eq","","",5,[[["self"],["level"]],["bool"]]],[11,"ne","","",5,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["level"]],["bool"]]],[11,"le","","",5,[[["self"],["level"]],["bool"]]],[11,"gt","","",5,[[["self"],["level"]],["bool"]]],[11,"ge","","",5,[[["self"],["level"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["error"]],["bool"]]],[11,"ltr","","New LTR level with smallest number value (0).",5,[[],["level"]]],[11,"rtl","","New RTL level with smallest number value (1).",5,[[],["level"]]],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,[[],["u8"]]],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,[[],["u8"]]],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,[[["u8"]],["result",["level","error"]]]],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,[[["u8"]],["result",["level","error"]]]],[11,"number","","The level number.",5,[[["self"]],["u8"]]],[11,"is_ltr","","If this level is left-to-right.",5,[[["self"]],["bool"]]],[11,"is_rtl","","If this level is right-to-left.",5,[[["self"]],["bool"]]],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,[[["self"],["u8"]],["result",["error"]]]],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,[[["self"]],["result",["level","error"]]]],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,[[["self"]],["result",["level","error"]]]],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,[[["self"]],["bidiclass"]]],[11,"vec","","",5,N],[11,"into","","Convert to the level number",5,[[["self"]],["u8"]]],[11,"from","","Create level by number",5,[[["u8"]],["level"]]],[11,"eq","","",5,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["string"]],["bool"]]],[11,"clone","unicode_bidi","",3,[[["self"]],["bidiclass"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["bidiclass"]],["bool"]]],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",N,N],[17,"UNICODE_VERSION","","The Unicode version of data",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["paragraphinfo"]],["bool"]]],[11,"eq","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"ne","","",1,[[["self"],["initialinfo"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,[[["str"],["option",["level"]]],["initialinfo"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["bidiinfo"]],["bool"]]],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,[[["str"],["option",["level"]]],["bidiinfo"]]],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["vec",["level"]]]],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,[[["self"],["paragraphinfo"],["range",["usize"]]],["cow",["str"]]]],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,N],[11,"has_rtl","","If processed text has any computed RTL levels",2,[[["self"]],["bool"]]]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"]={"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",N,N],[3,"Recompositions","","External iterator for a string recomposition's characters.",N,N],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",N,N],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",N,N],[13,"Yes","","The text is definitely normalized.",0,N],[13,"No","","The text is definitely not normalized.",0,N],[13,"Maybe","","The text may be normalized.",0,N],[5,"is_nfc","","Authoritatively check if a string is in NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",N,[[["i"]],["isnormalized"]]],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd","","Authoritatively check if a string is in NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",N,[[["i"]],["isnormalized"]]],[11,"clone","","",1,[[["self"]],["decompositions"]]],[11,"next","","",1,[[["self"]],["option",["char"]]]],[11,"size_hint","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["recompositions"]]],[11,"next","","",2,[[["self"]],["option",["char"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["isnormalized"]],["bool"]]],[11,"next","","",3,[[["self"]],["option",["char"]]]],[0,"char","","Methods for composing and decomposing characters.",N,N],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",N,[[["char"],["char"]],["option",["char"]]]],[5,"canonical_combining_class","","",N,[[["char"]],["u8"]]],[5,"is_combining_mark","","",N,[[["char"]],["bool"]]],[17,"UNICODE_VERSION","unicode_normalization","",N,N],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",N,N],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,[[["self"]],["streamsafe"]]]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_width"]={"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",N,N],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",N,N],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",N,N],[10,"width","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]],[10,"width_cjk","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["url"]={"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",N,N],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",N,N],[12,"host","","",0,N],[12,"port","","",0,N],[3,"SocketAddrs","","Socket addresses for an URL.",N,N],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",N,N],[3,"Url","","A parsed URL record.",N,N],[3,"ParseOptions","","Full configuration for the URL parser.",N,N],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",N,N],[4,"Origin","","The origin of an URL",N,N],[13,"Opaque","","A globally unique identifier",1,N],[13,"Tuple","","Consists of the URL's scheme, host and port",1,N],[4,"Host","","The host name of an URL.",N,N],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,N],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,N],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,N],[4,"ParseError","","Errors that can occur during parsing.",N,N],[13,"EmptyHost","","",3,N],[13,"IdnaError","","",3,N],[13,"InvalidPort","","",3,N],[13,"InvalidIpv4Address","","",3,N],[13,"InvalidIpv6Address","","",3,N],[13,"InvalidDomainCharacter","","",3,N],[13,"RelativeUrlWithoutBase","","",3,N],[13,"RelativeUrlWithCannotBeABaseBase","","",3,N],[13,"SetHostOnCannotBeABaseUrl","","",3,N],[13,"Overflow","","",3,N],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",N,N],[13,"Backslash","","",4,N],[13,"C0SpaceIgnored","","",4,N],[13,"EmbeddedCredentials","","",4,N],[13,"ExpectedDoubleSlash","","",4,N],[13,"ExpectedFileDoubleSlash","","",4,N],[13,"FileWithHostAndWindowsDrive","","",4,N],[13,"NonUrlCodePoint","","",4,N],[13,"NullInFragment","","",4,N],[13,"PercentDecode","","",4,N],[13,"TabOrNewlineIgnored","","",4,N],[13,"UnencodedAtSign","","",4,N],[4,"Position","","Indicates a position within a URL based on its components.",N,N],[13,"BeforeScheme","","",5,N],[13,"AfterScheme","","",5,N],[13,"BeforeUsername","","",5,N],[13,"AfterUsername","","",5,N],[13,"BeforePassword","","",5,N],[13,"AfterPassword","","",5,N],[13,"BeforeHost","","",5,N],[13,"AfterHost","","",5,N],[13,"BeforePort","","",5,N],[13,"AfterPort","","",5,N],[13,"BeforePath","","",5,N],[13,"AfterPath","","",5,N],[13,"BeforeQuery","","",5,N],[13,"AfterQuery","","",5,N],[13,"BeforeFragment","","",5,N],[13,"AfterFragment","","",5,N],[11,"clone","","",2,[[["self"]],["host"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["host"]],["bool"]]],[11,"ne","","",2,[[["self"],["host"]],["bool"]]],[11,"cmp","","",2,[[["self"],["host"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["host"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["host"]],["bool"]]],[11,"le","","",2,[[["self"],["host"]],["bool"]]],[11,"gt","","",2,[[["self"],["host"]],["bool"]]],[11,"ge","","",2,[[["self"],["host"]],["bool"]]],[11,"hash","","",2,N],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,[[["self"]],["host",["string"]]]],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,[[["str"]],["result",["parseerror"]]]],[11,"parse_opaque","","",2,[[["str"]],["result",["parseerror"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["hostandport"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,[[["self"]],["hostandport",["string"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_socket_addrs","","",0,[[["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["socketaddr"]]]],[11,"eq","","",1,[[["self"],["origin"]],["bool"]]],[11,"ne","","",1,[[["self"],["origin"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["origin"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,[[],["origin"]]],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,[[["self"]],["bool"]]],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,[[["self"]],["string"]]],[11,"eq","","",7,[[["self"],["opaqueorigin"]],["bool"]]],[11,"ne","","",7,[[["self"],["opaqueorigin"]],["bool"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["opaqueorigin"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"drop","","",8,[[["self"]]]],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",8,[[["self"]],["self"]]],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",8,[[["self"]],["self"]]],[11,"pop","","Remove the last segment of this URL’s path.",8,[[["self"]],["self"]]],[11,"push","","Append the given segment at the end of this URL’s path.",8,[[["self"],["str"]],["self"]]],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,[[["self"],["i"]],["self"]]],[11,"eq","","",3,[[["self"],["parseerror"]],["bool"]]],[11,"clone","","",3,[[["self"]],["parseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["errors"]],["parseerror"]]],[11,"eq","","",4,[[["self"],["syntaxviolation"]],["bool"]]],[11,"clone","","",4,[[["self"]],["syntaxviolation"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"index","","",9,[[["self"],["rangefull"]],["str"]]],[11,"index","","",9,[[["self"],["rangefrom",["position"]]],["str"]]],[11,"index","","",9,[[["self"],["rangeto",["position"]]],["str"]]],[11,"index","","",9,[[["self"],["range",["position"]]],["str"]]],[11,"clone","","",5,[[["self"]],["position"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",N,N],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",N,N],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",N,N],[3,"ByteSerialize","","Return value of `byte_serialize()`.",N,N],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",N,N],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",N,N],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",N,N],[8,"Target","","",N,N],[10,"as_mut_string","","",10,[[["self"]],["string"]]],[10,"finish","","",10,N],[16,"Finished","","",10,N],[11,"clone","","",11,[[["self"]],["parse"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",11,[[["self"]],["parseintoowned"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option",["str"]]]],[11,"size_hint","","",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"as_mut_string","url","",15,[[["self"]],["string"]]],[11,"finish","","",15,[[["self"]],["url"]]],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,[[["t"]],["self"]]],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,[[["t"],["usize"]],["self"]]],[11,"clear","","Remove any existing name/value pair.",14,[[["self"]],["self"]]],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,[[["self"],["f"]],["self"]]],[11,"append_pair","","Serialize and append a name/value pair.",14,[[["self"],["str"],["str"]],["self"]]],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,[[["self"],["i"]],["self"]]],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,N],[11,"clone","url","",9,[[["self"]],["url"]]],[11,"clone","","",16,[[["self"]],["parseoptions"]]],[11,"base_url","","Change the base URL",16,[[["self"],["option",["url"]]],["self"]]],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",16,[[["self"],["option",["fn"]]],["self"]]],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",16,[[["self"],["option",["fn"]]],["self"]]],[11,"parse","","Parse an URL string with the configuration so far.",16,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"parse","","Parse an absolute URL from a string.",9,[[["str"]],["result",["url","parseerror"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",9,[[["str"],["i"]],["result",["url","parseerror"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",9,[[["self"],["str"]],["result",["url","parseerror"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",9,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",9,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",9,[[["self"]],["string"]]],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",9,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",9,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",9,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",9,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",9,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",9,[[["self"]],["option",["str"]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",9,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",9,[[["self"]],["option",["str"]]]],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",9,[[["self"]],["option",["host"]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",9,[[["self"]],["option",["str"]]]],[11,"port","","Return the port number for this URL, if any.",9,[[["self"]],["option",["u16"]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",9,[[["self"]],["option",["u16"]]]],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",9,[[["self"],["f"]],["result",["hostandport"]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",9,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",9,[[["self"]],["option",["split"]]]],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",9,[[["self"]],["option",["str"]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",9,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",9,[[["self"]],["option",["str"]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",9,[[["self"],["option",["str"]]]]],[11,"set_query","","Change this URL’s query string.",9,[[["self"],["option",["str"]]]]],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",9,[[["self"]],["serializer",["urlquery"]]]],[11,"set_path","","Change this URL’s path.",9,[[["self"],["str"]]]],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",9,[[["self"]],["result",["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",9,[[["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",9,[[["self"],["option",["str"]]],["result",["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",9,[[["self"],["ipaddr"]],["result"]]],[11,"set_password","","Change this URL’s password.",9,[[["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",9,[[["self"],["str"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",9,[[["self"],["str"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",9,[[["p"]],["result",["url"]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",9,[[["p"]],["result",["url"]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",9,[[["self"]],["result",["pathbuf"]]]],[11,"to_socket_addrs","","",9,[[["self"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result",["url","parseerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"cmp","","",9,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",9,[[["self"],["self"]],["option",["ordering"]]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"as_ref","","",9,[[["self"]],["str"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"drop","","",15,[[["self"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vec_map"]={"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",N,N],[3,"VacantEntry","","A vacant Entry.",N,N],[3,"OccupiedEntry","","An occupied Entry.",N,N],[3,"Iter","","An iterator over the key-value pairs of a map.",N,N],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",N,N],[3,"Keys","","An iterator over the keys of a map.",N,N],[3,"Values","","An iterator over the values of a map.",N,N],[3,"ValuesMut","","An iterator over the values of a map.",N,N],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",N,N],[3,"Drain","","A draining iterator over the key-value pairs of a map.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant Entry",0,N],[13,"Occupied","","An occupied Entry",0,N],[11,"default","","",1,[[],["self"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"new","","Creates an empty `VecMap`.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Trims the `VecMap` of any excess capacity.",1,[[["self"]]]],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,[[["self"]],["keys"]]],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,[[["self"]],["values"]]],[11,"values_mut","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r mut V`.",1,[[["self"]],["valuesmut"]]],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,[[["self"]],["itermut"]]],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,[[["self"],["self"]]]],[11,"split_off","","Splits the collection into two at the given key.",1,[[["self"],["usize"]],["self"]]],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,[[["self"]],["drain"]]],[11,"len","","Returns the number of elements in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs.",1,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,[[["self"],["usize"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,[[["self"],["usize"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,[[["self"],["usize"]],["option"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["usize"]],["entry"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,[[["self"],["v"]],["v"]]],[11,"get","","Gets a reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,[[["self"]],["v"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone_from","","",1,[[["self"],["self"]]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["intoiter"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"clone","","",4,[[["self"]],["iter"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"clone","","",6,[[["self"]],["keys"]]],[11,"clone","","",7,[[["self"]],["values"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next","","",6,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option",["usize"]]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"IntoIter"]]};
initSearch(searchIndex);
